{
	"ID": "20230331092123-nl9ols6",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230331092123-nl9ols6",
		"title": "RabbitMQ 详细讲解_rabbitmq详解_猫吻鱼的博客-CSDN博客",
		"updated": "20230331092123"
	},
	"Children": [
		{
			"ID": "20230331092123-zv94hh0",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331092123-zv94hh0",
				"updated": "20230331092123"
			}
		},
		{
			"ID": "20230331092123-2r6r7uc",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230331092123-2r6r7uc",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"ID": "20230331092123-byouvki",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-byouvki",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-8sb5xuo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-8sb5xuo",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502",
									"TextMarkTextContent": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-ku7qx07",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-ku7qx07",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-zvnmqad",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-zvnmqad",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一、AMQP1. 前言AMQP和JMS一样，也是一个消息规范。你可能会想，已经有了JMS(Java Message Service) 。为什么还需要一个AMQP。当然是因为AMQP具备了更多优势了。AMQP 支持跨语言跨平台。AMQP为消息定义了线路层的协议，而JMS所定义的API的规范。这就表示，JMS的API协议能够保证所有的实现都通过通用的API来使用，但是不能保证某个JMS所发送的..."
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-32ad91g",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-32ad91g",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-at3r52c",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-at3r52c",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2023-03-31 09:21:23"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331092123-blwim7f",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331092123-blwim7f",
				"updated": "20230331092123"
			}
		},
		{
			"ID": "20230331092123-ep47bh6",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331092123-ep47bh6",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "文章目录"
				}
			]
		},
		{
			"ID": "20230331092123-t2sttud",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230331092123-t2sttud",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"ID": "20230331092123-rl6mdrj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-rl6mdrj",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-icmuq2c",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-icmuq2c",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#AMQP_1",
									"TextMarkTextContent": "一、AMQP"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-5id3ues",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-5id3ues",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-fb1t7fo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-fb1t7fo",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#RabbitMQ__26",
									"TextMarkTextContent": "二、RabbitMQ 简介"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-ulb245b",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-ulb245b",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-jf29or6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-jf29or6",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#RabbitMQ_57",
									"TextMarkTextContent": "三、RabbitMQ五种消息模型"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-4vl4jt2",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-4vl4jt2",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-vxwb3j7",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230331092123-vxwb3j7",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"ID": "20230331092123-9vrba2k",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331092123-9vrba2k",
										"updated": "20230331092123"
									},
									"Children": [
										{
											"ID": "20230331092123-4ijsc9y",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331092123-4ijsc9y",
												"updated": "20230331092123"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#1_103",
													"TextMarkTextContent": "1、基本消息模型"
												}
											]
										}
									]
								},
								{
									"ID": "20230331092123-zlryqr6",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331092123-zlryqr6",
										"updated": "20230331092123"
									},
									"Children": [
										{
											"ID": "20230331092123-7aakjux",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331092123-7aakjux",
												"updated": "20230331092123"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#2_204",
													"TextMarkTextContent": "2、工作消息模型"
												}
											]
										}
									]
								},
								{
									"ID": "20230331092123-8fu0xav",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331092123-8fu0xav",
										"updated": "20230331092123"
									},
									"Children": [
										{
											"ID": "20230331092123-o8sy03o",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331092123-o8sy03o",
												"updated": "20230331092123"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#3_279",
													"TextMarkTextContent": "3、订阅模型"
												}
											]
										}
									]
								},
								{
									"ID": "20230331092123-v99ayje",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331092123-v99ayje",
										"updated": "20230331092123"
									},
									"Children": [
										{
											"ID": "20230331092123-6f9ya5m",
											"Type": "NodeList",
											"ListData": {},
											"Properties": {
												"id": "20230331092123-6f9ya5m",
												"updated": "20230331092123"
											},
											"Children": [
												{
													"ID": "20230331092123-mz57nvo",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230331092123-mz57nvo",
														"updated": "20230331092123"
													},
													"Children": [
														{
															"ID": "20230331092123-mlghtvh",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230331092123-mlghtvh",
																"updated": "20230331092123"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "a",
																	"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#31_Fanout__307",
																	"TextMarkTextContent": "3.1 Fanout 订阅模型"
																}
															]
														}
													]
												},
												{
													"ID": "20230331092123-o7msi93",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230331092123-o7msi93",
														"updated": "20230331092123"
													},
													"Children": [
														{
															"ID": "20230331092123-q646ru4",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230331092123-q646ru4",
																"updated": "20230331092123"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "a",
																	"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#32_Direct__386",
																	"TextMarkTextContent": "3.2 Direct 订阅模型"
																}
															]
														}
													]
												},
												{
													"ID": "20230331092123-b1sxu9j",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230331092123-b1sxu9j",
														"updated": "20230331092123"
													},
													"Children": [
														{
															"ID": "20230331092123-vsxq85r",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230331092123-vsxq85r",
																"updated": "20230331092123"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "a",
																	"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#33_Topic__470",
																	"TextMarkTextContent": "3.3 Topic 订阅模型"
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-jk6cp91",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-jk6cp91",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-y49vos0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-y49vos0",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#RabbitMQ__567",
									"TextMarkTextContent": "四、RabbitMQ 消息可靠性"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-5a25m2c",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-5a25m2c",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-r6jo26s",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230331092123-r6jo26s",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"ID": "20230331092123-lsf5q43",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331092123-lsf5q43",
										"updated": "20230331092123"
									},
									"Children": [
										{
											"ID": "20230331092123-jra8kcu",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331092123-jra8kcu",
												"updated": "20230331092123"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#1_RabbitMQ__612",
													"TextMarkTextContent": "1. RabbitMQ 持久化"
												}
											]
										}
									]
								},
								{
									"ID": "20230331092123-elwho88",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331092123-elwho88",
										"updated": "20230331092123"
									},
									"Children": [
										{
											"ID": "20230331092123-sc9gxvi",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331092123-sc9gxvi",
												"updated": "20230331092123"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#2_RabbitMQ__623",
													"TextMarkTextContent": "2. RabbitMQ 签收机制"
												}
											]
										}
									]
								},
								{
									"ID": "20230331092123-siq9wx6",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331092123-siq9wx6",
										"updated": "20230331092123"
									},
									"Children": [
										{
											"ID": "20230331092123-krt8u97",
											"Type": "NodeList",
											"ListData": {},
											"Properties": {
												"id": "20230331092123-krt8u97",
												"updated": "20230331092123"
											},
											"Children": [
												{
													"ID": "20230331092123-fwu95wl",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230331092123-fwu95wl",
														"updated": "20230331092123"
													},
													"Children": [
														{
															"ID": "20230331092123-m5nf4s9",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230331092123-m5nf4s9",
																"updated": "20230331092123"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "a",
																	"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#21_RabbitMQ_624",
																	"TextMarkTextContent": "2.1 RabbitMQ生产者签收机制"
																}
															]
														}
													]
												},
												{
													"ID": "20230331092123-kk8a65f",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230331092123-kk8a65f",
														"updated": "20230331092123"
													},
													"Children": [
														{
															"ID": "20230331092123-3nvx187",
															"Type": "NodeList",
															"ListData": {},
															"Properties": {
																"id": "20230331092123-3nvx187",
																"updated": "20230331092123"
															},
															"Children": [
																{
																	"ID": "20230331092123-j6nsh14",
																	"Type": "NodeListItem",
																	"ListData": {
																		"BulletChar": 42,
																		"Marker": "Kg=="
																	},
																	"Properties": {
																		"id": "20230331092123-j6nsh14",
																		"updated": "20230331092123"
																	},
																	"Children": [
																		{
																			"ID": "20230331092123-u3stvbu",
																			"Type": "NodeParagraph",
																			"Properties": {
																				"id": "20230331092123-u3stvbu",
																				"updated": "20230331092123"
																			},
																			"Children": [
																				{
																					"Type": "NodeTextMark",
																					"TextMarkType": "a",
																					"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#211__626",
																					"TextMarkTextContent": "2.1.1 事务机制"
																				}
																			]
																		}
																	]
																},
																{
																	"ID": "20230331092123-l3ipkan",
																	"Type": "NodeListItem",
																	"ListData": {
																		"BulletChar": 42,
																		"Marker": "Kg=="
																	},
																	"Properties": {
																		"id": "20230331092123-l3ipkan",
																		"updated": "20230331092123"
																	},
																	"Children": [
																		{
																			"ID": "20230331092123-tevfebe",
																			"Type": "NodeParagraph",
																			"Properties": {
																				"id": "20230331092123-tevfebe",
																				"updated": "20230331092123"
																			},
																			"Children": [
																				{
																					"Type": "NodeTextMark",
																					"TextMarkType": "a",
																					"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#222_Confirm_665",
																					"TextMarkTextContent": "2.2.2. Confirm模式"
																				}
																			]
																		}
																	]
																}
															]
														}
													]
												},
												{
													"ID": "20230331092123-djwguli",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230331092123-djwguli",
														"updated": "20230331092123"
													},
													"Children": [
														{
															"ID": "20230331092123-vxoks8t",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230331092123-vxoks8t",
																"updated": "20230331092123"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "a",
																	"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#22__RabbitMQ_754",
																	"TextMarkTextContent": "2.2. RabbitMQ消费者者的签收机制:"
																}
															]
														}
													]
												},
												{
													"ID": "20230331092123-bio7787",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230331092123-bio7787",
														"updated": "20230331092123"
													},
													"Children": [
														{
															"ID": "20230331092123-egtmzwr",
															"Type": "NodeList",
															"ListData": {},
															"Properties": {
																"id": "20230331092123-egtmzwr",
																"updated": "20230331092123"
															},
															"Children": [
																{
																	"ID": "20230331092123-fwphrbp",
																	"Type": "NodeListItem",
																	"ListData": {
																		"BulletChar": 42,
																		"Marker": "Kg=="
																	},
																	"Properties": {
																		"id": "20230331092123-fwphrbp",
																		"updated": "20230331092123"
																	},
																	"Children": [
																		{
																			"ID": "20230331092123-ja6gjtp",
																			"Type": "NodeParagraph",
																			"Properties": {
																				"id": "20230331092123-ja6gjtp",
																				"updated": "20230331092123"
																			},
																			"Children": [
																				{
																					"Type": "NodeTextMark",
																					"TextMarkType": "a",
																					"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#221__759",
																					"TextMarkTextContent": "2.2.1. 自动签收"
																				}
																			]
																		}
																	]
																},
																{
																	"ID": "20230331092123-nuq49ae",
																	"Type": "NodeListItem",
																	"ListData": {
																		"BulletChar": 42,
																		"Marker": "Kg=="
																	},
																	"Properties": {
																		"id": "20230331092123-nuq49ae",
																		"updated": "20230331092123"
																	},
																	"Children": [
																		{
																			"ID": "20230331092123-p7byrku",
																			"Type": "NodeParagraph",
																			"Properties": {
																				"id": "20230331092123-p7byrku",
																				"updated": "20230331092123"
																			},
																			"Children": [
																				{
																					"Type": "NodeTextMark",
																					"TextMarkType": "a",
																					"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#222__779",
																					"TextMarkTextContent": "2.2.2. 手动签收"
																				}
																			]
																		}
																	]
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-dj5ek54",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-dj5ek54",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-7jh27hs",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-7jh27hs",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#Spring__RabbitMQ_821",
									"TextMarkTextContent": "五、Spring 中整合 RabbitMQ"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-zdufb8r",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-zdufb8r",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-kashdny",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230331092123-kashdny",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"ID": "20230331092123-u2n0i5c",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331092123-u2n0i5c",
										"updated": "20230331092123"
									},
									"Children": [
										{
											"ID": "20230331092123-5a6s9vc",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331092123-5a6s9vc",
												"updated": "20230331092123"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#1__rabbitmqproperties_822",
													"TextMarkTextContent": "1. 创建 rabbitmq.properties.配置文件配置基础信息"
												}
											]
										}
									]
								},
								{
									"ID": "20230331092123-sqvmwsg",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331092123-sqvmwsg",
										"updated": "20230331092123"
									},
									"Children": [
										{
											"ID": "20230331092123-qu5ysvy",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331092123-qu5ysvy",
												"updated": "20230331092123"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#2___840",
													"TextMarkTextContent": "2. 发送与接收消息"
												}
											]
										}
									]
								},
								{
									"ID": "20230331092123-5bi8205",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331092123-5bi8205",
										"updated": "20230331092123"
									},
									"Children": [
										{
											"ID": "20230331092123-4rvw82e",
											"Type": "NodeList",
											"ListData": {},
											"Properties": {
												"id": "20230331092123-4rvw82e",
												"updated": "20230331092123"
											},
											"Children": [
												{
													"ID": "20230331092123-mwvawdj",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230331092123-mwvawdj",
														"updated": "20230331092123"
													},
													"Children": [
														{
															"ID": "20230331092123-l1u4ack",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230331092123-l1u4ack",
																"updated": "20230331092123"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "a",
																	"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#21_RabbitTemplate__841",
																	"TextMarkTextContent": "2.1. 使用RabbitTemplate 发送与接收消息"
																}
															]
														}
													]
												},
												{
													"ID": "20230331092123-sln8lry",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230331092123-sln8lry",
														"updated": "20230331092123"
													},
													"Children": [
														{
															"ID": "20230331092123-dyf3h7v",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230331092123-dyf3h7v",
																"updated": "20230331092123"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "a",
																	"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#22__1003",
																	"TextMarkTextContent": "2.2 发送消息和接收消息的代码"
																}
															]
														}
													]
												},
												{
													"ID": "20230331092123-vxtn1e6",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230331092123-vxtn1e6",
														"updated": "20230331092123"
													},
													"Children": [
														{
															"ID": "20230331092123-uzkfb64",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230331092123-uzkfb64",
																"updated": "20230331092123"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "a",
																	"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#23__1043",
																	"TextMarkTextContent": "2.3 测试"
																}
															]
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20230331092123-0s5pcni",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331092123-0s5pcni",
										"updated": "20230331092123"
									},
									"Children": [
										{
											"ID": "20230331092123-2xnpohn",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331092123-2xnpohn",
												"updated": "20230331092123"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#3__1050",
													"TextMarkTextContent": "3. 使用消息驱动接收消息"
												}
											]
										}
									]
								},
								{
									"ID": "20230331092123-pnqyzhj",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331092123-pnqyzhj",
										"updated": "20230331092123"
									},
									"Children": [
										{
											"ID": "20230331092123-kyl61vp",
											"Type": "NodeList",
											"ListData": {},
											"Properties": {
												"id": "20230331092123-kyl61vp",
												"updated": "20230331092123"
											},
											"Children": [
												{
													"ID": "20230331092123-iyi141j",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230331092123-iyi141j",
														"updated": "20230331092123"
													},
													"Children": [
														{
															"ID": "20230331092123-tpyh0s2",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230331092123-tpyh0s2",
																"updated": "20230331092123"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "a",
																	"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#31__1054",
																	"TextMarkTextContent": "3.1 指定消息驱动类"
																}
															]
														}
													]
												},
												{
													"ID": "20230331092123-d4ay4o3",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230331092123-d4ay4o3",
														"updated": "20230331092123"
													},
													"Children": [
														{
															"ID": "20230331092123-237198i",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230331092123-237198i",
																"updated": "20230331092123"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "a",
																	"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#33___1184",
																	"TextMarkTextContent": "3.3 使用注解方式配置"
																}
															]
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20230331092123-sqbxnwj",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331092123-sqbxnwj",
										"updated": "20230331092123"
									},
									"Children": [
										{
											"ID": "20230331092123-0x29xaq",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331092123-0x29xaq",
												"updated": "20230331092123"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/101756920?spm=1001.2014.3001.5502#4___xml_1241",
													"TextMarkTextContent": "4. 补充 ： xml配置文件"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331092123-05awsbo",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331092123-05awsbo",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一、AMQP"
				}
			]
		},
		{
			"ID": "20230331092123-oy9gavx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-oy9gavx",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "AMQP和JMS一样，也是一个消息规范。你可能会想，已经有了JMS(Java Message Service) 。为什么还需要一个AMQP。当然是因为AMQP具备了更多优势了。"
				}
			]
		},
		{
			"ID": "20230331092123-v4xyugx",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230331092123-v4xyugx",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"ID": "20230331092123-wlm0jvx",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-wlm0jvx",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-x6ai9s6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-x6ai9s6",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "AMQP 支持跨语言跨平台"
								},
								{
									"Type": "NodeText",
									"Data": "​。AMQP为消息定义了线路层的协议，而JMS所定义的API的规范。这就表示，JMS的API协议能够保证所有的实现都通过通用的API来使用，但是不能保证某个JMS所发送的消息能被另外不同的JMS实现所使用。而AMQP的线路层协议规范了消息的格式，消息在生产者和消费者间传递的时候会遵循这个协议。"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-ubo4444",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-ubo4444",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-um7jqs9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-um7jqs9",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "AMQP 具有更加灵活和透明的消息模型"
								},
								{
									"Type": "NodeText",
									"Data": "​。对于JMS，仅有点对点和发布-订阅两种模式消息模型可选。而AMQP通过将消息生产者和存放消息的队列解耦实现了包含但不局限于这两种的消息模型。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331092123-a2m2o9p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-a2m2o9p",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在JMS中，通道有助于解耦消息的生产者和消费者，但是这两者依然会和通道相耦合。生产者将消息发布到一个特定的队列或者主题中，消费者从特定的队列或主题中接收消息。通道具有了双重责任。而与之不同的是AMQP的生产者并不会直接将消息发布到队列中，AMQP在消息的生产者以及传递信息的队列之间引入了一种间接的机制：Exchange。消息的生产者将信息发布到一个Exchange上。Exchange会绑定到一个或多个队列上，他负责将信息路由到队列上。信息的消费者会从队列中提取数据并进行处理。"
				}
			]
		},
		{
			"ID": "20230331092123-znuv9ej",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-znuv9ej",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "AMQP四种不同的Exchange"
				}
			]
		},
		{
			"ID": "20230331092123-n6ry7zq",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"colgroup": "|",
				"id": "20230331092123-n6ry7zq",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "标准"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "概念"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Direct"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果消息的 routing key 与 binding 的routeing key直接匹配的话，消息将会路由到该队列上"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Topic"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果消息的 routing key 与 binding 的routeing key符合通配符匹配的话，消息将会路由到该队列上"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Headers"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果消息参数表中的头信息和值都与binding参数表中匹配的话，消息将会路由到该队列上"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Fanout"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不管消息的routing key和参数表的头信息/值是什么，消息将会路由到所有队列上"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331092123-21buepg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-21buepg",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "借助上面四种类型的Exchange，可以定义出不再仅限于点对点和发布-订阅的方式。"
				}
			]
		},
		{
			"ID": "20230331092123-wdink6w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-wdink6w",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "AMQP 和 JMS 的区别:"
				}
			]
		},
		{
			"ID": "20230331092123-4dpblmw",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230331092123-4dpblmw",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"ID": "20230331092123-cz14d3d",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-cz14d3d",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-28p0pzf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-28p0pzf",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "JMS是定义了统一的接口，来对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-f0i5f05",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-f0i5f05",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-fb9aovw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-fb9aovw",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-x4v90ia",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-x4v90ia",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-ivino0l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-ivino0l",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "JMS规定了两种消息模型；而AMQP的消息模型更加丰富"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331092123-6gin5t5",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331092123-6gin5t5",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://so.csdn.net/so/search?q=RabbitMQ\u0026spm=1001.2101.3001.7020",
					"TextMarkTextContent": "RabbitMQ"
				},
				{
					"Type": "NodeText",
					"Data": " 简介"
				}
			]
		},
		{
			"ID": "20230331092123-i9y26a6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-i9y26a6",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "RabbitMQ 是使用Erlang编写的一个开源的消息队列，本身支持很多的协议：AMQP，XMPP, SMTP, STOMP，也正是如此，使的它变的非常重量级，更适合于企业级的开发。同时实现了一个经纪人(Broker)构架，这意味着消息在发送给客户端时先在中心队列排队。对路由(Routing)，负载均衡(Load balance)或者数据持久化都有很好的支持。\nRabbitMQ是一个消息代理：它接受和转发消息。 你可以把它想象成一个邮局：当你把邮件放在邮箱里时，你可以确定邮差先生最终会把邮件发送给你的收件人。 在这个比喻中，RabbitMQ是邮政信箱，邮局和邮递员。"
				}
			]
		},
		{
			"ID": "20230331092123-bl3n0am",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-bl3n0am",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "RabbitMQ与邮局的主要区别是它不处理纸张，而是接受，存储和转发数据消息的二进制数据块。"
				}
			]
		},
		{
			"ID": "20230331092123-2gewm5d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-2gewm5d",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/20191009133958598-20230331092122-cd5z677.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230331092123-roszp6l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-roszp6l",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "生产者:"
				}
			]
		},
		{
			"ID": "20230331092123-cyag01x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-cyag01x",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "(1) 生产者连接到RabbitMQ Broker，建立一个连接( Connection)开启一个信道(Channel)\n(2) 生产者声明一个交换器，并设置相关属性，比如交换机类型、是否持久化等\n(3) 生产者声明一个队列井设置相关属性，比如是否排他、是否持久化、是否自动删除等\n(4) 生产者通过路由键将交换器和队列绑定起来\n(5) 生产者发送消息至RabbitMQ Broker，其中包含路由键、交换器等信息。\n(6) 相应的交换器根据接收到的路由键查找相匹配的队列。\n(7) 如果找到，则将从生产者发送过来的消息存入相应的队列中。\n(8) 如果没有找到，则根据生产者配置的属性选择丢弃还是回退给生产者\n(9) 关闭信道。\n(10) 关闭连接。"
				}
			]
		},
		{
			"ID": "20230331092123-431bxzw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-431bxzw",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "消费者:"
				}
			]
		},
		{
			"ID": "20230331092123-zxwzcty",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-zxwzcty",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "(1) 消费者连接到RabbitMQ Broker ，建立一个连接(Connection)，开启一个信道(Channel) 。\n(2) 消费者向RabbitMQ Broker 请求消费相应队列中的消息，可能会设置相应的回调函数，\n(3) 等待RabbitMQ Broker 回应并投递相应队列中的消息，消费者接收消息。\n(4) 消费者确认(ack) 接收到的消息。\n(5) RabbitMQ 从队列中删除相应己经被确认的消息。\n(6) 关闭信道。\n(7)关闭连接。"
				}
			]
		},
		{
			"ID": "20230331092123-e99y63i",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331092123-e99y63i",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "三、RabbitMQ五种消息模型"
				}
			]
		},
		{
			"ID": "20230331092123-twm09pa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-twm09pa",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "RabbitMQ 提供了5种消息模式(其实是6种，只不过第六种属于RPC，所以不在此讨论)。五种消费模型分别是 ​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "基本消息模型、工作消费模型、Fanout订阅模型、Direct订阅模型、Topic订阅模型。"
				},
				{
					"Type": "NodeText",
					"Data": "​。其中后三种都属于订阅模型。"
				}
			]
		},
		{
			"ID": "20230331092123-wl4mhqq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-wl4mhqq",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "先做些准备工作："
				}
			]
		},
		{
			"ID": "20230331092123-maqhoxd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-maqhoxd",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "1 创建虚拟节点RabbitMQ 管理平台默认地址: http://localhost:15672默认用户名密码都是guest。"
				}
			]
		},
		{
			"ID": "20230331092123-f0dwhaa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-f0dwhaa",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其实这一步创不创建无所谓"
				}
			]
		},
		{
			"ID": "20230331092123-6bqrp7j",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230331092123-6bqrp7j",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"ID": "20230331092123-nb46rhb",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230331092123-nb46rhb",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-w687cvx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-w687cvx",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们使用guest 登陆后，选择admin创建一个新用户 kingfish\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "在这里插入图片描述"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/20191218153544215-20230331092122-rh9h31q.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-vu725yd",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230331092123-vu725yd",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-zfyfk1b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-zfyfk1b",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "创建虚拟节点/hello。我这里已经创建。\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "在这里插入图片描述"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/20191218162813315-20230331092123-geo0fof.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-nuc42zv",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230331092123-nuc42zv",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-h1wzxmp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-h1wzxmp",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "点击创建完成的 /hello 节点，分配给 kingfish\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "在这里插入图片描述"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/20191218162947216-20230331092122-18rqgyk.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331092123-ed67t8c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-ed67t8c",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "2 创建RabbitMQ连接工具类"
				}
			]
		},
		{
			"ID": "20230331092123-4k8yglg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-4k8yglg",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个工具类就是和RabbitMQ建立了连接，否则后面要写很多重复代码。"
				}
			]
		},
		{
			"ID": "20230331092123-os5jtps",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-os5jtps",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/**\n * @Data: 2019/12/18\n * @Des:\n */\npublic class RabbitMQUtils { \n    public static Connection getConection() throws IOException, TimeoutException { \n        //定义连接工厂\n        ConnectionFactory factory = new ConnectionFactory();\n        //设置服务地址\n        factory.setHost(\"localhost\");\n        //端口\n        factory.setPort(5672);\n        //设置账号信息，用户名、密码、vhost\n        factory.setVirtualHost(\"/hello\");\n        factory.setUsername(\"kingfish\");\n        factory.setPassword(\"kingfish\");\n        // 通过工程获取连接\n        Connection connection = factory.newConnection();\n        return connection;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-zewi8d9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-zewi8d9",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "下面开始介绍五种消息模型:"
				}
			]
		},
		{
			"ID": "20230331092123-e48w89t",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331092123-e48w89t",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1、基本消息模型"
				}
			]
		},
		{
			"ID": "20230331092123-8gbf0k9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-8gbf0k9",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基本消费模型架构图:\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "基本消费模型"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/20191218152539889-20230331092122-y0f6ova.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "其中 ："
				}
			]
		},
		{
			"ID": "20230331092123-ehn2079",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230331092123-ehn2079",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"ID": "20230331092123-7r5gykc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-7r5gykc",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-1bj0jux",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-1bj0jux",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "P（producer/ publisher）"
								},
								{
									"Type": "NodeText",
									"Data": "​：生产者，一个发送消息的用户应用程序。"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-ac8f00f",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-ac8f00f",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-ssgzlqx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-ssgzlqx",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "C（consumer）"
								},
								{
									"Type": "NodeText",
									"Data": "​：消费者，消费和接收有类似的意思，消费者是一个主要用来等待接收消息的用户应用程序"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-zrofkx7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-zrofkx7",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-tdi7l67",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-tdi7l67",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "队列（红色区域）"
								},
								{
									"Type": "NodeText",
									"Data": "​：rabbitmq内部类似于邮箱的一个概念。虽然消息流经rabbitmq和你的应用程序，但是它们只能存储在队列中。队列只受主机的内存和磁盘限制，实质上是一个大的消息缓冲区。许多生产者可以发送消息到一个队列，许多消费者可以尝试从一个队列接收数据。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331092123-o52c6li",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-o52c6li",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "生产者将消息发送到队列，消费者从队列中获取消息，队列是存储消息的缓冲区。"
				}
			]
		},
		{
			"ID": "20230331092123-xghpfko",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-xghpfko",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "需要注意的是： 虽然架构图是这样画，但是本质上的信息还是通过交换机(Exchange)。在不声明交换机的情况下，使用的是RabbitMQ默认的交换机。"
				}
			]
		},
		{
			"ID": "20230331092123-r3kj8q7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-r3kj8q7",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "1、生产者代码如下："
				}
			]
		},
		{
			"ID": "20230331092123-cdq22ya",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-cdq22ya",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package com.kingfish.test.rabbitmq.basic;\n\nimport com.kingfish.test.rabbitmq.RabbitMQUtils;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @Data: 2019/12/18\n * @Des:  基本消息模型  生产者\n */\npublic class BasicProducer { \n    private static final String QUEUE_NAME = \"BaseQueueName\";\n    public static void main(String[] args) throws IOException, TimeoutException { \n        // 获取连接\n        Connection connection = RabbitMQUtils.getConection();\n        // 从连接中创建通道。后面大部分的操作都是通过通道完成\n        Channel channel = connection.createChannel();\n        // 在通道中创建一个队列\n        // 【参数说明：参数一：队列名称，参数二：是否持久化；参数三：是否独占模式；参数四：消费者断开连接时是否删除队列；参数五：消息其他参数】\n        channel.queueDeclare(QUEUE_NAME, false, false, false, null);\n\n        // 消息内容\n        String message = \"info : 地瓜地瓜\";\n        channel.basicPublish(\"\", QUEUE_NAME, null, message.getBytes());\n        System.out.println(\"### 消息已发送 ： \" + message);\n\n        //关闭通道和连接\n        channel.close();\n        connection.close();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-d0awcfi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-d0awcfi",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "2 . 执行生产者后，我们可以看到有一条消息已经发送到了队列中"
				},
				{
					"Type": "NodeText",
					"Data": "\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/20191218163919920-20230331092123-wjv6tj4.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "3. 查看队列中的信息，可以看到，这个消息被发送到了默认的交换机(Exchange) 上，且RoutingKey(默认) 即队列名。"
				},
				{
					"Type": "NodeText",
					"Data": "\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/20191218164017838-20230331092123-cubv91f.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230331092123-h4nqph2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-h4nqph2",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "4. 消费者 代码如下"
				}
			]
		},
		{
			"ID": "20230331092123-5p380ab",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-5p380ab",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package com.kingfish.test.rabbitmq.basic;\n\nimport com.kingfish.test.rabbitmq.RabbitMQUtils;\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @Data: 2019/12/18\n * @Des: 基本消息模型，消费者\n */\npublic class BasicConsumer { \n    private static final String QUEUE_NAME = \"BaseQueueName\";\n\n    public static void main(String[] args) throws IOException, TimeoutException { \n        // 获取连接\n        Connection connection = RabbitMQUtils.getConection();\n        // 从连接中创建通道。后面大部分的操作都是通过通道完成\n        Channel channel = connection.createChannel();\n        // 在通道中创建一个队列。如果通道中已经存在该队列，则不会重新创建。\n        // 如果队列中没有该队列直接绑定会报错，所以生产者消费者中都需要声明队列\n        channel.queueDeclare(QUEUE_NAME, false, false, false, null);\n        // 定义队列的消费者\n        DefaultConsumer consumer = new DefaultConsumer(channel) { \n            // 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,\n                                       byte[] body) throws IOException { \n                // body 即消息体\n                String msg = new String(body);\n                System.out.println(\"地瓜消费者001 收到消息 : \" + msg);\n            }\n        };\n        // 监听队列，第二个参数：是否自动进行消息确认。\n        channel.basicConsume(QUEUE_NAME, true, consumer);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-6rkah5p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-6rkah5p",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "5. 可以看到队列中消息确实被消费了。并且消费者确实接受到了消息。"
				},
				{
					"Type": "NodeText",
					"Data": "\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/20191218164320564-20230331092123-x5vz6c0.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/20191218164304753-20230331092122-ebxwc2e.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230331092123-mwobobf",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331092123-mwobobf",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2、工作消息模型"
				}
			]
		},
		{
			"ID": "20230331092123-u8mt8kx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-u8mt8kx",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基本消费模型架构图:\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/20191218164837502-20230331092122-tzemov1.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n在实际应用中，我们的消费者可能是集群消费。所以形成了工作消费模型。(实际上我们的生产者可能也是个集群)。"
				}
			]
		},
		{
			"ID": "20230331092123-numv3li",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-numv3li",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "1、生产者代码如下:"
				}
			]
		},
		{
			"ID": "20230331092123-buc502o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-buc502o",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里的代码和上面的唯一的区别就是加了一个循环，发送了50次消息"
				}
			]
		},
		{
			"ID": "20230331092123-shrc23d",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-shrc23d",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class WorkProducer { \n    private static final String QUEUE_NAME = \"WorkQueueName\";\n\n    public static void main(String[] args) throws IOException, TimeoutException { \n        // 获取连接\n        Connection connection = RabbitMQUtils.getConection();\n        // 从连接中创建通道。后面大部分的操作都是通过通道完成\n        Channel channel = connection.createChannel();\n        // 在通道中创建一个队列\n        // 【参数说明：参数一：队列名称，参数二：是否持久化；参数三：是否独占模式；参数四：消费者断开连接时是否删除队列；参数五：消息其他参数】\n        channel.queueDeclare(QUEUE_NAME, false, false, false, null);\n\n        for (int i = 0; i \u003c 50; i++) { \n            // 消息内容\n            String message = \"info : 地瓜地瓜 \" + i;\n            channel.basicPublish(\"\", QUEUE_NAME, null, message.getBytes());\n            System.out.println(\"### 消息已发送 ： \" + message);\n        }\n\n        //关闭通道和连接\n        channel.close();\n        connection.close();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-s701von",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-s701von",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "生产者运行后\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/2019121817020095-20230331092123-ftbgdmv.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230331092123-cvd73ok",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-cvd73ok",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "2. 消费者1代码如下:"
				},
				{
					"Type": "NodeText",
					"Data": "\n(消费者2 的代码和消费者1完全相同，这里就不在给出"
				}
			]
		},
		{
			"ID": "20230331092123-l4kphii",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-l4kphii",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class WorkConsumer1 { \n    private static final String QUEUE_NAME = \"WorkQueueName\";\n\n    public static void main(String[] args) throws IOException, TimeoutException { \n        // 获取连接\n        Connection connection = RabbitMQUtils.getConection();\n        // 从连接中创建通道。后面大部分的操作都是通过通道完成\n        Channel channel = connection.createChannel();\n        // 在通道中创建一个队列。如果通道中已经存在该队列，则不会重新创建。\n        // 如果队列中没有该队列直接绑定会报错，所以生产者消费者中都需要声明队列\n        channel.queueDeclare(QUEUE_NAME, false, false, false, null);\n         // 设置消费者一次只能拉取一个消息\n        channel.basicQos(1);\n        // 定义队列的消费者\n        DefaultConsumer consumer = new DefaultConsumer(channel) { \n            // 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { \n                // body 即消息体\n                String msg = new String(body);\n                System.out.println(\"地瓜消费者001 收到消息 : \" + msg);\n            }\n        };\n        // 监听队列，第二个参数：是否自动进行消息确认。\n        channel.basicConsume(QUEUE_NAME, true, consumer);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-6tsa1jx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-6tsa1jx",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "注："
				},
				{
					"Type": "NodeText",
					"Data": "\n由于RabbitMQ的机制，会先均分给两个消费者消息。这时候如果两个消费者由于性能或其他问题处理速度不同，就会造成一个消费者早已经处理结束分配的消息，另一个消费者还在处理。这显然是不合理的。所以通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "channel.basicQos(1);"
				},
				{
					"Type": "NodeText",
					"Data": "​ 设置每次值拉取一个消息。即每次只吃一个，吃完再拿，避免了上述情况。"
				}
			]
		},
		{
			"ID": "20230331092123-il91nyt",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331092123-il91nyt",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3、订阅模型"
				}
			]
		},
		{
			"ID": "20230331092123-f0jb7lv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-f0jb7lv",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "后面的三种都属于订阅模型，只不过规则不同而已。"
				}
			]
		},
		{
			"ID": "20230331092123-2taa9xs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-2taa9xs",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在之前的模式中，我们创建了一个工作队列。 工作队列背后的假设是：每个任务只被传递给一个工作人员。 在这一部分，我们将做一些完全不同的事情 - 我们将会传递一个信息给多个消费者。 这种模式被称为“发布/订阅”。"
				}
			]
		},
		{
			"ID": "20230331092123-ta3xd0v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-ta3xd0v",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "订阅模型示意图：\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/20191218170839860-20230331092122-cx7d4ea.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "解读："
				}
			]
		},
		{
			"ID": "20230331092123-2rex8fs",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-2rex8fs",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "1、1个生产者，多个消费者\n2、每一个消费者都有自己的一个队列\n3、生产者没有将消息直接发送到队列，而是发送到了交换机\n4、每个队列都要绑定到交换机\n5、生产者发送的消息，经过交换机到达队列，实现一个消息被多个消费者获取的目的\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-wzep1ot",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-wzep1ot",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "X（Exchanges）"
				},
				{
					"Type": "NodeText",
					"Data": "​：交换机一方面：接收生产者发送的消息。另一方面：知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。"
				}
			]
		},
		{
			"ID": "20230331092123-1gt2d8v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-1gt2d8v",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Exchange类型有以下几种："
				}
			]
		},
		{
			"ID": "20230331092123-fzdvumm",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230331092123-fzdvumm",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"ID": "20230331092123-fv96a7y",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-fv96a7y",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-kgkq50c",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-kgkq50c",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Fanout"
								},
								{
									"Type": "NodeText",
									"Data": "​：广播，将消息交给所有绑定到交换机的队列"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-znn2s68",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-znn2s68",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-yu05qwr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-yu05qwr",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Direct"
								},
								{
									"Type": "NodeText",
									"Data": "​：定向，把消息交给符合指定routing key 的队列"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-wlj82ik",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-wlj82ik",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-xf0g51g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-xf0g51g",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Topic"
								},
								{
									"Type": "NodeText",
									"Data": "​：通配符，把消息交给符合routing pattern（路由模式） 的队列"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331092123-i6hg1nc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-i6hg1nc",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "需要注意：Exchange（交换机）只负责转发消息，不具备存储消息的能力，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！"
				}
			]
		},
		{
			"ID": "20230331092123-9oomscz",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331092123-9oomscz",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.1 Fanout 订阅模型"
				}
			]
		},
		{
			"ID": "20230331092123-nxeleah",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-nxeleah",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/20191218171148684-20230331092123-ik1kfkl.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230331092123-kfu384p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-kfu384p",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在广播模式下，消息发送流程是这样的："
				}
			]
		},
		{
			"ID": "20230331092123-1jt88rj",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230331092123-1jt88rj",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"ID": "20230331092123-bkblj4l",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-bkblj4l",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-mcl47ja",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-mcl47ja",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "1） 可以有多个消费者"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-1o5cuo7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-1o5cuo7",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-73v8ova",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-73v8ova",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2） 每个消费者有自己的queue（队列）"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-f5ecmu9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-f5ecmu9",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-b0m4jou",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-b0m4jou",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "3） 每个队列都要绑定到Exchange（交换机）"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-kzekj29",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-kzekj29",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-xf1l7pu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-xf1l7pu",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "4） 生产者发送的消息，只能发送到交换机，交换机来决定要发给哪个队列，生产者无法决定。"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-ie938sd",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-ie938sd",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-eeus52o",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-eeus52o",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "5） 交换机把消息发送给绑定过的所有队列"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-wmtrynv",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-wmtrynv",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-unjpwpw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-unjpwpw",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "6） 队列的消费者都能拿到消息。实现一条消息被多个消费者消费"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331092123-ae9qsmo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-ae9qsmo",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "1. 生产者代码"
				}
			]
		},
		{
			"ID": "20230331092123-72zmpdc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-72zmpdc",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Fanout 模式下 : 生产者的代码中不在声明队列，直接把消息发送给交换机，交换机发送给所有绑定的队列"
				}
			]
		},
		{
			"ID": "20230331092123-lzeqlgw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-lzeqlgw",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class FanoutProducer { \n    private static final String EXCHANGE_NAME = \"fanout_exchange\";\n    public static void main(String[] args) throws IOException, TimeoutException { \n        // 获取连接\n        Connection connection = RabbitMQUtils.getConection();\n        // 从连接中创建通道。后面大部分的操作都是通过通道完成\n        Channel channel = connection.createChannel();\n        // 声明exchange，指定类型为fanout\n        channel.exchangeDeclare(EXCHANGE_NAME, \"fanout\");\n\n        // 消息内容\n        String message = \"info : 地瓜地瓜 \";\n        channel.basicPublish(EXCHANGE_NAME, \"\", null, message.getBytes());\n        System.out.println(\"### 消息已发送 ： \" + message);\n\n        //关闭通道和连接\n        channel.close();\n        connection.close();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-nqh4yi6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-nqh4yi6",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "2. 消费者代码"
				},
				{
					"Type": "NodeText",
					"Data": "\n两个消费者代码相同，这里只贴出一个)"
				}
			]
		},
		{
			"ID": "20230331092123-1n1ulns",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-1n1ulns",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class FanoutConsumer1 { \n    private static final String EXCHANGE_NAME = \"fanout_exchange\";\n    private static final String QUEUE_NAME = \"fanout_queue_name1\";\n\n    public static void main(String[] args) throws IOException, TimeoutException { \n        // 获取连接\n        Connection connection = RabbitMQUtils.getConection();\n        // 从连接中创建通道。后面大部分的操作都是通过通道完成\n        Channel channel = connection.createChannel();\n        // 在通道中创建一个队列。如果通道中已经存在该队列，则不会重新创建。\n        // 如果队列中没有该队列直接绑定会报错，所以生产者消费者中都需要声明队列\n        channel.queueDeclare(QUEUE_NAME, false, false, false, null);\n        // 声明交换机，若存在则不重新声明\n        channel.exchangeDeclare(EXCHANGE_NAME,   \"fanout\");\n        // 绑定队列到交换机\n        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, \"\");\n        // 设置消费者一次只能拉取一个消息\n        channel.basicQos(1);\n        // 定义队列的消费者\n        DefaultConsumer consumer = new DefaultConsumer(channel) { \n            // 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { \n                // body 即消息体\n                String msg = new String(body);\n                System.out.println(\"地瓜消费者001 收到消息 : \" + msg);\n            }\n        };\n        // 监听队列，第二个参数：是否自动进行消息确认。\n        channel.basicConsume(QUEUE_NAME, true, consumer);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-uvmpy8q",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331092123-uvmpy8q",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.2 Direct 订阅模型"
				}
			]
		},
		{
			"ID": "20230331092123-x5q8g06",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-x5q8g06",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "有选择性的接收消息"
				},
				{
					"Type": "NodeText",
					"Data": "\n在订阅模式中，生产者发布消息，所有消费者都可以获取所有消息。\n在路由模式中，我们将添加一个功能 - 我们将只能订阅一部分消息。 例如，我们只能将重要的错误消息引导到日志文件（以节省磁盘空间），同时仍然能够在控制台上打印所有日志消息。\n但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。\n在Direct模型下，队列与交换机的绑定，不能是任意绑定了，而是要指定一个RoutingKey（路由key）\n消息的发送方在向Exchange发送消息时，也必须指定消息的routing key。"
				}
			]
		},
		{
			"ID": "20230331092123-6eisvkt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-6eisvkt",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/20191218171225930-20230331092122-4ijfxca.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230331092123-2jpwswa",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230331092123-2jpwswa",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"ID": "20230331092123-smd241d",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-smd241d",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-icmfb79",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-icmfb79",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-8xcivh2",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-8xcivh2",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-n22e06a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-n22e06a",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-6zecyuv",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-6zecyuv",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-o38nf3h",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-o38nf3h",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "C1：消费者，其所在队列指定了需要routing key 为 error 的消息"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-75j5oc8",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-75j5oc8",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-lq5cxt6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-lq5cxt6",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "C2：消费者，其所在队列指定了需要routing key 为 info、error、warning 的消息"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331092123-ctglk1j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-ctglk1j",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "1. 生产者代码"
				}
			]
		},
		{
			"ID": "20230331092123-ajrxkwr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-ajrxkwr",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class DirectProducer { \n    private static final String EXCHANGE_NAME = \"direct_exchange\";\n    public static void main(String[] args) throws IOException, TimeoutException { \n        // 获取连接\n        Connection connection = RabbitMQUtils.getConection();\n        // 从连接中创建通道。后面大部分的操作都是通过通道完成\n        Channel channel = connection.createChannel();\n        // 声明exchange，指定类型为direct\n        channel.exchangeDeclare(EXCHANGE_NAME, \"direct\");\n\n        // 消息内容\n        String message = \"info : 地瓜地瓜 \";\n        channel.basicPublish(EXCHANGE_NAME, \"info\", null, message.getBytes());\n        System.out.println(\"### 消息已发送 ： \" + message);\n\n        //关闭通道和连接\n        channel.close();\n        connection.close();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-mp5l342",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-mp5l342",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "2. 消费者代码"
				}
			]
		},
		{
			"ID": "20230331092123-f6jnoe0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-f6jnoe0",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class DirectConsumer1 { \n    private static final String EXCHANGE_NAME = \"direct_exchange\";\n    private static final String QUEUE_NAME = \"direct_queue_name1\";\n\n    public static void main(String[] args) throws IOException, TimeoutException { \n        // 获取连接\n        Connection connection = RabbitMQUtils.getConection();\n        // 从连接中创建通道。后面大部分的操作都是通过通道完成\n        Channel channel = connection.createChannel();\n        // 在通道中创建一个队列。如果通道中已经存在该队列，则不会重新创建。\n        // 如果队列中没有该队列直接绑定会报错，所以生产者消费者中都需要声明队列\n        channel.queueDeclare(QUEUE_NAME, false, false, false, null);\n        // 声明交换机，若存在则不重新声明\n        channel.exchangeDeclare(EXCHANGE_NAME,   \"direct\");\n        // 绑定队列到交换机。绑定的routingKey为 info 和error。即\n        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, \"info\");\n        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, \"error\");\n        // 设置消费者一次只能拉取一个消息\n        channel.basicQos(1);\n        // 定义队列的消费者\n        DefaultConsumer consumer = new DefaultConsumer(channel) { \n            // 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { \n                // body 即消息体\n                String msg = new String(body);\n                System.out.println(\"地瓜消费者001 收到消息 : \" + msg);\n            }\n        };\n        // 监听队列，第二个参数：是否自动进行消息确认。\n        channel.basicConsume(QUEUE_NAME, true, consumer);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-em1uqqs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-em1uqqs",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "消费者2 与消费者1的不同之处 ： 消费者2绑定了info和error的routingKey。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/20191218184140276-20230331092122-z2ar3hp.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230331092123-u6fgcqw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-u6fgcqw",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上述代码执行后，消费者2可以接收到生产者的消息。而消费者1不可以。因为消费者1绑定的 routingKey 是error。而生产者发送的routeringKey 是info。"
				}
			]
		},
		{
			"ID": "20230331092123-2apwb6d",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331092123-2apwb6d",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.3 Topic 订阅模型"
				}
			]
		},
		{
			"ID": "20230331092123-iox3ow2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-iox3ow2",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Topic类型的Exchange与Direct相比，都是可以根据RoutingKey把消息路由到不同的队列。只不过Topic类型Exchange可以让队列在绑定Routing key 的时候使用通配符！"
				}
			]
		},
		{
			"ID": "20230331092123-bkqg3nr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-bkqg3nr",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Routingkey 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： item.insert"
				}
			]
		},
		{
			"ID": "20230331092123-lrq6eq4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-lrq6eq4",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "#"
				},
				{
					"Type": "NodeText",
					"Data": "​：匹配一个或多个词\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "*"
				},
				{
					"Type": "NodeText",
					"Data": "​：匹配不多不少恰好1个词"
				}
			]
		},
		{
			"ID": "20230331092123-b9ziph1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-b9ziph1",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如："
				}
			]
		},
		{
			"ID": "20230331092123-k16qx31",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-k16qx31",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "audit.#"
				},
				{
					"Type": "NodeText",
					"Data": "​：能够匹配"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "audit.irs.corporate"
				},
				{
					"Type": "NodeText",
					"Data": "​ 或者 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "audit.irsaudit.*"
				},
				{
					"Type": "NodeText",
					"Data": "​：只能匹配"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "audit.irs"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230331092123-3mf3g3h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-3mf3g3h",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/20191218171309625-20230331092122-m18xtrv.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230331092123-eg7der0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-eg7der0",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "1. 生产者代码："
				}
			]
		},
		{
			"ID": "20230331092123-pwnlrqj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-pwnlrqj",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class TopicProducer { \n    private static final String EXCHANGE_NAME = \"topic_exchange\";\n    public static void main(String[] args) throws IOException, TimeoutException { \n        // 获取连接\n        Connection connection = RabbitMQUtils.getConection();\n        // 从连接中创建通道。后面大部分的操作都是通过通道完成\n        Channel channel = connection.createChannel();\n        // 声明exchange，指定类型为fanout\n        channel.exchangeDeclare(EXCHANGE_NAME, \"topic\");\n\n        // 消息内容\n        String message = \"info : 地瓜地瓜 \";\n        channel.basicPublish(EXCHANGE_NAME, \"www.baidu.com\", null, message.getBytes());\n        System.out.println(\"### 消息已发送 ： \" + message);\n\n        //关闭通道和连接\n        channel.close();\n        connection.close();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-kvz05sb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-kvz05sb",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "2. 消费者1 代码"
				}
			]
		},
		{
			"ID": "20230331092123-8tlf1vl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-8tlf1vl",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package com.kingfish.test.rabbitmq.topic;\n\nimport com.kingfish.test.rabbitmq.RabbitMQUtils;\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * @Data: 2019/12/18\n * @Des:\n */\npublic class TopicConsumer1 { \n    private static final String EXCHANGE_NAME = \"topic_exchange\";\n    private static final String QUEUE_NAME = \"topic_queue_name1\";\n\n    public static void main(String[] args) throws IOException, TimeoutException { \n        // 获取连接\n        Connection connection = RabbitMQUtils.getConection();\n        // 从连接中创建通道。后面大部分的操作都是通过通道完成\n        Channel channel = connection.createChannel();\n        // 在通道中创建一个队列。如果通道中已经存在该队列，则不会重新创建。\n        // 如果队列中没有该队列直接绑定会报错，所以生产者消费者中都需要声明队列\n        channel.queueDeclare(QUEUE_NAME, false, false, false, null);\n        // 声明交换机，若存在则不重新声明\n        channel.exchangeDeclare(EXCHANGE_NAME,   \"topic\");\n        // 绑定队列到交换机\n        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, \"www.#\");\n        // 设置消费者一次只能拉取一个消息\n        channel.basicQos(1);\n        // 定义队列的消费者\n        DefaultConsumer consumer = new DefaultConsumer(channel) { \n            // 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException { \n                // body 即消息体\n                String msg = new String(body);\n                System.out.println(\"地瓜消费者001 收到消息 : \" + msg);\n            }\n        };\n        // 监听队列，第二个参数：是否自动进行消息确认。\n        channel.basicConsume(QUEUE_NAME, true, consumer);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-f4thew8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-f4thew8",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "消费者2和1不同的地方\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/20191218184936840-20230331092122-9v45eyf.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230331092123-us1z5w5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-us1z5w5",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面的例子中，生产者生产消息后，消费者1和2都会收到消息。因为消费者2 routingKey 是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "www.#"
				},
				{
					"Type": "NodeText",
					"Data": "​\n消费者2 routingKey 是 ​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "ww.baidu."
				},
				{
					"Type": "NodeText",
					"Data": "​*。结合上面说的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "#"
				},
				{
					"Type": "NodeText",
					"Data": "​ 匹配若干，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "*"
				},
				{
					"Type": "NodeText",
					"Data": "​ 匹配唯一不难推论出来。"
				}
			]
		},
		{
			"ID": "20230331092123-xq8wbxa",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331092123-xq8wbxa",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "四、RabbitMQ 消息可靠性"
				}
			]
		},
		{
			"ID": "20230331092123-pzt4ogc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-pzt4ogc",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "更为详细的可靠性文章请移步（本章节部分参考该文）： "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong a",
					"TextMarkAHref": "https://mp.weixin.qq.com/s/dYH0wAYYiXuQwiBqc7wMjg",
					"TextMarkTextContent": "https://mp.weixin.qq.com/s/dYH0wAYYiXuQwiBqc7wMjg"
				}
			]
		},
		{
			"ID": "20230331092123-n1a5yx7",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331092123-n1a5yx7",
				"updated": "20230331092123"
			}
		},
		{
			"ID": "20230331092123-qdp67tf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-qdp67tf",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "RabbitMQ 整个工作流程可以分为以下三步："
				}
			]
		},
		{
			"ID": "20230331092123-1lctpcl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-1lctpcl",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "第一步：生产端到RabbitMQ"
				}
			]
		},
		{
			"ID": "20230331092123-gjhlk6s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-gjhlk6s",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这一步可以通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "事务机制"
				},
				{
					"Type": "NodeText",
					"Data": "或者"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Comfirm机制"
				},
				{
					"Type": "NodeText",
					"Data": "来保证。需要注意的是，事务机制虽然保证了消息投递端的可靠性，但因为每次投递都开启了事务，所以性能较低，一般不推荐使用，一般使用 Confirm 机制。"
				}
			]
		},
		{
			"ID": "20230331092123-ql2nzkn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-ql2nzkn",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "第二步：RabbitMQ"
				}
			]
		},
		{
			"ID": "20230331092123-o3v1f0n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-o3v1f0n",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这一步是保证 RabbitMQ 由于某些故障消息如何保证不丢失。"
				}
			]
		},
		{
			"ID": "20230331092123-jbi18jx",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230331092123-jbi18jx",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"ID": "20230331092123-sttluoo",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-sttluoo",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-7nsa1l6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-7nsa1l6",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "持久化"
								},
								{
									"Type": "NodeText",
									"Data": " ： 持久化可以提高 RabbitMQ 的可靠性，以免在 RabbitMQ 意外宕机时数据不会丢失，RabbitMQ 的 Exchange、Queue 以及 Message 都是支持持久化的，Exchange 和 Queue 通过在声明的时候将 durable 参数置为 true 即可实现，而消息的持久化则需要将投递模式（BasicProperties 中的 deliveryMode 属性）设置为2（PERSISTENT）。但需要注意的是，必须同时将 Queue 和 Message 持久化才能保证消息不丢失，仅设置 Queue 持久化，重启之后 Message 会丢失，反之仅设置消息的持久化，重启之后 Queue 消失，既而 Message 也丢失。"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-4jpqn84",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-4jpqn84",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-2dv3ixs",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-2dv3ixs",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "集群"
								},
								{
									"Type": "NodeText",
									"Data": " ： 上述持久化的操作保证了消息在 RabbitMQ 宕机时不会丢失，但却不能避免单机故障且无法修复（比如磁盘损毁）而引起的消息丢失，并且在故障发生时 RabbitMQ 不可用。这时就需要引入集群，由于 RabbitMQ 是基于 Erlang 编写的，所以其天生支持分布式，而不需要像 Kafka 那样要通过 Zookeeper 来实现，RabbitMQ Cluster 集群共有两种模式"
								}
							]
						},
						{
							"ID": "20230331092123-js7llsz",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20230331092123-js7llsz",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"ID": "20230331092123-3j4u3sv",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20230331092123-3j4u3sv",
										"updated": "20230331092123"
									},
									"Children": [
										{
											"ID": "20230331092123-84t3yz7",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331092123-84t3yz7",
												"updated": "20230331092123"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "普通模式"
												},
												{
													"Type": "NodeText",
													"Data": " ： 普通模式下，集群中的 RabbitMQ 会同步 Vhost、Exchange、Binding、Queue 的元数据（即其本身的数据，例如名称、属性等）以及 Message 结构，而不会同步 Message 数据，也就是说，如果集群中某台机器 RabbitMQ 宕掉了，则该节点上的 Message 不可用，直至该节点恢复。\n镜像模式"
												}
											]
										}
									]
								},
								{
									"ID": "20230331092123-hvzsbd8",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20230331092123-hvzsbd8",
										"updated": "20230331092123"
									},
									"Children": [
										{
											"ID": "20230331092123-6v0skz4",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331092123-6v0skz4",
												"updated": "20230331092123"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "镜像队列"
												},
												{
													"Type": "NodeText",
													"Data": " ：相当于配置了副本，绝大多数分布式的东西都有多副本的概念来确保 HA（High Availability）。在镜像队列中，如果主节点（master）在此特殊时间内挂掉，可以自动切换到从节点（slave），这样有效的保证了高可用性，除非整个集群都挂掉。"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331092123-sku9yjc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-sku9yjc",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "第三步：RabbitMQ到消费者"
				}
			]
		},
		{
			"ID": "20230331092123-bwgsprm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-bwgsprm",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这一步是为了保证消息被正确的消费，因此我们可以使用手动签收的机制"
				}
			]
		},
		{
			"ID": "20230331092123-qvjrkvg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-qvjrkvg",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为了保证消息从队列可靠地达到消费者，RabbitMQ 提供了消息确认机制（message acknowledgement）。消费者在订阅队列时，可以指定 autoAck 参数，当 autoAck 等于 fals e时，RabbitMQ 会等待消费者显式地回复确认信号后才从内存（或者磁盘）中移去消息（实质上是先打上删除标记，之后再删除）。当 autoAck 等于 true 时，RabbitMQ 会自动把发送出去的消息置为确认，然后从内存（或者磁盘）中删除，而不管消费者是否真正的消费到了这些消息。"
				}
			]
		},
		{
			"ID": "20230331092123-vi75e3k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-vi75e3k",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于 RabbitMQ 而言，队列中的消息分成了两个部分：一部分是等待投递给消费者的消息；一部分是已经投递给消费者，但是还没有收到消费者确认信号的消息。如果 RabbitMQ 一直没有收到消费者的确认信号，并且消费此消息的消费者已经断开连接，则 RabbitMQ 会安排该消息重新进入队列，等待投递给下一个消费者。RabbitMQ 判断此消息是否需要重新投递的唯一依据是消费该消息的消费者连接是否已经断开，这种设计允许消费者消费一条消息很久很久。"
				}
			]
		},
		{
			"ID": "20230331092123-yd7jt51",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-yd7jt51",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果消息消费失败，也可以调用 Basic.Reject 或者 Basic.Nack 来拒绝当前消息，但需要注意的是，如果只是简单的拒绝那么消息将会丢失，需要将相应的 requeue 参数设置为 true，RabbitMQ 才会将这条消息重新存入队列。而如果 requeue 参数设置为 false 的话，RabbitMQ 立即会把消息从队列中移除，而不会把它发送给新的消费者。"
				}
			]
		},
		{
			"ID": "20230331092123-1zegycx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-1zegycx",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "basicNack 和 basicReject 作用基本相同，主要差别在于前者可以拒绝多条，后者只能拒绝单条，另外basicNack 不是 AMQP 0-9-1 标准。"
				}
			]
		},
		{
			"ID": "20230331092123-tvz79oe",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-tvz79oe",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 确认消息\nchannel.basicAck(deliveryTag, multiple);\n// 拒绝消息\nchannel.basicNack(deliveryTag, multiple, requeue);\n// 拒绝消息\nchannel.basicReject(deliveryTag, requeue)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-3g75trn",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331092123-3g75trn",
				"updated": "20230331092123"
			}
		},
		{
			"ID": "20230331092123-fnvl50z",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331092123-fnvl50z",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1. RabbitMQ 持久化"
				}
			]
		},
		{
			"ID": "20230331092123-pn7ij73",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-pn7ij73",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面介绍的五种消息模型，本质上都是通过交换机绑定队列进行交互。所以当RabbitMQ宕机后消息就会丢失。所以我们需要持久化保存消息。\n想要持久化消息就要先持久化队列，想要持久化队列就要先持久化交换机。"
				}
			]
		},
		{
			"ID": "20230331092123-84vvvr6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-84vvvr6",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "交换机的持久化 :"
				}
			]
		},
		{
			"ID": "20230331092123-n5dqg4g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-n5dqg4g",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/20191218191722674-20230331092122-ihmjgu8.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "队列的持久化："
				},
				{
					"Type": "NodeText",
					"Data": "\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/20191218191808291-20230331092122-g47nptd.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "消息的持久化："
				},
				{
					"Type": "NodeText",
					"Data": "\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/201912181919158-20230331092123-opyz8x3.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230331092123-vwi7jny",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331092123-vwi7jny",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2. RabbitMQ 签收机制"
				}
			]
		},
		{
			"ID": "20230331092123-l0oc3fq",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331092123-l0oc3fq",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.1 RabbitMQ生产者签收机制"
				}
			]
		},
		{
			"ID": "20230331092123-snjqmmp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-snjqmmp",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "RabbitMQ中对生产者提供了两种签收机制 ： 事务机制和Confirm机制"
				}
			]
		},
		{
			"ID": "20230331092123-syrks86",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230331092123-syrks86",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.1.1 事务机制"
				}
			]
		},
		{
			"ID": "20230331092123-u7tdfsw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-u7tdfsw",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "通过 AMQP 事务机制实现，这也是 AMQP 协议层面提供的解决方案"
				}
			]
		},
		{
			"ID": "20230331092123-bhufm0k",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230331092123-bhufm0k",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"ID": "20230331092123-3c7k708",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-3c7k708",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-2m7tjss",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-2m7tjss",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "RabbitMQ 中与事务机制有关的方法有三个：txSelect(), txCommit()以及 txRollback(),"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-6v7wocq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-6v7wocq",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-to01ewr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-to01ewr",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "txSelect 用于将当前 channel 设置成 transaction 模式 txCommit 用于提交事务,"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-6dhq5n4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-6dhq5n4",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-zykwci3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-zykwci3",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "txRollback 用于回滚事务，在通过 txSelect 开启事务之后，我们便可以发布消息给 broker 代理服务器了，如果"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-mswurkl",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-mswurkl",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-lwe44bs",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-lwe44bs",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "txCommit 提交成功了，则消息一定到达了 broker 了 如果在 txCommit执行之前 broker\n异常崩溃或者由于其他原因抛出异常，这个时候我们便可以捕获异常通过 txRollback 回滚事务了。\n"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "关键代码："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331092123-iwom34j",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-iwom34j",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\tchannel.txSelect();\n\tchannel.basicPublish(\"\", QUEUE_NAME, null, msg.getBytes());\n\tchannel.txCommit();\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-krrmczx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-krrmczx",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "生产者： 主要部分"
				}
			]
		},
		{
			"ID": "20230331092123-eo9uo4c",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-eo9uo4c",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "try { \n    // 启用事务模式\n    channel.txSelect();\n     // 发送内容【参数说明：参数一：交换机名称；参数二：队列名称，参数三：消息的其他属性-routing headers，此属性为MessageProperties.PERSISTENT_TEXT_PLAIN用于设置纯文本消息存储到硬盘；参数四：消息主体】\n    channel.basicPublish(\"exchangeKey_direct\", \"routerKey1\", null, content.getBytes(\"UTF-8\"));\n     System.out.println(\"已发送消息：\" + content);\n    int i = 1/ 0;\n    // 事务提交\n    channel.txCommit();\n} catch (Exception e) { \n    // 事务回滚\n    channel.txRollback();\n    e.printStackTrace();\n    System.out.println(\"发送出错，消息回滚。\" + content);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-hyrbc2f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-hyrbc2f",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em",
					"TextMarkTextContent": "此种模式很耗时且采用这种方式 降低了 Rabbitmq 的消息吞吐量"
				}
			]
		},
		{
			"ID": "20230331092123-9keh07y",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230331092123-9keh07y",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.2.2. Confirm模式"
				}
			]
		},
		{
			"ID": "20230331092123-exlcgl8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-exlcgl8",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "*"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em",
					"TextMarkTextContent": "通过将 channel 设置成 confirm 模式来实现。"
				},
				{
					"Type": "NodeText",
					"Data": "需要注意，事务方式和Confirm两种模式不能共存**\n生产者将信道设置成confirm模式，一旦信道进入confirm模式，所有在该信道上面发布的消息都将会被指派一个唯一的ID(从1开始)，一旦消息被投递到所有匹配的队列之后，broker就会发送一个确认给生产者(包含消息的唯一ID)，这就使得生产者知道消息已经正确到达目的队列了，如果消息和队列是可持久化的，那么确认消息会在将消息写入磁盘之后发出，broker回传给生产者的确认消息中delivery-tag域包含了确认消息的序列号，此外broker也可以设置basic.ack的multiple域，表示到这个序列号之前的所有消息都已经得到了处理；\nconfirm模式最大的好处在于他是异步的，一旦发布一条消息，生产者应用程序就可以在等信道返回确认的同时继续发送下一条消息，当消息最终得到确认之后，生产者应用便可以通过回调方法来处理该确认消息，如果RabbitMQ因为自身内部错误导致消息丢失，就会发送一条nack消息，生产者应用程序同样可以在回调方法中处理该nack消息；"
				}
			]
		},
		{
			"ID": "20230331092123-x9msoxl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-x9msoxl",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "在编程中我们可以选择下面的几种编程方式"
				}
			]
		},
		{
			"ID": "20230331092123-s7nkvki",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230331092123-s7nkvki",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"ID": "20230331092123-ev15cod",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-ev15cod",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-3qpyn5n",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-3qpyn5n",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "普通 confirm 模式：每发送一条消息后，调用 waitForConfirms()方法，等待服务器端confirm。实际上是一种串行 confirm 了。"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-ueif2a2",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-ueif2a2",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-5e16odq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-5e16odq",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "批量 confirm 模式：每发送一批消息后，调用 waitForConfirms()方法，等待服务器端confirm。"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-g7m3bdi",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-g7m3bdi",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-tfzh2r8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-tfzh2r8",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "异步 confirm 模式：提供一个回调方法，服务端 confirm 了一条或者多条消息后 Client 端会回调这个方法。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331092123-jlxc4b6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-jlxc4b6",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "1、普通 confirm 模式"
				}
			]
		},
		{
			"ID": "20230331092123-72rrbxp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-72rrbxp",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "                // 生产者通过调用confirmSelect 方法将 channel 设置为 confirm 模式\n                channel.confirmSelect();\n                // 发送内容【参数说明：参数一：交换机名称；参数二：队列名称，参数三：消息的其他属性-routing headers，此属性为MessageProperties.PERSISTENT_TEXT_PLAIN用于设置纯文本消息存储到硬盘；参数四：消息主体】\n                channel.basicPublish(\"exchangeKey_direct\", \"routerKey1\", null, content.getBytes(\"UTF-8\"));\n                // 判断消息是否发送成功\n                if (channel.waitForConfirms()) { \n                    System.out.println(\"已发送消息：\" + content);\n                } else { \n                    System.out.println(\"消息发送失败，消息内容 ：\" + content);\n                }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-enscivl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-enscivl",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "2、批量 confirm 模式"
				},
				{
					"Type": "NodeText",
					"Data": "\n批量 confirm 模式稍微复杂一点，客户端程序需要定期（每隔多少秒）或者定量（达到多少条）或者两则结合起来publish 消息，然后等待服务器端 confirm, 相比普通 confirm 模式，批量极大提升 confirm 效率，但是问题在于一旦出现 confirm 返回 false 或者超时的情况时，客户端需要将这一批次的消息全部重发，这会带来明显的重复消息数量，并且，当消息经常丢失时，批量 confirm 性能应该是不升反降的。"
				}
			]
		},
		{
			"ID": "20230331092123-k7l6m9q",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-k7l6m9q",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "                // 生产者通过调用confirmSelect 方法将 channel 设置为 confirm 模式\n                channel.confirmSelect();\n                for (int i = 0; i \u003c 10; i++) { \n                    // 发送内容【参数说明：参数一：交换机名称；参数二：队列名称，参数三：消息的其他属性-routing headers，此属性为MessageProperties.PERSISTENT_TEXT_PLAIN用于设置纯文本消息存储到硬盘；参数四：消息主体】\n                    channel.basicPublish(\"exchangeKey_direct\", \"routerKey1\", null, content.getBytes(\"UTF-8\"));\n                }\n                // 判断消息是否发送成功\n                if (channel.waitForConfirms()) { \n                    System.out.println(\"已发送消息：\" + content);\n                } else { \n                    System.out.println(\"消息发送失败，消息内容 ：\" + content);\n                }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-0f3xy3t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-0f3xy3t",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "3、异步 confirm 模式"
				},
				{
					"Type": "NodeText",
					"Data": "\nChannel 对象提供的 ConfirmListener()回调方法只包含 deliveryTag（当前 Chanel 发出的消息序号），我们需要自己为每一个 Channel 维护一个 unconfirm 的消息序号集合，每 publish 一条数据，集合中元素加 一，每回调一次 handleAck方法，unconfirm 集合删掉相应的一条（multiple=false）或多条（multiple=true）记录。从程序运行效率上看，这个unconfirm 集合最好采用有序集合 SortedSet 存储结构。\n实际上，SDK 中的 waitForConfirms()方法也是通过 SortedSet维护消息序号的。"
				}
			]
		},
		{
			"ID": "20230331092123-d7dn43p",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-d7dn43p",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "                // 生产者通过调用confirmSelect 方法将 channel 设置为 confirm 模式\n                channel.confirmSelect();\n                // 创建一个列表，用于维护消息发送的情况\n                final SortedSet\u003cLong\u003e confirmSet = Collections.synchronizedSortedSet(new TreeSet\u003cLong\u003e());\n                // 添加Confirm监听器，监听消息发送的状态。\n                channel.addConfirmListener(new ConfirmListener() { \n                    //每回调一次handleAck方法，confirmSet 删掉相应的一条（multiple=false）或多条（multiple=true）记录。\n                    @Override\n                    public void handleAck(long deliveryTag, boolean multiple) throws IOException { \n                        if (multiple) { \n                            System.out.println(\"移除集合中的多条记录--\");\n                            confirmSet.headSet(deliveryTag + 1).clear(); //用一个SortedSet, 返回此有序集合中小于end的所有元素。\n                        } else { \n                            System.out.println(\"--multiple false--\");\n                            confirmSet.remove(deliveryTag);\n                        }\n                    }\n                    // 消息签收失败时调用\n                    @Override\n                    public void handleNack(long deliveryTag, boolean multiple) throws IOException { \n//                        System.out.println(\"Nack, SeqNo: \" + deliveryTag + \", multiple: \" + multiple);\n//                        if (multiple) { \n//                            confirmSet.headSet(deliveryTag + 1).clear();\n//                        } else { \n//                            confirmSet.remove(deliveryTag);\n//                        }\n                    }\n                });\n\n                while (true) { \n                    // Confirm模式下，返回下一条要发布的消息的序列号。\n                    long nextSeqNo = channel.getNextPublishSeqNo();\n                    Thread.sleep(2000);\n                    channel.basicPublish(\"exchangeKey_direct\", \"routerKey1\", null, content.getBytes(\"UTF-8\"));\n                    confirmSet.add(nextSeqNo);\n                }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-dip1dkq",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331092123-dip1dkq",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.2. RabbitMQ消费者者的签收机制:"
				}
			]
		},
		{
			"ID": "20230331092123-0b38rr6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-0b38rr6",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "对于消费者的消息签收有有自动和手动两种。自动签收"
				},
				{
					"Type": "NodeText",
					"Data": " ： 并不会管消息的处理即其它问题。类似于签收快递，自动签收则是将快递放入快递柜，至于后续，不管你是否接收，以及快递是否有问题（程序执行不通过），都不会有所反应。\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "手动签收"
				},
				{
					"Type": "NodeText",
					"Data": " ： 是由程序确认是否签收。即自己本人签收快递，即细致检查（程序处理）后，如果没有问题，则会确定签收，若有问题，可以拒签。"
				}
			]
		},
		{
			"ID": "20230331092123-qcike9o",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230331092123-qcike9o",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.2.1. 自动签收"
				}
			]
		},
		{
			"ID": "20230331092123-la39wuq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-la39wuq",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "String basicConsume(String queue, boolean autoAck, String consumerTag, Consumer callback) throws IOException;"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法或其重载方法中的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "autoAck"
				},
				{
					"Type": "NodeText",
					"Data": "​ 参数设置是否自动签收。为true则自动签收"
				}
			]
		},
		{
			"ID": "20230331092123-3az6wzh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-3az6wzh",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "              // 创建通道\n                Channel channel = conn.createChannel();\n                // 创建订阅器，并接受消息。 第一个参数 : 队列名， 第二个参数签收方式 : false，设置成手动签收模式；true，则自动签收模式\n                channel.basicConsume(\"queueName1\", true, \"\", new DefaultConsumer(channel) { \n                    @Override\n                    public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,\n                                               byte[] body) throws IOException { \n                        String routingKey = envelope.getRoutingKey(); // 队列名称\n                        String contentType = properties.getContentType(); // 内容类型\n                        String content = new String(body, \"utf-8\"); // 消息正文\n                        System.out.println(\"routingKey :\" + routingKey + \"   contentType : \" + contentType + \"   消息正文：\" + content);\n//                        channel.basicAck(envelope.getDeliveryTag(), false); // 手动确认消息【参数说明：参数一：该消息的index；参数二：是否批量应答，true批量确认小于index的消息】\n                    }\n                });\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-pt25a3a",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230331092123-pt25a3a",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.2.2. 手动签收"
				}
			]
		},
		{
			"ID": "20230331092123-1gakspf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-1gakspf",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "String basicConsume(String queue, boolean autoAck, String consumerTag, Consumer callback) throws IOException;"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法或其重载方法中的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "autoAck"
				},
				{
					"Type": "NodeText",
					"Data": "​ 参数设置为false，通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "void basicAck(long deliveryTag, boolean multiple)"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法来进行手动签收。"
				}
			]
		},
		{
			"ID": "20230331092123-wbbjqvi",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-wbbjqvi",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "                // 创建通道\n                Channel channel = conn.createChannel();\n                // 创建订阅器，并接受消息。 第一个参数 : 队列名， 第二个参数签收方式 : false，设置成手动签收模式。true，则自动签收模式\n                channel.basicConsume(\"queueName1\", false, \"\", new DefaultConsumer(channel) { \n                    @Override\n                    public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,\n                                               byte[] body) throws IOException { \n                        String routingKey = envelope.getRoutingKey(); // 队列名称\n                        String contentType = properties.getContentType(); // 内容类型\n                        String content = new String(body, \"utf-8\"); // 消息正文\n                        System.out.println(\"routingKey :\" + routingKey + \"   contentType : \" + contentType + \"   消息正文：\" + content);\n//                        channel.basicAck(envelope.getDeliveryTag(), false); // 手动确认消息【参数说明：参数一：该消息的index；参数二：是否批量应答，true批量确认小于index的消息】\n                    }\n                });\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-b22sidk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-b22sidk",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "额外还有一些方法："
				}
			]
		},
		{
			"ID": "20230331092123-e68920c",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-e68920c",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//扔掉消息\nchannel.BasicReject(result.DeliveryTag, false);\n\n//退回消息\nchannel.BasicReject(result.DeliveryTag, true);\n\n//批量退回或删除,中间的参数 是否批量 true是/false否 (也就是只一条)\nchannel.BasicNack(result.DeliveryTag, true, true);\n\n//补发消息 true退回到queue中/false只补发给当前的consumer；BasicRecover方法则是进行补发操作，其中的参数如果为true是把消息退回到queue但是有可能被其它的consumer接收到，设置为false是只补发给当前的consumer\nchannel.BasicRecover(true);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-4qdycf9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-4qdycf9",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "注： 生产者的签收成功指的是消息被RabbitMQ签收，并不是指被消费。消费者的签收成功指的是RabbitMQ中的消息被消费。"
				}
			]
		},
		{
			"ID": "20230331092123-zbeofi9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331092123-zbeofi9",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "五、Spring 中整合 RabbitMQ"
				}
			]
		},
		{
			"ID": "20230331092123-3h8j0i8",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331092123-3h8j0i8",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1. 创建 rabbitmq.properties.配置文件配置基础信息"
				}
			]
		},
		{
			"ID": "20230331092123-ktalq66",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-ktalq66",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#访问RabbitMQ服务器的账户,默认是guest\nrabbitmq.username=guest\n#访问RabbitMQ服务器的密码,默认是guest\nrabbitmq.password=guest\n#RabbitMQ服务器地址，默认值\"localhost\nrabbitmq.host=localhost\n#RabbitMQ服务端口，默认值为5672\nrabbitmq.port=5672\n#hannel的缓存数量，默认值为25\nrabbitmq.channelCacheSize=50\n#缓存连接模式，默认值为CHANNEL(单个connection连接，连接之后关闭，自动销毁)\nrabbitmq.cacheMode=CHANNEL\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-457pjpp",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331092123-457pjpp",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2. 发送与接收消息"
				}
			]
		},
		{
			"ID": "20230331092123-fqishow",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331092123-fqishow",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.1. 使用RabbitTemplate 发送与接收消息"
				}
			]
		},
		{
			"ID": "20230331092123-cbkzdkr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-cbkzdkr",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "创建RabbitMQConfig 配置类："
				}
			]
		},
		{
			"ID": "20230331092123-6so9ulx",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-6so9ulx",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package com.kingfish.common.config.mq;\n\nimport com.kingfish.pojo.handler.RabbitMQHandler;\nimport org.springframework.amqp.core.*;\nimport org.springframework.amqp.rabbit.annotation.EnableRabbit;\nimport org.springframework.amqp.rabbit.annotation.RabbitListenerConfigurer;\nimport org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory;\nimport org.springframework.amqp.rabbit.config.SimpleRabbitListenerEndpoint;\nimport org.springframework.amqp.rabbit.connection.CachingConnectionFactory;\nimport org.springframework.amqp.rabbit.connection.ConnectionFactory;\nimport org.springframework.amqp.rabbit.core.RabbitAdmin;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.amqp.rabbit.listener.RabbitListenerContainerFactory;\nimport org.springframework.amqp.rabbit.listener.RabbitListenerEndpointRegistrar;\nimport org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.PropertySource;\n\nimport java.io.UnsupportedEncodingException;\n\n/**\n * @Data: 2019/10/9\n * @Des:\n */\n@Configuration\n@PropertySource(value = { \"classpath:rabbitmq.properties\"})\n@EnableRabbit\npublic class RabbitMQConfig { \n    @Value(\"${rabbitmq.username}\")\n    private String username;\n    @Value(\"${rabbitmq.password}\")\n    private String password;\n    @Value(\"${rabbitmq.host}\")\n    private String host;\n    @Value(\"${rabbitmq.port}\")\n    private int port;\n    @Value(\"${rabbitmq.channelCacheSize}\")\n    private int channelCacheSize;\n    @Value(\"${rabbitmq.cacheMode}\")\n    private String cacheMode;\n\n    @Bean\n    public ConnectionFactory cachingConnectionFactory() { \n        CachingConnectionFactory cachingConnectionFactory = new CachingConnectionFactory();\n        cachingConnectionFactory.setHost(host);\n        cachingConnectionFactory.setChannelCacheSize(channelCacheSize);\n        cachingConnectionFactory.setCacheMode(CachingConnectionFactory.CacheMode.CHANNEL);\n        return cachingConnectionFactory;\n    }\n\n    /**\n     * 该类封装了对 RabbitMQ 的管理操作\n     *\n     * @param connectionFactory\n     * @return\n     */\n    @Bean\n    public RabbitAdmin rabbitAdmin(ConnectionFactory connectionFactory) { \n        RabbitAdmin rabbitAdmin = new RabbitAdmin(connectionFactory);\n        // 声明队列\n        Queue queueName1 = new Queue(\"queueName1\");\n        rabbitAdmin.declareQueue(queueName1);\n        // 声明交换机\n        rabbitAdmin.declareExchange(new DirectExchange(\"exchangeKey_direct\", true, false));\n        // 使用BindingBuilder进行绑定\n        rabbitAdmin.declareBinding(BindingBuilder.bind(queueName1).to(new DirectExchange(\"exchangeKey_direct\")).with(\"routerKey1\"));\n        return rabbitAdmin;\n    }\n\n    @Bean\n    public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory) { \n        RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory);\n        // 设置消息回调\n        rabbitTemplate.setReturnCallback(new RabbitTemplate.ReturnCallback() { \n            @Override\n            public void returnedMessage(Message message, int replyCode, String replyText, String exchange, String routingKey) { \n                System.out.println(\"rabbit return success\" + message.toString() + \"===\" + replyText + \"===\" + exchange + \"===\" + routingKey);\n            }\n        });\n        // 消息回调结果\n        rabbitTemplate.setConfirmCallback((correlationData, ack, cause) -\u003e { \n            if (!ack) { \n                System.out.println(\"rabbit 消息发送失败\" + cause + correlationData.toString());\n            } else { \n                System.out.println(\"rabbit 消息发送成功 \");\n            }\n        });\n        return rabbitTemplate;\n    }\n\n\n    @Bean\n    public RabbitListenerContainerFactory\u003c?\u003e rabbitListenerContainerFactory(ConnectionFactory connectionFactory) { \n        SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();\n        factory.setConnectionFactory(connectionFactory);\n         // 设置QOS,保证同一时间一个消费者只能消费一条消息\n        factory.setPrefetchCount(1);\n        //初始化消费者数量\n        factory.setConcurrentConsumers(1);\n        //最大消费者数量\n        factory.setMaxConcurrentConsumers(1);\n\n        // 设置应答模式\n        factory.setAcknowledgeMode(AcknowledgeMode.MANUAL);\n\n        return factory;\n    }\n\n\t/**\n\t* 可以在这个bean中设置接收消息方式\n\t*/\n    @Bean\n    public RabbitListenerConfigurer rabbitListenerConfigurer() { \n        return new RabbitListenerConfigurer() { \n            @Override\n            public void configureRabbitListeners(RabbitListenerEndpointRegistrar registrar) { \n                // 方式1 ： 直接处理\n                SimpleRabbitListenerEndpoint endpoint = new SimpleRabbitListenerEndpoint();\n                endpoint.setId(\"0\");\n                endpoint.setQueueNames(\"queueName1\");\n                endpoint.setMessageListener(message -\u003e { \n                    // 直接在这里处理消息信息\n                    try { \n                        System.out.println(\"endpoint1处理消息的逻辑 : \" + new String(message.getBody(), \"utf-8\"));\n                    } catch (UnsupportedEncodingException e) { \n                        e.printStackTrace();\n                    }\n                });\n\n                //方式2 使用适配器来处理消息 RabbitMQHandler 来处理信息\n                SimpleRabbitListenerEndpoint endpoint2 = new SimpleRabbitListenerEndpoint();\n                endpoint2.setId(\"1\");\n                endpoint2.setQueueNames(\"queueName1\");\n                System.out.println(\"endpoint2处理消息的逻辑\");\n                // 绑定pojo，并指定默认处理方法为onMessage\n                endpoint2.setMessageListener(new MessageListenerAdapter(new RabbitMQHandler(), \"onMessage\"));\n\n                //注册endpoint\n                registrar.registerEndpoint(endpoint);\n                registrar.registerEndpoint(endpoint2);\n            }\n        };\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-cz2eqcl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-cz2eqcl",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class RabbitMQHandler { \n    public void onMessage(Object object) { \n        System.out.println(\"RabbitMQHandler : \" + object.toString());\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-k8hywx3",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331092123-k8hywx3",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.2 发送消息和接收消息的代码"
				}
			]
		},
		{
			"ID": "20230331092123-k52dzr3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-k52dzr3",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import org.springframework.amqp.core.Message;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\n/**\n * @Data: 2019/10/10\n * @Des:\n */\n@RestController\n@RequestMapping(\"mq\")\npublic class MQController { \n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    @RequestMapping(\"send\")\n    public String sendMessage() { \n        rabbitTemplate.convertAndSend(\"exchangeKey_direct\", \"routerKey1\",\n                \"发送的信息\" + new SimpleDateFormat(\"yyyy-MM-dd hh:mm;ss\").format(new Date()));\n        return \"ok\";\n    }\n\n    @RequestMapping(\"receive\")\n    public String receiveMessage() throws Exception { \n        // 接收消息\n        Message receive = rabbitTemplate.receive(\"queueName1\");\n        System.out.println(\"消息正文：\" + new String(receive.getBody(), \"utf-8\"));\n\n        return new String(receive.getBody(), \"utf-8\");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-gyghokm",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331092123-gyghokm",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.3 测试"
				}
			]
		},
		{
			"ID": "20230331092123-6628clt",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230331092123-6628clt",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"ID": "20230331092123-t4mm5ds",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230331092123-t4mm5ds",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-0e1garf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-0e1garf",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "调用 http://localhost:8080/mq/send 接口，发送一个消息到rabbit\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "在这里插入图片描述"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/20191010112250680-20230331092122-66w1mgn.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-p1kgnp9",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230331092123-p1kgnp9",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-bkeqz6r",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-bkeqz6r",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "调用 http://localhost:8080/mq/receive接口，接收消息"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "在这里插入图片描述"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/20191010112346565-20230331092122-rb9m4pi.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "在这里插入图片描述"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/20191010112333874-20230331092122-ao4gpnu.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331092123-77mi3s7",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331092123-77mi3s7",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3. 使用消息驱动接收消息"
				}
			]
		},
		{
			"ID": "20230331092123-lhirs0b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-lhirs0b",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用上面的方式，很明显没有办法异步监听消息。如果我们不调用receive接口，便无法接收到rabbit中的消息。而使用消息驱动方式则可以解决这个问题。"
				}
			]
		},
		{
			"ID": "20230331092123-0r8mn5e",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331092123-0r8mn5e",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.1 指定消息驱动类"
				}
			]
		},
		{
			"ID": "20230331092123-usqpvc7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-usqpvc7",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "RabbitCMQConfig配置类"
				}
			]
		},
		{
			"ID": "20230331092123-lj505uk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-lj505uk",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package com.kingfish.common.config.mq;\n\nimport com.kingfish.pojo.handler.RabbitMQHandler;\nimport org.springframework.amqp.rabbit.annotation.EnableRabbit;\nimport org.springframework.amqp.rabbit.annotation.RabbitListenerConfigurer;\nimport org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory;\nimport org.springframework.amqp.rabbit.config.SimpleRabbitListenerEndpoint;\nimport org.springframework.amqp.rabbit.connection.CachingConnectionFactory;\nimport org.springframework.amqp.rabbit.connection.ConnectionFactory;\nimport org.springframework.amqp.rabbit.core.RabbitAdmin;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.amqp.rabbit.listener.RabbitListenerContainerFactory;\nimport org.springframework.amqp.rabbit.listener.RabbitListenerEndpointRegistrar;\nimport org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.PropertySource;\n\nimport java.io.UnsupportedEncodingException;\n\n/**\n * @Data: 2019/10/9\n * @Des:\n */\n@Configuration\n@PropertySource(value= { \"classpath:rabbitmq.properties\"})\n@EnableRabbit\npublic class RabbitMQConfig { \n    @Value(\"${rabbitmq.username}\")\n    private String username;\n    @Value(\"${rabbitmq.password}\")\n    private String password;\n    @Value(\"${rabbitmq.host}\")\n    private String host;\n    @Value(\"${rabbitmq.port}\")\n    private int port;\n    @Value(\"${rabbitmq.channelCacheSize}\")\n    private int channelCacheSize;\n    @Value(\"${rabbitmq.cacheMode}\")\n    private String cacheMode;\n\n    @Bean\n    public ConnectionFactory cachingConnectionFactory(){ \n        CachingConnectionFactory cachingConnectionFactory = new CachingConnectionFactory();\n        cachingConnectionFactory.setHost(host);\n        cachingConnectionFactory.setChannelCacheSize(channelCacheSize);\n        return cachingConnectionFactory;\n    }\n\n    @Bean\n    public RabbitAdmin rabbitAdmin(ConnectionFactory connectionFactory){ \n        return new RabbitAdmin(connectionFactory);\n    }\n\n    @Bean\n    public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory){ \n        RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory);\n        rabbitTemplate.setExchange(\"exchangeKey_direct\");\n        return rabbitTemplate;\n    }\n\n\n    @Bean\n    public RabbitListenerContainerFactory\u003c?\u003e rabbitListenerContainerFactory(ConnectionFactory connectionFactory){ \n        SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();\n        factory.setConnectionFactory(connectionFactory);\n        return factory;\n    }\n\n    @Bean\n    public RabbitListenerConfigurer rabbitListenerConfigurer(){ \n       return new RabbitListenerConfigurer() { \n            @Override\n            public void configureRabbitListeners(RabbitListenerEndpointRegistrar registrar) { \n                    // 方式1 ： 直接处理\n                    SimpleRabbitListenerEndpoint endpoint = new SimpleRabbitListenerEndpoint();\n                    endpoint.setId(\"0\");\n                    endpoint.setQueueNames(\"queueName1\");\n                    endpoint.setMessageListener(message -\u003e { \n                        // 直接在这里处理消息信息\n                        try { \n                            System.out.println(\"endpoint1处理消息的逻辑 : \" +  new String(message.getBody(), \"utf-8\"));\n                        } catch (UnsupportedEncodingException e) { \n                            e.printStackTrace();\n                        }\n                    });\n\n                    //方式2 使用适配器来处理消息 RabbitMQHandler 来处理信息\n                    SimpleRabbitListenerEndpoint endpoint2 = new SimpleRabbitListenerEndpoint();\n                    endpoint2.setId(\"1\");\n                    endpoint2.setQueueNames(\"queueName1\");\n                    System.out.println(\"endpoint2处理消息的逻辑\");\n                    // 绑定pojo，并指定默认处理方法为onMessage\n                    endpoint2.setMessageListener(new MessageListenerAdapter(new RabbitMQHandler(),\"onMessage\"));\n\n                    //注册endpoint\n                    registrar.registerEndpoint(endpoint);\n                    registrar.registerEndpoint(endpoint2);\n\n            }\n        };\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-tw1w4km",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-tw1w4km",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "消息驱动类 RabbitMQHandler"
				}
			]
		},
		{
			"ID": "20230331092123-wj8sfjk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-wj8sfjk",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class RabbitMQHandler {\n\n    public void onMessage(Object object) throws Exception {\n    \t// 接收到消息\n        System.out.println(\"RabbitMQHandler : \" + object.toString());\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-s24k0b7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-s24k0b7",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当有消息发送时，RabbitMQHandler.onMessage方法来接收信息并进行需要的处理。"
				}
			]
		},
		{
			"ID": "20230331092123-brtz0fm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-brtz0fm",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "程序运行如下："
				}
			]
		},
		{
			"ID": "20230331092123-558urte",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230331092123-558urte",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"ID": "20230331092123-nfnnuxb",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230331092123-nfnnuxb",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-di6z0ps",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-di6z0ps",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "调用 http://localhost:8080/mq/send 接口，发送一个消息到rabbit"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-ti6rimd",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230331092123-ti6rimd",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-1jpakpt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-1jpakpt",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "可以直接接收到消息内容。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331092123-wb0x4v4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-wb0x4v4",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/20191010121831737-20230331092122-lnjkkcn.jpg"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230331092123-f6tqgqy",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331092123-f6tqgqy",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.3 使用注解方式配置"
				}
			]
		},
		{
			"ID": "20230331092123-1u0eb1h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-1u0eb1h",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用注解方式配置也很简单，声明一个如下的类即可"
				}
			]
		},
		{
			"ID": "20230331092123-9p8ykm0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-9p8ykm0",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Component\n// 监听注解，也可以直接写在方法上\n@RabbitListener(queues = \"queueName1\")\npublic class RabbitMQListener { \n\n    @RabbitHandler()\n    public void process(String hello, Channel channel, Message message) throws IOException { \n        System.out.println(\"HelloReceiver收到 : \" + hello + \"收到时间\" + new Date());\n        try { \n            //告诉服务器收到这条消息 已经被我消费了 可以在队列删掉 这样以后就不会再发了 否则消息服务器以为这条消息没处理掉 后续还会在发\n            channel.basicAck(message.getMessageProperties().getDeliveryTag(), false);\n            System.out.println(\"receiver success\");\n        } catch (IOException e) { \n            e.printStackTrace();\n            //丢弃这条消息\n            //channel.basicNack(message.getMessageProperties().getDeliveryTag(), false,false);\n            System.out.println(\"receiver fail\");\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-bknb7yq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-bknb7yq",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "写在方法上 ："
				}
			]
		},
		{
			"ID": "20230331092123-a22yjsj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-a22yjsj",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Component\npublic class Listener { \n\n    @RabbitListener(bindings = @QueueBinding(\n            value = @Queue(value = \"spring.test.queue\", durable = \"true\"),\n            exchange = @Exchange(\n                    value = \"spring.test.exchange\",\n                    ignoreDeclarationExceptions = \"true\",\t// 忽略交换机声明异常，使用已有交换机\n                    type = ExchangeTypes.TOPIC\t\t\t\t// Topic 类型\n            ),\n            key = { \"#.#\"}))\t\t\t// 通配符\n    // 接收的消息是什么类型就用什么类型接收\n    public void listen(@Payload String msg, @Header(AmqpHeaders.DELIVERY_TAG) long deliveryTag, Channel channel) throws IOException){ \n        System.out.println(\"接收到消息：\" + msg);\n         // 手动应答确认消费成功\n        channel.basicAck(deliveryTag,false);\n    }\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-mqqhs80",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230331092123-mqqhs80",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"ID": "20230331092123-dgmwzdn",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-dgmwzdn",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-a2qsst9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-a2qsst9",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@Componet：类上的注解，注册到Spring容器"
								}
							]
						}
					]
				},
				{
					"ID": "20230331092123-9ifp304",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331092123-9ifp304",
						"updated": "20230331092123"
					},
					"Children": [
						{
							"ID": "20230331092123-y7lii3q",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331092123-y7lii3q",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@RabbitListener：方法上的注解，声明这个方法是一个消费者方法，需要指定下面的属性："
								}
							]
						},
						{
							"ID": "20230331092123-g4f9374",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230331092123-g4f9374",
								"updated": "20230331092123"
							},
							"Children": [
								{
									"ID": "20230331092123-91vnakw",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331092123-91vnakw",
										"updated": "20230331092123"
									},
									"Children": [
										{
											"ID": "20230331092123-11chtca",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331092123-11chtca",
												"updated": "20230331092123"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "bindings：指定绑定关系，可以有多个。值是@QueueBinding的数组。@QueueBinding包含下面属性："
												}
											]
										},
										{
											"ID": "20230331092123-y5wz51y",
											"Type": "NodeList",
											"ListData": {},
											"Properties": {
												"id": "20230331092123-y5wz51y",
												"updated": "20230331092123"
											},
											"Children": [
												{
													"ID": "20230331092123-6gofhkg",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230331092123-6gofhkg",
														"updated": "20230331092123"
													},
													"Children": [
														{
															"ID": "20230331092123-bp8f4wu",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230331092123-bp8f4wu",
																"updated": "20230331092123"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "value：这个消费者关联的队列。值是@Queue，代表一个队列"
																}
															]
														}
													]
												},
												{
													"ID": "20230331092123-7yp0nr9",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230331092123-7yp0nr9",
														"updated": "20230331092123"
													},
													"Children": [
														{
															"ID": "20230331092123-994a2jy",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230331092123-994a2jy",
																"updated": "20230331092123"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "exchange：队列所绑定的交换机，值是@Exchange类型"
																}
															]
														}
													]
												},
												{
													"ID": "20230331092123-1168ab1",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230331092123-1168ab1",
														"updated": "20230331092123"
													},
													"Children": [
														{
															"ID": "20230331092123-hstcb7r",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230331092123-hstcb7r",
																"updated": "20230331092123"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "key：队列和交换机绑定的RoutingKey"
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331092123-hjthxyb",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331092123-hjthxyb",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4. 补充 ： xml配置文件"
				}
			]
		},
		{
			"ID": "20230331092123-ocbrmoa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-ocbrmoa",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "上述通过配置类方式来配置，下面是xml配置方式下的配置文件"
				}
			]
		},
		{
			"ID": "20230331092123-4ninli2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331092123-4ninli2",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\u003cbeans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:rabbit=\"http://www.springframework.org/schema/rabbit\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd\"\u003e\n\n    \u003ccontext:property-placeholder location=\"classpath:rabbitmq.properties\"/\u003e\n\n    \u003c!-- 创建连接类 连接安装好的 rabbitmq connectionFactory --\u003e\n    \u003cbean id=\"connectionFactory\" class=\"org.springframework.amqp.rabbit.connection.CachingConnectionFactory\"\u003e\n        \u003cconstructor-arg value=\"${rabbitmq.host}\"/\u003e\n        \u003c!-- username,访问RabbitMQ服务器的账户,默认是guest --\u003e\n        \u003cproperty name=\"username\" value=\"${rabbitmq.username}\"/\u003e\n        \u003c!-- username,访问RabbitMQ服务器的密码,默认是guest --\u003e\n        \u003cproperty name=\"password\" value=\"${rabbitmq.password}\"/\u003e\n        \u003c!-- host,RabbitMQ服务器地址，默认值\"localhost\" --\u003e\n        \u003cproperty name=\"host\" value=\"${rabbitmq.host}\"/\u003e\n        \u003c!-- port，RabbitMQ服务端口，默认值为5672 --\u003e\n        \u003cproperty name=\"port\" value=\"${rabbitmq.port}\"/\u003e\n        \u003c!-- channel-cache-size，channel的缓存数量，默认值为25 --\u003e\n        \u003cproperty name=\"channelCacheSize\" value=\"${rabbitmq.channelCacheSize}\"/\u003e\n        \u003c!-- cache-mode，缓存连接模式，默认值为CHANNEL(单个connection连接，连接之后关闭，自动销毁) --\u003e\n        \u003cproperty name=\"cacheMode\" value=\"${rabbitmq.cacheMode}\"/\u003e\n    \u003c/bean\u003e\n    \u003c!-- 创建一个Rabbit管理员，使用上述的配置--\u003e\n    \u003crabbit:admin connection-factory=\"connectionFactory\"/\u003e\n\n    \u003c!--或者这样配置，connection-factory元素实际就是注册一个org.springframework.amqp.rabbit.connection.CachingConnectionFactory实例\n    \u003crabbit:connection-factory id=\"connectionFactory\" host=\"${rabbitmq.host}\" port=\"${rabbitmq.port}\" username=\"${rabbitmq.username}\" password=\"${rabbitmq.password}\" /\u003e--\u003e\n\n\n    \u003c!--\n        定义消息队列:\n        durable :   是否持久化（默认是true），如果想在RabbitMQ退出或崩溃的时候，不会失去所有的queue和消息，\n                    需要同时标志队列(queue)和交换机(exchange)是持久化的，即rabbit:queue标签和rabbit:direct-exchange中的durable=true,\n                    而消息(message)默认是持久化的可以看类org.springframework.amqp.core.MessageProperties中的属性\n                    public static final MessageDeliveryMode DEFAULT_DELIVERY_MODE = MessageDeliveryMode.PERSISTENT;\n\n        exclusive :  仅创建者可以使用的私有队列，断开后自动删除；\n\n        auto_delete : 当所有消费客户端连接断开后，是否自动删除队列\n     --\u003e\n    \u003crabbit:queue name=\"queueName1\" id=\"queueName1\" durable=\"false\" auto-delete=\"false\" exclusive=\"false\"/\u003e\n\n\n    \u003c!--\n        绑定队列, rabbitmq的exchangeType常用的四种模式：direct，fanout，topic， headers,我们用direct模式，\n        即rabbit:direct-exchange标签\n            Direct交换器很简单，如果是Direct类型，就会将消息中的RoutingKey与该Exchange关联的所有Binding中的BindingKey进行比较，\n            如果相等，则发送到该Binding对应的Queue中。有一个需要注意的地方：如果找不到指定的exchange，就会报错。但routing key找不到的话，不会报错，这条消息会直接丢失，所以此处要小心,\n        durable : 是否持久化, 默认true\n        auto-delete:自动删除，若为true，则该交换机所有队列queue删除后，自动删除交换机，默认为false\n    --\u003e\n    \u003crabbit:direct-exchange id=\"exchangeKey_direct\" name=\"exchangeKey_direct\" durable=\"false\"  auto-delete=\"false\"\u003e\n        \u003crabbit:bindings\u003e\n            \u003crabbit:binding queue=\"queueName1\" key=\"routerKey1\"\u003e\u003c/rabbit:binding\u003e\n        \u003c/rabbit:bindings\u003e\n    \u003c/rabbit:direct-exchange\u003e\n\n    \u003c!--\u003crabbit:fanout-exchange id=\"exchangeKey_fanout\" name=\"exchangeKey_fanout\" durable=\"true\" auto-delete=\"false\"\u003e--\u003e\n        \u003c!--\u003crabbit:bindings\u003e--\u003e\n            \u003c!--\u003crabbit:binding queue=\"queueKey\"\u003e\u003c/rabbit:binding\u003e--\u003e\n        \u003c!--\u003c/rabbit:bindings\u003e--\u003e\n    \u003c!--\u003c/rabbit:fanout-exchange\u003e--\u003e\n\n    \u003c!-- spring amqp默认的是jackson 的一个插件,目的将生产者生产的数据转换为json存入消息队列，由于fastjson的速度快于jackson,这里替换为fastjson的一个实现 --\u003e\n    \u003c!-- 或者配置jackson --\u003e\n    \u003cbean id=\"jsonMessageConverter\" class=\"org.springframework.amqp.support.converter.Jackson2JsonMessageConverter\"/\u003e\n\n    \u003c!--\u003crabbit:template  id=\"rabbitTemplate\" exchange=\"exchangeKey_direct\" connection-factory=\"connectionFactory\"--\u003e\n                     \u003c!--message-converter=\"jsonMessageConverter\" /\u003e--\u003e\n\n    \u003cbean id=\"rabbitTemplate\" class=\"org.springframework.amqp.rabbit.core.RabbitTemplate\"\u003e\n        \u003cconstructor-arg name=\"connectionFactory\" ref=\"connectionFactory\"\u003e\u003c/constructor-arg\u003e\n    \u003c/bean\u003e\n\n    \u003c!-- 自定义消息驱动pojo类 --\u003e\n    \u003cbean id=\"rabbitMQHandler\" class=\"com.kingfish.pojo.handler.RabbitMQHandler\"\u003e\u003c/bean\u003e\n\n    \u003c!-- 用于消息的监听的代理类 MessageListenerAdapter --\u003e\n    \u003cbean id=\"testQueueListenerAdapter\" class=\"org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter\"\u003e\n        \u003c!-- 消费者类名；defaultListenerMethod 指定消费者方法名，默认是handleMessage--\u003e\n        \u003cconstructor-arg ref=\"rabbitMQHandler\"/\u003e\n        \u003cproperty name=\"defaultListenerMethod\" value=\"onMessage\"/\u003e\n        \u003cproperty name=\"messageConverter\" ref=\"jsonMessageConverter\"/\u003e\n    \u003c/bean\u003e\n\n    \u003c!--\n        acknowledge : 设置应答模式 -\u003e auto、manual、none 三种应答模式\n                配置监听acknowledeg=\"manual\"设置手动应答，它能够保证即使在一个worker处理消息的时候用CTRL+C来杀掉这个worker，\n                或者一个consumer挂了(channel关闭了、connection关闭了或者TCP连接断了)，也不会丢失消息。\n                因为RabbitMQ知道没发送ack确认消息导致这个消息没有被完全处理，将会对这条消息做re-queue处理。\n                如果此时有另一个consumer连接，消息会被重新发送至另一个consumer会一直重发,直到消息处理成功,\n        concurrency : 每个侦听器最初要启动的并发使用者的数量\n        max-concurrency : 每个侦听器最大并发使用者数量\n    --\u003e\n    \u003crabbit:listener-container connection-factory=\"connectionFactory\" acknowledge=\"auto\" concurrency=\"20\"\n                               max-concurrency=\"30\"\u003e\n        \u003crabbit:listener queues=\"queueName1\" ref=\"rabbitMQHandler\" method=\"onMessage\"/\u003e\n        \u003c!-- 也可用下面这种方式--\u003e\n        \u003c!--\u003crabbit:listener queues=\"queueName1\" ref=\"testQueueListenerAdapter\"/\u003e--\u003e\n\n    \u003c/rabbit:listener-container\u003e\n\n\u003c/beans\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331092123-pm3xr6k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-pm3xr6k",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "注："
				},
				{
					"Type": "NodeText",
					"Data": "\n配置类方式使用xml时需要在 AbstractAnnotationConfigDispatcherServletInitializer 实现类上加上注解@ImportResource 引入配置文件。否则可能无法自动注入xml中声明的bean\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/20191011102630661-20230331092123-pfd5i1j.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230331092123-s4zf0hb",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331092123-s4zf0hb",
				"updated": "20230331092123"
			}
		},
		{
			"ID": "20230331092123-porbjrf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331092123-porbjrf",
				"updated": "20230331092123"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "以上：内容部分参考"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong a",
					"TextMarkAHref": "https://www.cnblogs.com/cjm123/p/9679171.html",
					"TextMarkTextContent": "https://www.cnblogs.com/cjm123/p/9679171.html"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong a",
					"TextMarkAHref": "https://www.cnblogs.com/zhanghaoliang/p/7886110.html",
					"TextMarkTextContent": "https://www.cnblogs.com/zhanghaoliang/p/7886110.html"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong a",
					"TextMarkAHref": "https://www.jianshu.com/p/3d43561bb3ee",
					"TextMarkTextContent": "https://www.jianshu.com/p/3d43561bb3ee"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong a",
					"TextMarkAHref": "https://www.cnblogs.com/vipstone/p/9275256.html",
					"TextMarkTextContent": "https://www.cnblogs.com/vipstone/p/9275256.html"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong a",
					"TextMarkAHref": "https://blog.csdn.net/qq_27384769/article/details/79615015",
					"TextMarkTextContent": "https://blog.csdn.net/qq_27384769/article/details/79615015"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "如有侵扰，联系删除。 内容仅用于自我记录学习使用。如有错误，欢迎指正"
				}
			]
		}
	]
}