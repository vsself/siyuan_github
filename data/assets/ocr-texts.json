{
  "assets/01494ba840bf42bd871a0d73b7c5d721-20230404011826-j3m2ni1.png": "listpack列表未尾标识iA RG大小为me =.LP_HDR_SIZE :",
  "assets/062691092f864e76b55649315795c934-20230407010621-zcq996g.png": "\u003caop:aspectj-autoproxy proxy-target-class=\"true\" AP.",
  "assets/0664389002f6d95297ecde4783f7284a-20230402210130-h20079p.png": "封装并注册BeanDefinition对象(Component-scan为例)1.获取namespaceUri2.1 getHandlerMappings获取映射关系2.resolve方法获取namespaceUri对应的namespaceHandler3.parse方法解析标签2.2 init方法完成具体标签类的注册3.1 创建扫描器3.2.1 findCandidateComponent找到候选组件3.2 扫描3.2.2 @Lazy@Depend-on等信息封装到BeanDefinition3.2.3 注册已封装的BeanDefinition3.3 注册组件如AutowiredAnnotationPostProcessor3.2.1.1 扫描@Component注解3.2.1.2 递归获取.class后缀文件3.2.1.3.1 获取元数据信息3.2.1.3 元数据信息处理3.2.1.3.2 判断includeFilters是否匹配元数据信息注解3.2.1.3.2 匹配则创建BeanDenifition",
  "assets/0870dfa74ec44b3e8db13bab7f2c84c4-20230407011441-f9clt30.png": "",
  "assets/0efd12e89aafa382d4e739d7a263441f-20230402210129-09lpdgi.png": "protected Set\u003cBeanDefinitionHolder\u003e doScan(String... basePackages) {Assert.notEmpty(basePackages, \"At least one base package must bespecified\");Set\u003cBeanDefinitionHolder\u003e beanDefinitions = new LinkedHashSet\u003c\u003e();for (String basePackage : basePackages) {Set\u003cBeanDefinition\u003e candidates =findCandidateComponents (basePackage) ;for (BeanDefinition candidate : candidates) {ScopeMetadata scopeMetadata =this .scopeMetadataResolver.resolveScopeMetadata(candidate) ;candidate. setScope(scopeMetadata. getScopeName()) \u003e;String beanName =this .beanNameGenerator.generateBeanName(candidate, this.registry);if (candidate instanceof AbstractBeanDefinition) {postProcessBeanDefinition((AbstractBeanDefinition) candidate,beanName) ;}if (candidate instanceof AnnotatedBeanDefinition) {AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate) ;}if (checkCandidate(beanName, candidate)) {BeanDefinitionHolder definitionHolder = newBeanDefinitionHolder(candidate, beanName) ;definitionHolder =AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder,this.registry);beanDefinitions.add(definitionHolder) ;registerBeanDefinition(definitionHolder, this.registry);}return beanDefinitions;",
  "assets/0fab9e1933a94f07ace81efda7f370ab-20230408235547-mixvam7.png": "Y *@% Pointcut (org. springframework.aop)@% ControtFlowPointcut (org. springframework.aop.support)@% ConposablePointcut (org. springfranework.aop. support)\u003e (Bi DynamicHethodHatcherPointcut (org. springtramework.aop. support) @% ExpressionPointcut (org. springfranework.aop support)¥ (B\\\u0026 AbstractexpressionPointeut (org. springtramework.aop..support)@u AspectJExpressionPointcut (org.springfranework.aop.aspectj)@ © TruePointcut (org.springfranework. op)@% AnnotationtatchingPointeut (org.springfranework.aop.support annotation)¥ (B\\\u0026 StatichethodMatcherPointcut (org.springfranework.aop.support)\u003e (i StatictethodtatcherPointcutAdvisor (org. springframework.aop.support)\u003e BL» TransactionAttributesourcePointcut (org. springfranework. transaction. interceptor)\u003e BL» TransactionAttributesourcePointcut (org. springfranework. transaction. interceptor)@ 4 SetterPointeut in Pointcuts (org. springframework.aop. support)\u003e Gm ICacheOperationsourcePointcut (org.springfranework.cache. jcache.interceptor)\u003e (Bi% ICachedperationsourcePointcut (org.springfranework.cache. jcache.interceptor)\u003e Bl © CacheOperationSourcePointcut (org. springframework.cache.interceptor)\u003e 8. © CacheOperationsourcePointeut (org. springframework.cache.interceptor)\u003e 8. © CacheOperationsourcePointcut (org. springframework.cache.interceptor)@ 4 GetterPointcut in Pointcuts (org.springfranework.aop. support)\u003e (Bim AbstractRegexpMethodPointeut (org. springtramework.aop.. support)@%e NameatchMethodPointcut (org. springframework.aop. support)",
  "assets/11794f5a0e894e6788ed0a8f277405c0-20230407010621-fyh4dvy.png": "字节码增强与反射的区别类似于基因操作技术与拍CT照B超AspectJ Java Proxy Javassist Instrumentation字节码增强新工具ByteBuddy提供了更友好的操作API. _",
  "assets/11eafd5044a74bfe8aac3dff91f01f66-20230404011825-sd0o20y.png": "entry-len值为512，对应二进制值v拆分为两个字节，每个字节用7位” se0表示当前字节是entry-len的最后字节1表示当前字节左边仍然有属于entry-len的字节",
  "assets/140b896ffbb9474ba77781e515a91636-20230404011823-bmkodhc.png": "32 bits 32 bits 16 bits 8 bitsprevlen encoding data",
  "assets/16762384da6c4dc683a23e6968155063-20230404011825-saujzga.png": "LP_ENCODING_13BIT_UNIT类型个13 bit的整数",
  "assets/1_qq_22996609-20230404012245-niyxcty.jpg": "",
  "assets/1_u013277209-20230404012244-u1qzdfi.jpg": "",
  "assets/1_yimba-20230407010621-8u35pvq.png": "",
  "assets/1b29e94bb9564742b43b1c63983a8432-20230331091400-ygfld33.png": "if (interceptor0rInterceptionAdvice instanceof InterceptorAndDynamicMethodMatcher) {// Evaluate dynamic method matcher here: static part will already have// been evaluated and found to match.InterceptorAndDynamicMethodMatcher dm =(InterceptorAndDynamicNethodMatcher) interceptorOrInterceptionAdvice;Class\u003c?\u003e targetClass = (this.targetClass != null ? this.targetClass : this.method.getDecUbringClass()if (dm.methodMatcher.matches(this.method, targetClass, this.arguments)) {return dm. interceptor. invoke( invocation: this);了(7 228 InterceptorAndDynamicMethodMatcheelse {// Dynamic matching failed.// Skip this interceptor and invoke the next in the chain.return proceed();else {// It's an interceptor, so we i@return ((NethodInterceptor) interceptorOrInterceptionAdvice) . invoke( invocation: this);Pa etesssmee pointcut will have",
  "assets/1d9cd8664dc74bf6a7ae075279c1a553-20230407010621-e8vt3kx.png": "@Aspectpublic class Aop2 {@Pointcut(value=\"execution(* io.kimmking.*.KLass.*dong(..))\")public void point(){@Before(value=\"point()\")public void before() { System.out.println(\"========\u003ebegin Klass dong... //2\"); 上@AfterReturning(value = \"point()\")public void after() { System.out.println(\"========\u003eafter Klass dong... //4\"); }@Around(\"point()\")public void around(ProceedingJoinPoint joinPoint) throws Throwable{\u003earound begin klass dong //1\");joinPoint.proceed();System. out.println(\"========\u003earound after klass dong //3\");SDN @vimBa",
  "assets/2018123016194150-20230330102235-hrntd0e.png": "",
  "assets/2018123016194150-20230331180229-0wsks5g.png": "",
  "assets/20190612160001873-20230329112612-8iyk006.png": "sd bean_lifecircleeeemiscc0posProcesBeanFacton()postProcessBeforeinstantiation()BeanNameAware setBeanNamel)BesnFactoyAware setBeanFactory)InitiaizingBean afterPropartiasSet()initmatnodt)postProcessBeforenitialization()postProcessAftetnitializtion()postProcessAfterinstantiation()postProcessPropertyValues()Toop 实例化BeanesboymethealDiposibleBean destomyl)Toop bean tt",
  "assets/20190707231700840-20230328112428-1d9sp9c.png": "¥ Tests passed: 1 of 1 test- 422 ms\"C:\\Program Files\\Java\\jdk1. 8. 0_191\\bin\\java. exe” ...执行顺序为@调用构造方法创建对象\u003e 回调用set方法设置name属性图执行InitializingBean接口对应的方法团执行initMethod对应的方法https:/blog.csdn.netinrsc272420199.constructor.I0C容器创建完成",
  "assets/20190708001900694-20230328112745-22iyiyq.png": "doCreateBean1.实例化当前bean---相当于new一个当前对象2.给当前bean中的一些属性赋值3.调用initializeBean方法initializeBean(1)前置处理器(2)调用invokelnitMethods方法invokelnitMethods1) FUE BLMT InitializingBean接口,如实现了)判断是否指定了initMethod方法如果指定了调用其指定方;(3)后置处理其(外将装配好的bean返回给doCreateBean方法4.将装配好的bean返回，最终将会被装配到spring容器",
  "assets/20190708003654657-20230328112902-xnsq2eg.png": "¥ Tests passed: 1 of 1 test- 484ms+ \"C:\\Program Files\\Java\\jdk1. 8. 0_191\\bin\\ java. exe” .... constructor. .+t Name:SALA A@PostConstruct AIDK A WEA RA\u003e 所以其指定的方法. @PostConstruct........ afterPropertiesSet. ne 在InitializingBean指定的方法网init 以及initMethod指定的方法之前I0C容器创建完成.…………….Process finished with exit code q https:/fblog.csdn.net/nrsc272420199",
  "assets/20191009133958598-20230331092122-cd5z677.png": "RabbitMQ 模型架构",
  "assets/20191010112250680-20230331092122-66w1mgn.png": "Overview Messages Message rates +hName Features Consumers Consumer ut Ready Unacked Total _ incoming deliver / get ackcom.kinafish.1 D\u003e 0 0% 0 0 0com-kingfish.2 回0 0% idle 0 0 0queueKey 0 0% idle 0 0 0queueNamel",
  "assets/20191010112333874-20230331092122-ao4gpnu.png": "SO —€ © @ localhost:8080/ma/receiveao 百度-下发送的信息2019-10-10 11:21;12",
  "assets/20191010112346565-20230331092122-rb9m4pi.png": "PaginationPage| 1 ¥| of 1 - Filter: Regex 7OverviewName Features Consumers Consumer utilisation Statecom.kingfish.1 D 0 0% idlecom.kingfish.2 回0 0% idlequeueKey @ 0 0% idlequeueNamel 0 0%spittle. 回5 0%spittle. 回0 0% idlespittle. D 0 0% idle队列名称\u003e 0 0% idleAdd a new queueMessagesReadyUnacked Total000Displaying 8 items , page size upto: 1Message ratesincoming deliver / get ack+h0.00/s 0.00/s) _0.00/s",
  "assets/20191010121831737-20230331092122-lnjkkcn.jpg": "Debugger Deployment +\" ffi] Tomcat Localhost Log +\" fil] Tomcat Catalina Log +\"12:16:56,",
  "assets/20191011102630661-20230331092123-pfd5i1j.png": "Configurationpublic class SppinaliebliveConfig extends AbstractAnnotationConfi gDispatcherServletInitializer [f",
  "assets/20191018150846696-20230402210150-jz7v8c3.jpg": "普通类的实例化过程javac站可",
  "assets/20191018151632339-20230402210151-2a4sfun.jpg": "作者-shadow普通类的实例化过程javacnew—— | objectspring bean的实例化过程简图constructorArgumentValues=citydaoseme spring TactoryBeaName®dependencyeneceee If dependson TactoryMethodNameConstructorArguinitMethodName |{ destroyMethodNamemore.没被注解的类scope=\"singleton= —update自定义的BeanFactoryPostProcessor改变X类所对应的BeanDefinition的一些属性获取X类所对应的BeanDefinitionBeanDefinitionBuildergenericBeanDefinition0;改变你起需要改变的一些属性，比如程序需要改变beanClassbeanDefinition0.setBeanClass(Yclass)",
  "assets/20191018194111708-20230402210150-ods8uie.gif": "",
  "assets/20191018204649189-20230402210150-0u04whn.jpg": "ware®» Ordered|©* FunctionalInterface@* BeanFactoryPostProcessor|amentAware | @* ResourceLoaderAware®* PriorityOrdered@* BeanDefinitionRegistryPostProcessoryry@*« ConfigurationClassPostProcessorryhttps://blog.csdn.net/java_lyvee",
  "assets/20191021183405636-20230402210150-n78j4vm.gif": "",
  "assets/20191022142307111-20230402210150-ycoz8ap.jpg": "2019/10/21 205521 .和mm: 2) 路神，今天看mybatis-spring最新的源码，发现了BeanFactoryRegistryPostProcessor的使用场景，就是昨天噶上潮解MapperScan涯1的场全©*[Jecoraconteasnpostrocso i ay*JE BeanFactoryPostProcessor I 党+[fame roearaconteosyPostoceso: 党",
  "assets/20191028142612376-20230402222009-5tme34m.jpg": "作者-shadow@2",
  "assets/20191028161517831-20230402222009-hu484ob.gif": "",
  "assets/20191111145723704-20230402222009-au9i6kh.jpg": "/*** Convenient adapter for programmatic registration of annotated bean classes.* This is an alternative to {@Link ClassPathBeanDefinitionScanner}, applying* the same resolution of annotations but for explicitly registered classes only.** @author Juergen Hoeller* @author Chris Beams* @author Sam Brannen* @author Phillip Webb* @since 3.0* @see AnnotationConfigApplicationContext#registerpypublic class AnnotatedBeanDefinitionReader {https://blog.csdn.netijava_lyvee",
  "assets/20191111154619226-20230402222009-k3yqujp.gif": "",
  "assets/20191111170825158-20230402222009-dgldm3b.gif": "",
  "assets/20191118202529824-20230402223247-ykbgjf0.gif": "",
  "assets/20191118203015320-20230402223246-flbdnxd.gif": "",
  "assets/20191118210559319-20230402223248-rgkoo0b.png": "实例化spring容器扫描类实例化beanDefinitionbeanDefinition put map调用bean工厂的后置处理器缓存注解信息解析合并后的bd对象MEETS Ebean的生命周期回调Awre接口生命周期回调方法Put 单例池容器",
  "assets/20191118223750129-20230402223248-9wpsz9n.gif": "",
  "assets/20191119140401722-20230402223247-z7up5as.gif": "",
  "assets/20191119171834279-20230402223246-v8q9arv.gif": "",
  "assets/20191119205040133-20230402223246-8gnc5ln.gif": "",
  "assets/20191119210639833-20230402223246-rrvxslc.gif": "",
  "assets/20191119213147922-20230402223248-slm9sd0.gif": "",
  "assets/20191119222408130-20230402223246-s58f47y.gif": "",
  "assets/20191121140344401-20230402223246-c88yw67.gif": "",
  "assets/20191218152539889-20230331092122-y0f6ova.png": "CT \u003c\u003c",
  "assets/20191218153544215-20230331092122-rh9h31q.png": "Overview Connections Channels Exchanges Queues (ZEEEUsers~ AusersFilter: (Regex ?Name Tags Can access virtual hosts | Has passwordguest administrator | ds .2y Adda userUsername: |kingfish := (confirm)Tags: administrator 2Set Admin | Monitoring | PolicymakerManagement | Impersonator | NoneHTTP API Server Docs Tutorials. ~ Community Support‘Community Slack‘Commercial Suppor",
  "assets/20191218162813315-20230331092123-geo0fof.png": "本300ILVIU， 377 chanei9sCluster rabbitowllOverview Connections 。 Channels Exchanges 。 Queues User kingfishVirtual Hosts~ Allvirtual hostsFilter: GRegex |? 2 items, page size up toOverview Messages Network Message rates +/- LimitsName Users ? | State Ready Unacked Total From client To client publish | deliver / get1 guest running 0 0 0 0.00/s clusterThello “| kingfish | running 1 0 1 0.00/s 0.00/s~ Add a new virtual hostName: | /aeiidlHTTP API Server Docs Tutorials. ”Community Support Community Slack Commercial support Plugins —_ GitHubChangelog",
  "assets/20191218162947216-20230331092122-18rqgyk.png": ")本和300ItVIU， as GaassOverview Connections Channels ExchangesWaiting for data...DetailsTracing enabled: =State: rabbit@wlhao : running~ PermissionsCurrent permissionsUser Configure regexp Write regexp Read regexpkingfish ~~ a -Set permiggConfigure regexp: -*~ Topic permissions‘Current topic permissions+o topic permissions ...Set topic permissionUser | Kingfish ¥(AMAP default)",
  "assets/20191218163919920-20230331092123-wjv6tj4.png": "Overview ConnectionsChannelsExchanges AdminQueues-y All queues (1)Paginationpage| 1 ¥| of 1 - Filter: O Regex ?Overview/hello BaseQueueName~ Add anew queueFeatures Stateidlelessage ratesincoming deliver / get ack0.00/s 0.00/s 0.00/s+/-",
  "assets/20191218164017838-20230331092123-cubv91f.png": "Message 1‘The server reported 0 messages remaining.Exchange | (AMQP default)Routing Key BaseQueueNameRedelivered «PropertiesPayload19 bytes | info : HNEncoding: string\u003e Move messages",
  "assets/20191218164304753-20230331092122-ebxwc2e.png": "部bssccoweumerD: VaraJDKVJavas6\\jakl 8\\bin\\ java. exe地慌消费者001 WELK \u003c nfo = JBM",
  "assets/20191218164320564-20230331092123-x5vz6c0.png": "OverviewVirtual host Name/hello BaseQueueNameFeatures StateidleMessagesReadyUnacked Total00Message ratesincoming deliver / get ack0.00/s 0.00/5 0.00/s+/-",
  "assets/20191218164837502-20230331092122-tzemov1.png": "2 Work queuesDistributing tasks amongworkers (the competingconsumers pattern)全",
  "assets/2019121817020095-20230331092123-ftbgdmv.png": "OverviewVirtual host Namehello BaseQueueNameThello WorkQueueNameFeatures StateidleidleMessagesReady30Unacked Total00Message ratesincoming deliver / get ack0.00/s 0.00/5 0.00/s0.00/s+/-",
  "assets/20191218170839860-20230331092122-cx7d4ea.png": "amqgen-RQ6，amg gen-As8，",
  "assets/20191218171148684-20230331092123-ik1kfkl.png": "amq.gen-RQ6...amq.gen-As8...",
  "assets/20191218171225930-20230331092122-4ijfxca.png": "amagp.gen-S9b.typesdirect “fq amap.gen-Aglerrorwarning",
  "assets/20191218171309625-20230331092122-m18xtrv.png": "Qutype=topic *.orange.*",
  "assets/20191218184140276-20230331092122-z2ar3hp.png": "PADI Hie BARE Ree cae. ATLAS Pain ee Habis se BABAchannel. queueDeclare (QUEUE_NAME, durable: false, exclusive: false, autoDelete: false, argu声明交换机，若存在则不重新声明channel. exchangeDeclare (EXCHANGE_NAME, type: “direct”) ;// SREPSIECHL. GRELroutingKkey) info 和error。即channel. queueBind (QUEUE_NAME, EXCHANGE_NAME, routingKey: “info”);channel. queueBind (QUEUE_NAME, EXCHANGE_NAME, routingKey: “error”) ;设置消费者一次只能拉了一个;定义队列的消费者ac ， 本https:/blog.csdn.netqq_36882793",
  "assets/20191218184936840-20230331092122-9v45eyf.png": "PNET FU 3 EE oJ TE 7CaP AP APR TF BP ae Te EI 7G AChannel channel = connection. createChannel () ;在通道中创建一个队列。如果通道中已经存在该队列，则不会重新创建。如果队列中没有该队列直接绑定会报错，所以生产者消费者中都需要声明队列channel. queueDeclare (QUEUE_NAME, durable: false, exclusive: false, autoDelete: false, arguments: null);声明交换机，若存在则不重新声明channel. exchangeDeclare (EXCHANGE_NAME, type: “topic”);绑定队列到交换机定义队列的消费者DefaultConsumer consumer = new DefaultConsumer (channel) {HEAL, ETRE, OSCE RENNIE, SHERRIE og csdnneyqq_36882793",
  "assets/20191218191722674-20230331092122-ihmjgu8.png": "声明exchange，指定类型为directchannel. exchangeDeclare (EXCHANGE_NAME, type: “direct”,autoDelete: false, arguments: null);消息内容",
  "assets/20191218191808291-20230331092122-g47nptd.png": "// 如果队列中没有该队列直接绑定会报错，所以生产者消费者中都需要声明队列channel. queueDeclare (QUEUE_NAME,xclusive: false, autoDelete: false, arguments: null);",
  "assets/201912181919158-20230331092123-opyz8x3.png": "WEARString message = “info : 地瓜地瓜“:channel. basicPublish (EXCHANGE_NAME, routingKey: “info”, message. getBytes()) ;System. out. printIn(\"### 消息已发送， ”+ message);关闭通道和连接httpsblog.csdn.netqq_36882793",
  "assets/20191223234347996-20230402000310-c0av7bn.png": "// Initialize the bean instance.Object exposedObject = bean{® jy ; beanName: \"a\" mbd: RootBeanDefinition@3654 in\u0026%,exposedObject = initializeBean(beanName, exposedObject, mbd)}(Throwable ex) {(ex BeanCreationException \u0026\u0026 beanName.equals(((BeanCreationException) ex) .getBean(BeanCreationException) ex}AbstractAutowireCapableBeanFactory doCreateBean()LazyDemoApplication[Mi Console +\" Endpoints +\" \u003c \u003eanain\"@1 in group \"main\": RUNNING = +yer this = {DefaultListableBeanFactory@3173} ... toStringd,\u003e beanName =CreateBean:594, AbstractAutowireCapableBeanFactory (org.springframework.be 6 mbd = (Root8eanDefinition@3654) toString)ateBean:517, AbstractAutowireCapableBeanFactory (org.springframework.bean. args = nullibda$doGetBean$0:323, AbstractBeanFactory (org. springframework.beans.fact« \u003e instanceWrapper-={BeanWrapperlmpl@3655} ... toString)iObject:=15 840514538 (org-springrramework. beans. factory.support.AbstractBe \u003e Bean\\= {A@3656}Singleton:222, DefaultSingletonBeanRegistry (orgs pringframework. beans. fact« \u003e beanType = {Class@3450}\"\"... NavigateGetBean:321, AbstractBeanFactory (Org.springiramework.beans.factory.support 贺earlySingletonExposure = true‘Bean:202, AbstractBeanFactory (org.springtramework.beans.factory.support) \u003e exposedObject = {A@3656}InstantiateSingletons:879, DefaultListableBeanFactory (org.springframework.b.ishBeanFactoryinitialization:878, AbstractApplicationContext (org.springframe\\https://xiejun.blog.csdn.net.",
  "assets/20191223234431460-20230402000310-gtvkhcm.png": "// Initialize the bean instance.Object exposedObject = bean{avexposedObject = initializeBean (beanNamembd: RootBeanDefinibeanName: “\u003e”exposedObject, mbd)(ex BeanCreationException \u0026\u0026 beanName.equals(((BeanCreationException) ex) .getBe}(Throwable ex) {(BeanCreationException) ex}AbstractAutowireCapableBeanFactory doCreateBean()azyDemoApplication[Hi Console +\"| Yy Endpoints \u003e| \u0026 M MW A ixi + 三vanables NOain\"@1 in group \"main\": RUNNING = +yer this = {DefaultListableBeanFactory@3173} .… toString()reateBean'594, AbstractAutowireCapableBeanFactory (org.springframework.be | ny\u003e mbd = {RootBeanDefinition@3760} .toStringiteBean:517, AbstractAutowireCapableBeanFactory (Org.springframework.bean. args = nullbda$doGetBean$0:323, AbstractBeanFactory (org. springframework.beans.fact« \u003eDbject:=1, 840514538 (org. springrramework. beans. factory.support.AbstractBe \u003esingleton:222, DefaultSingletonBeanRegistry (org: s pringframework. beans. fact«etBean:321, AbstractBeanFactory (org. springframework.beans.factory. support\\Q@l)sean: 202, AbstractBeanFactory (org springtramework.beans.factory.support) \u003eylveCandidate:276, DependencyDescriptor (org.springframework.beans.factonpe anleMarnasntawnes 19079 P CA crpinnferamoasarl heinstanceWrapper-={BeanWrapperlmp|@3761} ...Bean\\= {B@3762}beanType = {Class@3451}\"\"...earlySingletonExposure = trueexposedObject = {B@3762}toString()Navigatehttps://xiejun.blog.csdn.net.",
  "assets/20191223234519701-20230402000310-txu5nht.png": "(earlySingletonExposure) {Object earlySingletonReference = getSingleton (beanName allowEarlyReference: )Pf if Muy 1 earlySingletonReference: null(exposedObject == bean) {exposedObject = earlySingletonReference}(! -allowRawInjectionDespiteWrapping \u0026\u0026 hasDependentBean(beanName)) {String[] dependentBeans = getDependentBeans (beanName)Set\u003cString\u003e actualDependentBeans = LinkedHashSet\u003c\u003e (dependentBeans. length)(String dependentBean : GependentBeans) {(!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) {actualDependentBeans.add(dependentBean)AbstractAutowireCapableBeanFactory doCreateBean()noApplication | 3司Console ”| Yy Endpoints +\"|k=E © M MN A yy 国N)1 in group \"main\": RUNNING = +y 4 \u003e this = {DefaultListableBeanFactory@3173} .… toString() |\u003e beanName = |3ean:609, AbstractAutowireCapableBeanFactory (org.springframework.be © ining -RootgeanDefinitiona3760) toString)n:517, AbstractAutowireCapableBeanFactory (org.springframework.bean.loGetBean$0:323, AbstractBeanFactory (org. springframework. beans. fact« \u003e== 1, 840514538 (org. springiramework. beans. factory.support.AbstractBeargs = nullinstanceWrapper-={BeanWrapperlmp|l@3 761} ... toString()\u003e = bean = {B@3762}ton:222, DefaultSingletonBeanRegistry (org: s pringframework. beans. fact« \u003e beanType “{Class@3451}\"\"... Navigaten:321, AbstractBeanFactory EEE, ,ework. beans.factory.support| | earlySingletonExposure = true102; AbstractBeanFactory (org.springtramework.beans.factory.support) \u003e exposedObject = {B@3762}indidate:276, DependencyDescriptor (org.springframework.beans.facton earlySingletonReference = nullsDependency:1287, DefaultListableBeanFactory (org.springframework.bespendency:1207, DefaultListableBeanFactory (org.springframework. bean:5 AutowiredAnnotationReanPostProcessor$AutowiredFieldElement (ora.s https:/xiejun.blog.csdn.net",
  "assets/2019122323465717-20230402000309-qu13q6l.png": "C BeanPostProcessor {Object(beanName.equals (BeansExceptionbeanName:) ) {return new bean: Abean}CGLIBProxyObject obj; (Object obj) { thishttps://xiejun.blog.csdn.net",
  "assets/20191223234748376-20230402000310-gsmdxv6.png": "if (earlySingletonExposure) {Object earlySingletonReference = getSingleton(beanName, allowEarlyReference: false) ;if (exposedObject == bean) {exposedObject = earlySingletonReference;}else if (!this.allowRawinjectionDespiteWrapping \u0026\u0026/ hasDependentBean (beanName)) {String[] dependentBeans = getDependentBeans (beanName) ;Set\u003cString\u003e actualDependentBeans = new LinkedHashSet\u003c\u003e(dependentBeans. length) ;for (String dependentBean : dependentBeans) »{if (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) {actualDependentBeans.add(dependentBean) ;}if (!actualDependentBeans.isEmpty()) {PRSRSESSSSRRanCirreant luTnP SaaS RRPesantinan fhaanNamsAbstractAutowireCapableBeanFactory doCreateBean()ApplicationConsole +\"| Yy Endpoints +\"|h= © M MW Ay : 国\\sf = \\in group \"main\": RUNNING = +y 4 \u003e E this = {DefaultListableBeanFactory@3173} ... toString)\u003e @© beanName =an:609, AbstractAuitowireCapableBeanFactory (org.springframework.be 6 mbd = {RootBeanDefinition@3654) ，tostring0517, AbstractAutowireCapableBeanFactory (org.springframework.bean. @ args = nullGetBean$0:323, AbstractBeanFactory (org.springframework. beans. fact« \u003e = instanceWrapper-={BeanWrapperlmp|@3655} ... toString)‘1, 840514538 (org:springtramework. beans. factory.support.AbstractBe \u003e = bean = {A@3656}n:222, DefaultSingletonBeanRegistry (orgs pringframework.beans.fact« \u003e = beanType {Class@3450}\"\"... Navigate321, AbstractBeanFactory (org.springiamework. beans. factory.support, cA earlySingletonExposure = true2; AbstractBeanFactory (org-springtramework.beans.factory.support) \u003e = exposedObject = {A$$EnhancerByCGLIB$$5e5c9126@4146} ... testing”)ateSingletons:879, DefaultListableBeanFactory (org.springframework.bi \u003e = earlySingletonReference = {A@3656}‘actorvinitialization: 878. AbstractApplicationContext (org. sprinaframe'| https:/xiejun.blog.csdn.net",
  "assets/20191223234958358-20230402000310-5q2w1db.png": "if (earlySingletonExposure) {Object earlySingletonReference = getSingleton(beanName, allowEarlyReference: false) ;if (earlySingletonReference != null) {if (exposedObject == bean) {exposedObject = earlySingletonReference;}else if (!this.allowRawInjectionDespiteWrapping,\u0026\u0026 hasDependentBean(beanName)) {String[] dependentBeans = getDependentBeans (beanName) ;Set\u003cString\u003e actualDependentBeans = new LinkedHashSet\u003c\u003e(dependentBeans. length) ;for (String dependentBean : dependentBeans) {if (!removeSingletonifCreatedForTypeCheckOnly(dependentBean)) {actualDependentBeans.add (dependentBean) ;throw new BeanCurrentlyInCreationException (beanName,+’ beanName + +StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +AbstractAutowireCapableBeanFactory doCreateBean()\\pplicationonsole +\"| yY{ Endpoints +\"|\\k= @ M NM A : 国\\n group \"main\": RUNNING 本+y 4 \u003e E this = {DefaultListableBeanFactory@3173} ... toString)\u003e @ beanName =n:621, AbstractAutowireCapableBeanFactory (org.springframework.be \u003e OO mbd = (gootKeanDefinition@3654) ，tostrina017, AbstractAutowireCapableBeanFactory (org.springframework. bean. @ args = nulletBean$0:323, AbstractBeanFactory (org. Springframework.beans.fact« \u003e = instanceWrapper-={BeanWrapperlmp|@3655} ... toString)5 840514538 (org: Springiramework.beans.factory.support.AbstractBe \u003e = bean = {A@3656}https://xiejun.blog.csdn.net",
  "assets/20191223235121867-20230402000310-m3c4kpy.png": "mtlyInCreationException: Error creating bean with name 'a': Bean with name 'a' has been injected into other beans [b] inpport.AbstractAutowireCapableBeanFactory.doCreateBean (AbstractAutowireCapableBeanFactory. java:624) ~[spring-beans-—5.2.1.]pport.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517) ~[spring-beans-5.2.1.RHpport.AbstractBeanFactory. lambda$doGetBeanS0 (AbstractBeanFactory.java:323) ~[spring-beans—5.2.1.RELEASE.jar:5.2.1.RELEAS$pport.DefaultSingletonBeanRegistry.getSingleton (DefaultSingletonBeanRegistry.java:222) ~[spring—beans-5.2.1.RELEASE.jar}pport.AbstractBeanFactory.doGetBean (AbstractBeanFactory.java:321) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]pport.AbstractBeanFactory.getBean (AbstractBeanFactory.java:202) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]pport.DefaulthistableBeanFactory.preInstantiateSingletons (DefaultListableBeanFactory.java:8/9) ~[spring-beans-5.2..1 RETR",
  "assets/20200318205324698-20230402223248-50i2wpn.gif": "",
  "assets/20200318211605581-20230402223247-kqp69bh.png": "/unchecked/protected \u003cT\u003e T doGetBean(final String name, @Nullable final Class\u003cT\u003e requiredType, n@Nullable final Object[] args, boolean typeCheckOnly) throws BeansException {//这个方法真的很重要，现在我们只要理解他是对beanName进行验证合法性便可final String beanName = transformedBeanName(name); beanName: “x” name: “xObject bean;Se TIE// Eagerly check singleton cache for manually registered singletons.if (sharedInstance != null \u0026\u0026 args == null) {if (logger.isTraceEnabled()) { httpsi/blog.csdn.netjava_lyvee",
  "assets/2020031822353813-20230402223249-5x2ymtv.png": " [spring.spring-context main] org.springframework.context.annotationAnnotationConfigApp]| AnnotationConfigApplicationContextpublic AnnotationConfigApplicationContext()ac= new AnnotationConfigApplicatlionContext() ;//假设你在这里便把你自己new 好的对象比如A a = new A();//通过这种api形式以及放到了spring容器当中ac.getBeanFactory().registerSingleton( beanName: \"xx\",a);ac.register(App.class);//这里是spring容器初始化，正好他初始化的时候扫描到了A//那么这个时候a以及在容器了;所以才有判断ac.refresh();https://blog.csdn.netjava_lyvee",
  "assets/2020031822510331-20230402223249-dk5whuz.gif": "",
  "assets/2020031823330061-20230402223248-keez1gx.png": "else {// Fail if we're already creating this bean instance:// We're assumably within a circular reference.if (isPrototypeCurrentlyInCreation(beanName)) {throw new BeanCurrentlyInCreationException(beanName) ;https://blog.csdn.netjava_lyvee",
  "assets/20200319094127240-20230402223247-jpe05kr.png": "bean实例化步骤1作者-shadowqq:244854192bean实例化步骤2bean实例化步骤N是不是在信继续下面实例化步又exception -二一truebean实例化步骤M这个就是那个集合，因为是在M步才add到这个集合，所以在N步做判断的的时候一般情况是false，除非是循环依赖假设pean这个时候实例化完成了，那么则会吧上面按个集合当中的当前bean一一remove掉bean实例化步骤O",
  "assets/20200319100543544-20230402223248-zh5t8nd.png": "/** Cache of singleton objects: bean name to bean instance. *///单例池，缓存了一般情况下spring应用private final Map\u003cString, Object\u003e singletonObjectsntfi fjilbeannew ConcurrentHashMap\u003c\u003e( initialCapacity: 256) ;https://blog.csdn.netjava_lyvee",
  "assets/20200319105520107-20230402223246-3czppds.png": "作者-shadow244854192mainYspring#refresh方|LLLLWLLspring 初始化beaneee 4国硬国国帮spring 初始化beany第一次调用getsingeton六一中间做了各种验证-基| 第二getsingeton验证这成后第二次调用getsingtonspring作者觉得可以开始着手创建bean了，那么第一步干嘛呢?",
  "assets/20200319115650634-20230402223247-94kp1yd.png": "[*** Callback before singleton creation.* \u003cp\u003eThe default implementation register the singleton as currently in creation.* @param beanName the name of the singleton about to be created -* @see #isSingletonCurrentlyInCreation =*/protected void beforeSingletonCreation(String beanName) {if (!this.inCreationCheckExclusions.contains(beanName) \u0026\u0026 !this.singletonsCurrentlyInCreation.add(beanNethrow new BeanCurrentlyInCreationException(beanName) ;} 本} https://blog.csdn.netjava_lyvee",
  "assets/20200319144654549-20230402223247-1vlgfow.png": "/** Names of beans that are currently in creation. */private final Set\u003cString\u003e singletonsCurrentlyInCreation =Collections .newSetFromMap(new ConcurrentHashMap\u003c\u003e( initialCapacity: 16) ) ;https://blog.csdn.netjava_lyvee",
  "assets/20200319150310482-20230402223247-8fcb4n2.png": "singletonsCurrentlylnCreation这个就是正在创建bean的集合作者-shadow 注意这个集合当中存的name244854192 并且是没有创建完成的bean 代码执行到这里的时候，目前这个集合里面就只有一个x如果一个bean创建完成则会从这个list集合remove",
  "assets/20200319155032589-20230402223247-s7fhfgq.gif": "",
  "assets/20200319162830480-20230402223247-baqhom3.gif": "",
  "assets/20200319170519702-20230402223246-ukn8i8y.png": "547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608610611612613614615616617618619620621622623624625626627protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final @Nullable objethrows BeanCreationException {// Instantiate the bean.BeanWrapper instanceWrapper = null;if (mbd.isSingleton()) {instanceWrapper = this. factoryBeanInstanceCache. remove (beanName) ;yif (instanceWrapper == null) {//doCreateBean -1//这个方法里面完成了对象创建，仅仅是对象instanceWrapper = createBeanInstance(beanName, mbd, args);nefinal Object bean = instanceWrapper.getWrappedInstance() ;Class\u003c?\u003e beanType = instanceWrapper.getWrappedClass() ;if (beanType != NullBean.class) {mbd.resolvedTargetType = beanType;y// Bllow post-processors to modify the merged bean definition.//从这个javadoc可以看出这里说的是可以通过post-processors去modify合并的beanDefinitiom//和循环依赖无关synchronized (mbd.postProcessingLock) {if (!mbd.postProcessed) {try {applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName) ;ycatch (Throwable ex) {throw new BeanCreationException (mbd.getResourceDescription(), beanName,\"post-processing of merged bean definition failed\", ex);ymbd.postProcessed = true;y// Bagerly cache singletons to be able to resolve circular references// even when triggered by lifecycle interfaces like BeanFactoryAware.//通过javadoc大概知道这里是缓存一个对象去解决循环依赖//doCreateBean-2boolean earlySingletonExposure = (mbd.isSingleton() \u0026\u0026 this.allowCircularReferences \u0026\u0026isSingletonCurrentlyInCreation (beanName) ) ;if (earlySingletonExposure) {if (logger.isTraceEnabled()) {logger.trace(\"Eagerly caching bean '\" + beanName +\"* to allow for resolving potential circular references’if (logger.isTraceEnabled()) {logger.trace(\"Eagerly caching bean '\" + beanName +\"* to allow for resolving potential circular references\") ;y//doCreateBean-3addSingletonFactory(beanName, () -\u003e getEarlyBeanReference (beanName, mbd, bean)) ;y// Initialize the bean instance.Object exposedObject = bean;try {//完成属性填充，比如a里面住了一个B，那么就是这个方法完成的属性注入//doCreateBean-4populateBean(beanName, mbd, instanceWrapper) ;//主要执行各种生命周期回掉方法以及aop等exposedobject = initializeBean(beanName, exposedObject, mbd) ;rrowable ex) {if (ex instanceof BeanCreationException \u0026\u0026 beanName.equals(((BeanCreationException) ex) .getBeanlthrow (BeanCreationException) ex;yelse {throw new BeanCreationException(mbd.getResourceDescription(), beanName, \"Initialization of bean failed\", ex);yyif (earlySingletonExposure) {Object earlySingletonReference = getSingleton(beanName, false) ;if (earlySingletonReference != null) {if (exposedObject == bean) {exposedObject = earlySingletonReference;yelse if (!this.allowRawInjectionDespiteWrapping \u0026\u0026 hasDependentBean(beanName)) {String[] dependentBeans = getDependentBeans (beanName) ;Set\u003cString\u003e actualDependentBeans = new LinkedHashSet\u003c\u003e(dependentBeans.length) ;",
  "assets/20200319172652544-20230402223247-0mq6090.gif": "",
  "assets/20200319174707219-20230402223248-nn9jv2w.png": "main作者-shadow244854192 了spring#refresh方法Reesspring 初始化beaneee beforeSingletonCreation(beanName); [+ 把x add到正在创建的集合:spring 初始化bean第一次调用getSingeton ”六一中间做了各种验证一世|调用doCreateBean第二次调用getsingeton验证完成后第二次调用getsingtonspring作者觉得可以开始着手创建bean了，那么第一步干嘛呢?",
  "assets/2020031918085071-20230402223246-xu4o5gb.gif": "",
  "assets/2020032011415039-20230402223247-7ho0ohl.png": "mainspring#refresh方法spring 初始化bean作者-shadow244854192beforeSingletonCreation(beanName); 三一入| 把x add到正在创建的集合当中spring 初始化beanVvVvSS +} _[erccocteonncoi合并beanDefinition是spring当中又一个比较难的，和本文无关先跳过",
  "assets/20200320141219944-20230402223247-bchpd27.png": "boolean earlySingletonExposure = (mbd.isSingleton() \u0026\u0026 this.allowCircularReferences \u0026\u0026isSingletonCurrentlyInCreation(beanName) ) ;if (earlySingletonExposure) ——— 上//doCreateBean-3addSingletonFactory(beanName, () -\u003e getEarlyBeanReference(beanName, mbd, bean));truehttps://blog.csdn.netijava_lyvee",
  "assets/20200320145943343-20230402223247-f66hh30.png": "作者-shadow244854192spring在处理循环依赖的时候涉反及到的三个mapsingletonObjects一级缓存，主要存放单例beansingletonFactories二级缓存，主要存放ObjectFactory类BNL WRearlySingletonObjects三级缓存，主要存放半成品的bean也有人叫三级缓存，但是关于顺序有所差别主要1级缓存和3级缓存会颠倒，二级缓存是铁打的不动这里我们就按图上画的singletonObjects: 一级earlySingletonObjects: 三级",
  "assets/20200320151702208-20230402223248-2vy4fkz.png": "protected void addSingletonFactory(String beanName, ObjectFactory\u003c?\u003e singletonFactory) {Assert.notNuLL(singletonFactory, message: \"Singleton factory must not be null\");//singletonObjects 一级mapsynchronized (this.singletonObjects) {//如果单例池当中不存在才会add//因为这里主要为了循环依赖服务的代码//如果bean存在单例池的话其实已经是一个完整的bean了|//一个完整的bean自然已经完成了属性注入，循环依赖已经依赖上了//所以如果这个对象已经是一个完整bean，就不需要关心，不需要进ifif (!this.singletonObjects.containsKey(beanName)) {//把工厂对象put到二级map-一singletonFactoriesthis.singletonFactories.put(beanName, singletonFactory) ;//从三级map中remove掉当前bean//为什么需要remove? 抛开细节，这个三个map当中其实存的都是同一个对象//spring 的做法是三个不能同时都存，加1存了，则2和3就要remove//反之亦然，现在既然put到了2级缓存，1已经判断没有，3则直接removethis.earlySingletonObjects.remove(beanName) ;//这行代码和本文无关this.registeredSingletons.add(beanName) ;httpsi/blog.csdn.netjava_lyvee",
  "assets/20200320152441259-20230402223248-yeppsij.png": "作者-shadow244854192mainspring#refresh方法spring 初始化beanbeforeSingletonCreation(beanName); [-—\u003e}把x add到正在创建的集合当中y第一次调用getsingeton 中间做了各种验证- 一次调用getsingeton|调用doCreateBeanySAX SAO \u003e注意还不是bean调用createBeanlnstance方法合并beanDefinition是spring当中又一个比较难的，和本文无关先跳过wv处理需要合并的beanDefinition",
  "assets/20200320154656495-20230402223247-z1tqdqp.png": "34 // Initialize the bean instance. exposedObject5 Object exposedObject = bean; exposedObject: X@1811 bean Egg6 口try { @y = null7 由//完成属性填充，比如A里面住了一个B，那么就是这个方法完成的局8 A //doCreateBean-4 Y=null没有完成自动注入5 的populategeanpeanhane， nbd, instancelirapper); bean ‘el8 1/1 EARAT ARE ol TIE Re aop1 exposedObject = initializeBean(beanName, exposedObjeci2 a }3 Ss , catch.(Throwable ex) {AbstractAutowireCapableBeanFactory \u003e» doCreateBean()ig: [ei Test xBebugger Console 三A ++ THO BHx 的构造方法只实例化了X，Y并没有实例化em evo \u003ehttps://blog.csdn.netijava_lyvee",
  "assets/20200320154854707-20230402223248-nuvk6jd.png": "// Initialize the bean instance.Object exposedObject = bean;局try {//完成属性填充，比如A里面住了一个B，那么就是这个方法完成的属性注DX//doCreateBean-4populateBean(beanName, mbd, instanceWrapper) ;//主要执行各种生命周期回掉方法以及aop等Ss , if (Throwable ex) {AbstractAutowireCapableBeanFactory \u003e doCreateBean()instanceWrap}加Gitest x‘exposedObjectmeexposeddbject: X@1811 bean: X01 8 See eeetSs ees iinVv @y=(v@1832}Vv @x={X@1811}\u003e Oy=1ve@1832}x住了y，被注入的Y也注入了X所谓的循环依赖完成gger Console 三2 +L tO BHx 的构造方法Y 的构造方法Y 已经实例化了https://blog.csdn.netijava_lyvee",
  "assets/20200320160609963-20230402223246-bfibk7k.png": "singletonsCurrentlylnCreation这个就是正在创建bean的集合作者-shadow 注意这个集合当中存的name244854192 并且是没有创建完成的bean代码执行到这里的时候，目前这个集合SERRE当xpy，getBean(y)为null则会创建y，那么创建y的过程中这个集合会放入一个y如果一个bean创建完成则会从这个list集合remove",
  "assets/20200320160912766-20230402223247-xrqn7wm.png": "作者-shadow244854192A |就是一级缓存)地spasm |x populateBean yy从容器中获取y调用getBean(y)false:返回Y beanaa 完成属性的注入最后走完生命周期put到单例池也就是容器\u003c\u003c true?创建X开始Y的生命周期y走到Y的属性注入周期yy populateBean xY从容器中获取x调用getBean(x)false? 一人",
  "assets/20200320163024206-20230402223246-d0zvzfg.png": "JM NO \u003c\u003c true? false? 一FEAR走利下的生命周期直到走完所有生命周期，返回y给xX完成属性注入，x接着走其他生命周期，x走完，结束",
  "assets/20200320163708728-20230402223248-su2vjsp.png": "在spring初始化bean的时候判断bean是否在容器当时十总结一下object sharedInstance = getSingleton(beanName); RAIA中; 以及供程序员直接get某个bean。注意笔者这里用了月前这个词; 因为getSingleton(beanName);这个方法代码比较多; 他里面的逻辑是实现循环依赖最主要的代码，文章下面我会回过头再来讲这个方法的全部意义;",
  "assets/20200320170222591-20230402223248-fdgsgri.png": "singletonFactories二级缓存map k-v作者-shadow244854192singletonObjects一级缓存map k-vearlySingletonObjects三级缓存map k-v这个一级缓存可能存在其他的bean，比如spring内置的一些bean，比如你项目其他已经创建好的bean但是一定没有x和Y，因为x还在创建过程",
  "assets/20200320174140426-20230402223248-keouwqb.png": "@Nullableprotected Object getSingleton(String beanName, boolean allowEarlyReference) {JDM (RAE) 中直接拿，也就是文章里面' 目前' 的解释//这也是为什么getBean (\"xx\") 能获取一个初始化好bean的根本代码Object singletonObject = this.singletonObjects.get (beanName) ;//如果这个时候是x注入y，创建Y，Y注入x，获取x的时候那么x不在容器//第一个singletonobject == null Ay//第二个条件判断是否存在正在创建bean的集合当中，前面我们分析过，成立//进入if分支if (singletonObject == null \u0026\u0026 isSingletonCurrentlyInCreation(beanName)) {synchronized (this.singletonObjects) {//先从三级缓存那x? IE TED BRAT SE? 下文解释singletonObject = this earlySingletonObjects .get (beanName) ;//讲道理是介不到的，因为这三个map现在只有二级缓存中存了一个工厂对象//回顾一下文章上面的流程讲工厂对象那里，把他存到了二级缓存//所以三级缓存拿到的singletonobject==null 第一个条件成立//第二个条件allowEarlyReference=true，这个前文有解释//就是spring循环依赖的开关，默认为true 进入if分支if (singletonObject == null \u0026\u0026 allowEarlyReference) {|//从二级缓存中获取一个singletonFactory，回顾前文，能获取到//由于这里的beanName=x，故而获取出来的工厂对象，能产生一个x半成品beanObjectFactory\u003c?\u003e singletonFactory = this.singletonFactories.get (beanName) ;//由于获取到了，进入if分支if (singletonFactory != null) {//调用工厂对象的getobject () 方法，产生一个x的半成品bean//怎么产生的? 下文解释，比较复杂singletonObject = singletonFactory.getObject ()//辣到了半成品的xbean之后，把他放到三级缓存; 为什么? 下文解释this.earlySingletonObjects.put (beanName, singletonObject) ;//然后从二级缓存清除掉x的工厂对象; ? 为什么，下文解释this.singletonFactories. remove (beanName) ;}}return singletonObject;",
  "assets/20200405164246441-20230330185152-7m21kdd.png": "@Target (ElementType. TYPE)@Retention (RetentionPolicy. RUNTIME)@ocumented@Inherited@AutoConfigurationPackagepublic @interface EnableAutoConfiguration {https://blog.csdn.net/qq_36882793td tnnanf€ionwatinnCteing FNARTEN NVERPINE DRNDFRTY",
  "assets/20200405164246441-20230331090350-ebxcim3.png": "@Target (ElementType. TYPE)@Retention (RetentionPolicy. RUNTIME)@ocumented@Inherited@AutoConfigurationPackagepublic @interface EnableAutoConfiguration {https://blog.csdn.net/qq_36882793td tnnanf€ionwatinnCteing FNARTEN NVERPINE DRNDFRTY",
  "assets/20200405171259195-20230330185153-c8u10ls.png": "ISOSpringBootApplicationjava 二SpringFactoriesLoaderjava * @ EnableAutoConfigurationjava * @ AutoConfigurationImportssorg. springframework. context. ApplicationListener=\\8 org. springframework. boot. autoconfigure. BackgroundPreinitializer10 # Auto Configuration Import Listeners11 org. springframework. boot. autoconfigure. AutoConfigurationImportListener=\\12 org. Springframework. boot. autoconfigure. condition. ConditionEvaluationReportAutoConfigurationImportListener114 # Auto Configuration Import Filters15 org. springframework. boot. autoconfigure. AutoConfigurationImportFilter=\\\\ 可以看到在spring .factories 中是键值对形式保存。key 是@EnableAutoConfiguration全路径名;org, springfranework. boot. autoconfigure, condition. OnClassCondition, Value 是需要加载的配置类年四CA16 org. Springframework. boot. autoconfigure. condition. OnBeanCondition18 org. springframework. boot. autoconfigure. condition. OnWebApplicationCondition20 # Auto Configure22 org. springframework. boot. autoconfigure. admin. SpringApplicationAdminJmxAutoConfiguration, \\2 org. springframework. boot. autoconfigure. aop. AopAutoConfiguration, \\24 org. Springframework. boot. autoconfigure. amqp. RabbitAutoConfiguration, \\25 org. Springframework. boot. autoconfigure. batch. BatchAutoConfiguration, \\org. Springframework. boot. autoconfigure. cache. CacheAutoConfiguration, \\27 org. springframework. boot. autoconfigure. cassandra. CassandraAutoConfiguration, \\28 org. springframework. boot. autoconfigure. cloud. CloudServiceConnectorsAutoConfiguration, \\29 org. springframework. boot. autoconfigure. context. ConfigurationPropertiesAutoConfiguration, \\0 org. springframework. boot. autoconfigure. context. MessageSourceAutoConfiguration, \\ https://blog.csdn.net/qq_36882793",
  "assets/20200405171259195-20230331090349-knb361b.png": "ISOSpringBootApplicationjava 二SpringFactoriesLoaderjava * @ EnableAutoConfigurationjava * @ AutoConfigurationImportssorg. springframework. context. ApplicationListener=\\8 org. springframework. boot. autoconfigure. BackgroundPreinitializer10 # Auto Configuration Import Listeners11 org. springframework. boot. autoconfigure. AutoConfigurationImportListener=\\12 org. Springframework. boot. autoconfigure. condition. ConditionEvaluationReportAutoConfigurationImportListener114 # Auto Configuration Import Filters15 org. springframework. boot. autoconfigure. AutoConfigurationImportFilter=\\\\ 可以看到在spring .factories 中是键值对形式保存。key 是@EnableAutoConfiguration全路径名;org, springfranework. boot. autoconfigure, condition. OnClassCondition, Value 是需要加载的配置类年四CA16 org. Springframework. boot. autoconfigure. condition. OnBeanCondition18 org. springframework. boot. autoconfigure. condition. OnWebApplicationCondition20 # Auto Configure22 org. springframework. boot. autoconfigure. admin. SpringApplicationAdminJmxAutoConfiguration, \\2 org. springframework. boot. autoconfigure. aop. AopAutoConfiguration, \\24 org. Springframework. boot. autoconfigure. amqp. RabbitAutoConfiguration, \\25 org. Springframework. boot. autoconfigure. batch. BatchAutoConfiguration, \\org. Springframework. boot. autoconfigure. cache. CacheAutoConfiguration, \\27 org. springframework. boot. autoconfigure. cassandra. CassandraAutoConfiguration, \\28 org. springframework. boot. autoconfigure. cloud. CloudServiceConnectorsAutoConfiguration, \\29 org. springframework. boot. autoconfigure. context. ConfigurationPropertiesAutoConfiguration, \\0 org. springframework. boot. autoconfigure. context. MessageSourceAutoConfiguration, \\ https://blog.csdn.net/qq_36882793",
  "assets/20200405172626758-20230330185153-ydqt5bc.png": "119 ii af20 @O121 String factoryTypeName = factoryType. getName () ;ertpublic static List\u003cString\u003e loadFactoryNames(Class\u003c?\u003e factoryType, @Nullable ClassLoader classLoader) { factoryType:123根据factoryIypeName的值作为key获取Springfactories文件中的alueprivate static Map\u003cSt:s(@Nllable ClassLoader classLoader) {加载spring. factories文件MultiValueMap\u003cString，String\u003e 1t = he. get (classLoad 3iValuellap String, String\u003e result = cache. get (ClassLoader) 避Map类型if (result != null) {ng\u003e\u003e loadSpringFacto:g, List\u003cSt:= SpringFatoriesLoader \u003e loadFactoryNames()Variables+ \u003e @ static members of SpringFactoriesLoader value值是对应的启动注解的全路径名Navigatehttps://blog.csdn.net/qq_36882793",
  "assets/20200405172626758-20230331090350-djnk9mf.png": "119 ii af20 @O121 String factoryTypeName = factoryType. getName () ;ertpublic static List\u003cString\u003e loadFactoryNames(Class\u003c?\u003e factoryType, @Nullable ClassLoader classLoader) { factoryType:123根据factoryIypeName的值作为key获取Springfactories文件中的alueprivate static Map\u003cSt:s(@Nllable ClassLoader classLoader) {加载spring. factories文件MultiValueMap\u003cString，String\u003e 1t = he. get (classLoad 3iValuellap String, String\u003e result = cache. get (ClassLoader) 避Map类型if (result != null) {ng\u003e\u003e loadSpringFacto:g, List\u003cSt:= SpringFatoriesLoader \u003e loadFactoryNames()Variables+ \u003e @ static members of SpringFactoriesLoader value值是对应的启动注解的全路径名Navigatehttps://blog.csdn.net/qq_36882793",
  "assets/20200405173559450-20230330185152-16vlhtm.png": "import com. kingfish. annotation. EnableDemo;4 import org. springframework. boot. SpringApplication;import org. springframework. boot. autoconfigure. SpringBootApplication;2 QQ —pringBootApplication9%G P| | public class DemoApplication {1 DP public static void main(String] args) {1 SpringApplication. rum(DemoApplication. class, args) ;DemoApplicationRun: — «@ DemoApplication (1) \u003e Console yy Endpoints2020-04-05 17:35:34. 439 INFO 1628 一- [INFO 1628 -一[INFO 1628 -一[INFO 1628 -一[INFO 1628 -一[main] o. a. c. c.C. [Tomcat]. [localhost]. [/]2020-04-05 17:35:34. 439 main] o. s. web. context. ContextLoader2020-04-05 17:35:34. 557 main] o. s. s. concurrent. ThreadPoolTaskExecutor2020-04-05 17:35:34. 671 main] o. s.b. w. embedded. tomcat. TomcatWebServerGaLO]a|2020-04-05 17:35:34. 674 main] com. kingfish. DemoApplicationa 2 ul: Initializing Spring embedded WebApplicationC:: Root WebApplicationContext: initialization ci: Initializing ExecutorService ’ applicationTas|: Tomcat started on port(s): 8080 (http) with |: Started DemoApplication in 1.407 seconds (JVhttps://blog.csdn.net/qq_36882793",
  "assets/20200405173559450-20230331090350-it2vwks.png": "import com. kingfish. annotation. EnableDemo;4 import org. springframework. boot. SpringApplication;import org. springframework. boot. autoconfigure. SpringBootApplication;2 QQ —pringBootApplication9%G P| | public class DemoApplication {1 DP public static void main(String] args) {1 SpringApplication. rum(DemoApplication. class, args) ;DemoApplicationRun: — «@ DemoApplication (1) \u003e Console yy Endpoints2020-04-05 17:35:34. 439 INFO 1628 一- [INFO 1628 -一[INFO 1628 -一[INFO 1628 -一[INFO 1628 -一[main] o. a. c. c.C. [Tomcat]. [localhost]. [/]2020-04-05 17:35:34. 439 main] o. s. web. context. ContextLoader2020-04-05 17:35:34. 557 main] o. s. s. concurrent. ThreadPoolTaskExecutor2020-04-05 17:35:34. 671 main] o. s.b. w. embedded. tomcat. TomcatWebServerGaLO]a|2020-04-05 17:35:34. 674 main] com. kingfish. DemoApplicationa 2 ul: Initializing Spring embedded WebApplicationC:: Root WebApplicationContext: initialization ci: Initializing ExecutorService ’ applicationTas|: Tomcat started on port(s): 8080 (http) with |: Started DemoApplication in 1.407 seconds (JVhttps://blog.csdn.net/qq_36882793",
  "assets/20200412111748705-20230331084946-c5rrl6l.png": "IstoryClear all Save Responses~ Todayjocalhost:8080/aop/hello?ms;cerdjocalhost:8080/aop/hello?ms;cerdjocalhost:8080/aop/hello?msg=wcerdSET —localhost:8080/aop/helloSET —localhost:8080/aop/helloYesterdayGet localhost8080/saylocalhost:8080/aop/hello?msg=worldGET Y _ localhost:8080/aop/hello?msg=worldParams @KEYBody (5)Pretty Auto31 hello worldJlVALUEDESCRIPTIONStatus: 200 OKTime: 130 msCookiesSize: 17Error in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/20200412113253347-20230331084946-ed9vu4p.png": "around beforebefore msg = helloafter msg = helloafterReturning msg = helld",
  "assets/20200414012636139-20230403004837-nlrnmyw.png": "1.什么是容器?2.什么是IOC?3.Spring中依赖注入的方式有哪些?4.Spring的基石BeanDefinition5.bean工厂后置处理器6.bean的后置处理器一全7什么是factoryBean?上| 8.Bean的生命周期9.ApplicationContext跟BeanFactory10.Spring中的类型转换11.Spring中的格式化12.Spring中的数据校验13.Spring中的数据绑定SpringFrameWork1.AOP的核心概念2.AOP的使用",
  "assets/20200425130630548-20230331082710-eo9k3zw.png": "public static void main(String[] args) {ConfigurableApplicationContext run = SpringApplication. run(BeanInitDemoApplication.Object demoFactoryBean = run. getBean( name: “demoFactoryBean”) ;Object bean = run. getBean( name: “\u0026demoFactoryBean”) ;BeanInitDemoApplication \u003e meinVariablesrp + O args = {String[0]@47¥2}(AnnotationConfigServietWebServerApplicationContext@4773} \"org.springframework.boot.web.senjemoFactoryBean = {DemoBean@4774}bean = {DemoFactoryBean@4775}v https://blog.csdn.net/qq_36882793",
  "assets/202004272126341-20230331090122-zcfwbrk.png": "但AbstractBealthrow new BeanCreationException (mbd. getResourceDescription(), be”+ beanName + ”’ depends on missing bean ’” + dep + ”// Create bean instance.if (mbd. isSingleton()) {sharedInstance = getSingleton(beanName, () -\u003e {try {return createBean(beanName, mbd, args) ;}catch (BeansException ex) {// Explicitly remove instance from singleton cache:|It might hay// eagerly by the creation process, to allow for cifcular refere// Also remove any beans that received a temporary feference todestroySingleton (beanName) ;throw ex;bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd) ;else if (mbd. isPrototype()) { https://blog.csdn.net/qq_36882793",
  "assets/20200427213750160-20230331090122-v9y6drb.png": "WOrK / Bi beans /~ iactoryY/ ” SUppOrt / \"e’ ADstractbeanractorynFactory.java \u003c Gj AbstractBeanFactor DefaultSingletonBeanRegistry.java *AbstractBeanDefirthrow new BeanCreationException (mbd. getResourceDescription(), beanNar”+ beanName + ”’ depends on missing bean” + dep +”, «// Create bean instance.if (mbd. isSingleton()) {sharedInstance = getSingleton(beanName, () -\u003e {try if1catch (BeansException ex)return createBean ( args)// Explicitly remove instanceNGKom singleton cache: It might have be:// eagerly by the creation procesSMto allow for circular reference :// Also remove any beans that received 9 HHT APE HEBESH PE the |destroySingleton (beanName) ;throw ex;Webean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd) ;else if (mbd. isPrototype()) {SERIES) § CHEESE P PD https:/blog.csdn.netiqq_36882793",
  "assets/2020050215014846-20230330142457-7ne62mo.png": ".bean. DemoBean \u003eblog.csdn.netiqq_36882793",
  "assets/2020050215014846-20230331090045-w47tx4s.png": ".bean. DemoBean \u003eblog.csdn.netiqq_36882793",
  "assets/20200510193917314-20230331090142-hyrlfnr.png": "| springframework ) Bll beans ) 四factory ) 四supportctBeanFactory.java * (@j AbstractBeanDefinitionjava 关el ty* @see #autowireConstructort doCreateBean (final ytring beanName, final RootBeanDefinition mbd, final @Nullable Object“/// Instantiate the bean.(Gy AbstractAutowireCapableBeanFactory.java * | BeanWrapperjava * Inst(|) Match Case [| Words (| Regex ?protected 0bjdthrow:BeanWrapper instanceWrapper = null;if (mbd. isSingleton()) 4|if (instanceWrapper == null) {instanceWrapper = this. factoryBeanInstanceCache. remove (beanName) ;instancellrapper = createBeanInstance(beanName, mbd, args)}final Object bean = instancellrapper. getWrappedInstance() ;Class\u003c?\u003e beanType = instancellrapper. getWrappedClass () ;if (beanType != NullBean. class) {mbd. resolvedTargetType = beanType;// Allow post-processors to modify the merged bean definition.synchronized (mbd. postProcessingLock) {if (!mbd. postProcessed) {try {、 https:/blog.csdn.netiqq_36882793",
  "assets/20200516130017150-20230331082722-sy0mzm1.png": "te wseeThe dependencies of some of the beans in the application context form a cycle:一一一一| ACircular defined in file [D:\\WorkSpace\\spring-demo\\springboot-demo\\target\\classes \\com\\kingfish\\springbootdemo\\circular\\ACircular. class]t 上| BCircular defined in file [D:\\WorkSpace\\spring-demo\\springboot—demo\\target\\classes\\com\\kingfish\\springbootdemo\\circular\\BCircular. class]https://blog.csdn.net/qq_36882793",
  "assets/2020051613213741-20230331082722-4zymy0r.png": "",
  "assets/20200516230641191-20230331090122-3avp9z7.png": "从组存中获取bean(this.singletonObjects.get(beanName};)检测bean是否|记录bean正在创建beforeSingletonCreation(beanName)v调用ObjectFactory HYBRBbeansingletonFactory.getObject0里移除bean的=afterSingletonCreation由处理各种辅助状态addSingleton(beanName, singletonObject)lbean1. inCreationCheckExclusions 中不包含beanName2. %§ beanName 添加到singletonsCurrentlylnCreation 中成功3. REED LRSM1. inCreationCheckExclusions 中不包含beanName2.咨beanName 物除到singletonsCurrentlylnCreation 中成功3. 不满足以上两条抛出异常1. singletonObjects 添加beanName2. singletonFactories 移除beanName3. earlySingletonObjects 移除beanName4, registeredSingletons 添jnbeanName",
  "assets/20200516231953570-20230331090122-1qt3aa2.png": "根据mdb和beanName 解析出ClassresolveBeanClass(mbd, beanName)y验证及准备要差的方法mbdToUse.prepareMethodOverrides0;里调用后处理器的方法resolveBeforelnstantiation(beanName,mbdToUse)里开始真正创建的beandoCreateBean(beanName, mbdToUse args)返回bean一1, InstantiationAwareBeanPostProcessor.postProcessBeforelnstantiation2. 佑第一步获取的bean不为宝，则调用BeanPostProcessor.postProcessAfternitialization",
  "assets/20200517182739439-20230331082733-kn0k10i.png": "method = public java. lang. String com. kingfish. springbootdemo. property. DemoA. hello()reimplementcom. kingfish. springbootdemo. property. DemoC@4al 63575",
  "assets/20200517183626254-20230331082733-n4k4wox.png": "ae SP ~ SS EE aenework ) Ea beans ) Bll factory ) Bl support ) (G) AbstractBeanDefinitionXml x (Gi AbstractBeanDefinitionjava « (G4 AbstractBeanFactoryjava \u003c @ DemoB.java ” 人@ DemoMethodReplacerjava * (Gj AbstractAutowireCapableDrivate ConstructorArgumentValues constructorArgumentValues;@ullable2 private MutablePropertyValues propertyValues;4 private MethodOverrides method0verrides = new MethodOverrides() ;@ullableprivate String initMethodName;@ullableprivate String destroyMethodName ;2 private boolean enforceInitMethod = true;AbstractBeanDefinition » methodOverrideshttps://blog.csdn.net/qq_36882793",
  "assets/20200517220309366-20230331090142-r994scu.png": "十(@) getBean (String name) Object(®) getBean (Class\u003cT\u003e requiredType) 了(@) getBean (String name, Class\u003cT\u003e requiredType) 了(B) getBean (Class\u003cT\u003e requiredType, Object... arghtipsi/blog.csdn.netiqg_36882",
  "assets/2020051822044829-20230331082747-46poz95.png": "BeanPostProcessor@ ® postProcessBeforelnitialization(Object, String) Object@ ® postProcessAfterinitialization(Object, String) ObjectInstantiationAwareBeanPostProcessor@ ® postProcessBeforelnstantiation(Class\u003c?\u003e, String) Object@ ® postProcessAfterinstantiation(Object, String) boolean@ ®\u0026 postProcessProperties(PropertyValues, Object, String) PropertyValues[mJ i ing) PropertyValuesSmart InstantiationAwareBeanPostProcessorpredictBeanType(Class\u003c?\u003e, String) Class\u003c?\u003edetermineCandidateConstructors(Class\u003c?\u003e, String) Constructor\u003c?\u003e[]日日日getEarlyBeanReference(Object String) Objecthttps://blog.csdn.net/qq_36882793",
  "assets/20200518221140881-20230331082747-pnsoqqk.png": "noHGSTPTOCeSSET. postProcessProperties #87 3DemoPostProcesser. postProcessBeforelnitialization ### 5DemoPostProcesser. postProcessAfterInitialization ### 6DemoPostProcesser. postProcessBeforeInstantiation ### 1DemoPostProcesser. postProcessAfterInstantiation ### 2DemoPostProcesser. postProcessProperties ### 3DemoPostProcesser. postProcessBeforelnitialization ### 5DemoPostProcesser. postProcessAfterInitialization ### 6DemoPostProcesser. postProcessBeforeInstantiation ### 1DemoPostProcesser. postProcessAfterInstantiation ### 2DemoPostProcesser. postProcessProperties ### 3DemoPostProcesser. postProcessBeforelnitialization ### 5DemoPostProcesser. postProcessAfterInitialization ### 6DemoPostProcesser. postProcessBeforeInstantiationDemoPostProcesser. postProcessAfterInstantiationDemoPostProcesser. postProcessProperties ### 3DemoPostProcesser. postProcessBeforelnitialization ### 5DemoPostProcesser. postProcessAfterInitialization ### 6https://blog.csdn.netqq_368827939090-05-18 99:11:18 912 TNFO 8048 一| main) o \u003c hw embedded tomcat TomcatWehServer -\u003c Tomcat eta:",
  "assets/20200520211304257-20230331082746-5vqb3yl.png": "BP: BeanPostProcessorIABP : InstantiationAwareBeanPostProcessorSBP : SmartinstantiationAwareBeanPostProcessorAbstractAutowireCapableBeanFactory#createBeanresolveBeforelnstantiation1bean = applyBeanPostProcessorsBeforelnstantiationiY vdoCreateBean了createBeanlnstance由了populateBeanVinitializeBean",
  "assets/20200521215850363-20230331090142-psxg8yc.png": "®) Evaluate xExpression:4 aeUse Ctrl+Shift+Enter to add to WatchesResult:00 result = (ConstructorArgumentValues@5324}Y © indexedArgumentValues = {LinkedHashMap@5328} size = 2ey = {Integer@5334} 0\u003e = value = {ConstructorArgumentValues$ValueHolder@5335}了\u0026 (integer@5336} 1 -\u003e {ConstructorArgumentValues$ValueHolder@5337}\u003e 5 key = {Integer@5336} 1alue = {ConstructorArgumentValues$ValueHolder@5337}Y ® genericArgumentValues = (Arraylist@5329} size = 1\u003e © 0 = {ConstructorArgumentValues$ValueHolder@5339}https AfXBIWER netigg_ Si880793",
  "assets/20200523082537145-20230403004837-o4gwg6m.jpg": "",
  "assets/20200523142807968-20230331084824-b9yu8h3.png": "",
  "assets/20200530133426965-20230329005244-nqvf5oy.png": "EEE .AutowiredAnnotationBeanPostProcessor.java \u003e|public void setRequiredParameterValue (boolean requiredParameterValue) {IM pom.xml (springboot-demo) * @ SpringbootDemoApplicationjava * @ UsernamePasswordAuthent222 this. requiredParameterValue = requiredParameterValue;221 public void setOrder(int order) { this. order = order; }22 @0verride30 Of public int getOrder() { return this. order; }235 Of @ public void setBeanFactory (BeanFactory beanFactory) {2 if (! (beanFactory_instanceof ConfigurableListableBeanFactory)) {throw new I1legalArgumentException (2 “AutowiredAnnotationBeanPostProcessor requires a ConfigurableListableBeanFactory: ”+ beanFactory) ;2 }24 this. beanFactory = (ConfigurableListableBeanFactory) beanFactory;https://blog.csdn.net/qq_36882793Error in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/20200530133426965-20230331090225-lbcf2fv.png": "EEE .AutowiredAnnotationBeanPostProcessor.java \u003e|public void setRequiredParameterValue (boolean requiredParameterValue) {IM pom.xml (springboot-demo) * @ SpringbootDemoApplicationjava * @ UsernamePasswordAuthent222 this. requiredParameterValue = requiredParameterValue;221 public void setOrder(int order) { this. order = order; }22 @0verride30 Of public int getOrder() { return this. order; }235 Of @ public void setBeanFactory (BeanFactory beanFactory) {2 if (! (beanFactory_instanceof ConfigurableListableBeanFactory)) {throw new I1legalArgumentException (2 “AutowiredAnnotationBeanPostProcessor requires a ConfigurableListableBeanFactory: ”+ beanFactory) ;2 }24 this. beanFactory = (ConfigurableListableBeanFactory) beanFactory;https://blog.csdn.net/qq_36882793Error in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/20200604201728662-20230330141615-e9mc2o3.png": " 几个名词的缩写(方便画图)BF: BeanFactoryBDR : BeanDefinitionRegistryBFPP : BeanFactoryPostProcessorBDRPP : BeanDefinitionRegistryPostProcessormABF instance BDRy筛选出硬编码中的BDRPP执行|BDRPP.postprocessBeanDefinitionRegistry¥用所有查找配置注入的BDRPP 按照PriorityOrdered、Ordered, No-Order 的顺序过淹、排序、激活BeaBFPP.postProcessBeanFactoryy33 FARRIS ANB FPP. postProcessBeanFactoryA法获取配置注入的后处理器，过淖出前面处理过的处一| B35, l€PriorityOrdered, Ordered, No-Order 的顺序过滤、排序、激活",
  "assets/20200604201728662-20230331090032-078femr.png": " 几个名词的缩写(方便画图)BF: BeanFactoryBDR : BeanDefinitionRegistryBFPP : BeanFactoryPostProcessorBDRPP : BeanDefinitionRegistryPostProcessormABF instance BDRy筛选出硬编码中的BDRPP执行|BDRPP.postprocessBeanDefinitionRegistry¥用所有查找配置注入的BDRPP 按照PriorityOrdered、Ordered, No-Order 的顺序过淹、排序、激活BeaBFPP.postProcessBeanFactoryy33 FARRIS ANB FPP. postProcessBeanFactoryA法获取配置注入的后处理器，过淖出前面处理过的处一| B35, l€PriorityOrdered, Ordered, No-Order 的顺序过滤、排序、激活",
  "assets/20200604201806402-20230330135254-xqxug53.png": "https://blog.csdn.net/qq_36882793",
  "assets/20200604201806402-20230331090032-7b2aa5a.png": "https://blog.csdn.net/qq_36882793",
  "assets/2020060422012362-20230331084833-law75t4.png": "2020-06-04 21:59:14.595 INFO 14844 一- [ main] . s. s. UserDetailsServiceAutoConfiguration :Using generated security password: db66265f-731d-4398-Sef6—ed0d604884192020-06-04 21:59:14. 714 INFO 14844 一- [ main] o. s. s. web. Defaul tSecurityFilterChain : Cx2020-06-04 21:59:14. 760 INFO 14844 一- [ main] o. s.b.w. embedded. tomcat. TomcatWebServer : Te2020-06-04 21:59:14. 762 INFO 14844 一- [ main] c.k. s. SpringbootDemoApplication : Stmsghttps:/blog.csdn.netqq_36882793Error in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/2020060614111844-20230331084853-6eonv1e.png": "https://blog.csdn.net/qq_36882793",
  "assets/2020060614111844-20230331084932-tpkldf1.png": "https://blog.csdn.net/qq_36882793",
  "assets/202006101952371-20230331084932-npzne98.png": "2020-06-10 19:52:26.661 INFO 21272 一[ main] org. apache. catalina. core. StandardEngine : Starting Servlet e2020-06-10 19:226.735 INFO 21272 -一[ main] o. a. c. c.C. [Tomcat]. [localhost]. [/] : Initializing Sprin2020-06-10 19:52:26. 735 INFO 21272 —~ [ main] 0. s. web. context. ContextLoader : Root WebApplicatio: com. kingfish. springbootdemo. server. imp]. DemoServicelmp] @2ef8a8c3lemoController2222 : com. kingfish. springbootdemo. server. imp]. DemoServicelmp]@2ef8a8c32020-06-10 19:52:27.023 INFO 21272 一[ main] o.s.s. concurrent. ThreadPoolTaskExecutor : Initializing Execu2020-06-10 127.221 INFO 21272 — [ main] .s.s.UserDetailsServiceAutoConfiguration :https://blog.csdn.net/qq_36882793",
  "assets/20200613132256676-20230330184927-rn9zlx9.png": "转Project w © = \u0026 —* M pom.xml (spring-jdbc-demo) * @ MybatisAutoConfiguration.java 大spring.factories * @ MybatisLanguV Bil Maven: org.mybatis.spring.boot:mybatis-spring-boot-autoconfigure:2.1.3 # Auto ConfigureY [A mybatis-spring-boot-autoconfigure-2.1.3,jar library root . . . .org. springframework. boot. autoconfigure. EnableAutoConfiguration=\\Y Bq META-INF\u003e By maven org. mybatis. spring. boot. autoconfigure. MybatisLanguageDriverAutoConfiguration, \\‘@additional-spring-configuration-metadata,json org. mybatis. spring. boot. autoconfigur ybatistutoContiguratior| MANIFEST.MF s.rfa Spring-autocontiguré-metadata.propertiesi spring-configuration-metadata.jsonv 中orgY BymybatisY By springY BybootY By autoconfigure‘4 ConfigurationCustomizerMybatisLanguageDriverAutoConfiguration(Q MybatisPropertiesQ SpringBootVFS\u003e ili Maven: org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.3\u003e Bij Maven: org.mybatis:mybatis:3.5.5 httpsi/blog.csdn.netqq_36882793",
  "assets/20200613132256676-20230331090321-7soj4v7.png": "转Project w © = \u0026 —* M pom.xml (spring-jdbc-demo) * @ MybatisAutoConfiguration.java 大spring.factories * @ MybatisLanguV Bil Maven: org.mybatis.spring.boot:mybatis-spring-boot-autoconfigure:2.1.3 # Auto ConfigureY [A mybatis-spring-boot-autoconfigure-2.1.3,jar library root . . . .org. springframework. boot. autoconfigure. EnableAutoConfiguration=\\Y Bq META-INF\u003e By maven org. mybatis. spring. boot. autoconfigure. MybatisLanguageDriverAutoConfiguration, \\‘@additional-spring-configuration-metadata,json org. mybatis. spring. boot. autoconfigur ybatistutoContiguratior| MANIFEST.MF s.rfa Spring-autocontiguré-metadata.propertiesi spring-configuration-metadata.jsonv 中orgY BymybatisY By springY BybootY By autoconfigure‘4 ConfigurationCustomizerMybatisLanguageDriverAutoConfiguration(Q MybatisPropertiesQ SpringBootVFS\u003e ili Maven: org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.3\u003e Bij Maven: org.mybatis:mybatis:3.5.5 httpsi/blog.csdn.netqq_36882793",
  "assets/20200613143238665-20230330184927-d6ia6ud.png": "sources | 吧application.yml@ SalSessionFactoryBeanjava * @ MybatisProperties.java \u003c ¢@ application.ym ~:server!port: 8080mybatis:configuration:use-generated-keys: trueuse-column-label: truemap-underscore-to-camel-case: truev17 4 mybatis-config.xml\u003c?xml version=\"1.0\" encoding=\"UIF-8” ?\u003e9@0EGePUBLIC“-//mybatis. org//DTD Config 3.0//EN”“http: //mybatis. org/dtd/mybatis-3-config. dtd “\u003e“!-- 配置文件的根元素--\u003e\u003c!DOCTYPE configuration\u003cconfiguration\u003e\u003csettings\u003e\u003c!--使用jdbc的getGeneratedKeys获取数据库自增主键值--\u003e《setting name= \"useGeneratedKeys”value= true\"/\u003e\u003c!--使用列标签苦换列别名默认未true--\u003e\u003csetting name=\"useColumnLabel” value=\"true” /\u003e\u003c!--开启驼峰式命名转换:Table{fcreate_time} -\u003e Entity{createfim\u003csetting name=\"mapUnderscoreToCamelCase” value=\"true” /\u003e\u003c/configuration\u003e https://blog.csdn.net/qq_36882793",
  "assets/20200613143238665-20230331090320-0q9pkbf.png": "sources | 吧application.yml@ SalSessionFactoryBeanjava * @ MybatisProperties.java \u003c ¢@ application.ym ~:server!port: 8080mybatis:configuration:use-generated-keys: trueuse-column-label: truemap-underscore-to-camel-case: truev17 4 mybatis-config.xml\u003c?xml version=\"1.0\" encoding=\"UIF-8” ?\u003e9@0EGePUBLIC“-//mybatis. org//DTD Config 3.0//EN”“http: //mybatis. org/dtd/mybatis-3-config. dtd “\u003e“!-- 配置文件的根元素--\u003e\u003c!DOCTYPE configuration\u003cconfiguration\u003e\u003csettings\u003e\u003c!--使用jdbc的getGeneratedKeys获取数据库自增主键值--\u003e《setting name= \"useGeneratedKeys”value= true\"/\u003e\u003c!--使用列标签苦换列别名默认未true--\u003e\u003csetting name=\"useColumnLabel” value=\"true” /\u003e\u003c!--开启驼峰式命名转换:Table{fcreate_time} -\u003e Entity{createfim\u003csetting name=\"mapUnderscoreToCamelCase” value=\"true” /\u003e\u003c/configuration\u003e https://blog.csdn.net/qq_36882793",
  "assets/2020061315061062-20230330184928-ct5h2hc.png": "https://blog.csdn.net/qq_36882793",
  "assets/2020061315061062-20230331090320-rqsk1o3.png": "https://blog.csdn.net/qq_36882793",
  "assets/2020061316555275-20230330184927-zg4hiq5.png": "https://blog.csdn.net/qq_36882793",
  "assets/2020061316555275-20230331090320-kiajppj.png": "https://blog.csdn.net/qq_36882793",
  "assets/20200614132949768-20230331081736-mrsosta.png": "https://blog.csdn.net/qq_36882793",
  "assets/20200614132949768-20230331090526-lgz80vf.png": "https://blog.csdn.net/qq_36882793",
  "assets/20200614133620507-20230331081736-c5briwh.png": "https://blog.csdn.net/qq_36882793",
  "assets/20200614133620507-20230331090526-dm7mzi5.png": "https://blog.csdn.net/qq_36882793",
  "assets/20200614135249434-20230331081520-o7ew1qj.png": "https://blog.csdn.net/qq_36882793",
  "assets/20200614135249434-20230331090403-68w6vul.png": "https://blog.csdn.net/qq_36882793",
  "assets/20200614141008146-20230331081520-gnwaqo7.png": "外ja Powered by yFiles https://blog.csdn.net/qq_36882793Error in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/20200614141008146-20230331090403-kz4wft1.png": "外ja Powered by yFiles https://blog.csdn.net/qq_36882793Error in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/20200614165603225-20230331081737-lso3mwj.png": "https://blog.csdn.net/qq_36882793",
  "assets/20200614165603225-20230331090526-lr4lbnw.png": "https://blog.csdn.net/qq_36882793",
  "assets/20200630184338393-20230330185152-1a1vgyv.png": "# Auto Configureorg. springframework. boot. autoconfigure. EnableAutoConfiguration=\\org. mybatis. spring. boot. autoconfigure. MybatisLanguageDriverAutoConfiguration, \\org. mybatis. spring. boot. autoconfigure. MybatisAutoConfigurationhttps://blog.csdn.net/qq_36882793",
  "assets/20200630184338393-20230331090350-jlafo63.png": "# Auto Configureorg. springframework. boot. autoconfigure. EnableAutoConfiguration=\\org. mybatis. spring. boot. autoconfigure. MybatisLanguageDriverAutoConfiguration, \\org. mybatis. spring. boot. autoconfigure. MybatisAutoConfigurationhttps://blog.csdn.net/qq_36882793",
  "assets/20200701190109867-20230331081615-yky8n9n.png": "Configuration (proxyBeanMethods = false)@Role (BeanDefinition. ROLE_INFRASTRUCTURE)public class ProxyTransactionManagementConfiguration extends AbstractTransactionManagementConfiguration {@Bean (name = TransactionManagementConfigUtils. TRANSACTION_ADVISOR_BEAN_NAME)@Role (BeanDefinition. ROLE_INFRASTRUCTURE)public BeanFactoryTransactionAttributeSourceAdvisor transactionAdvisor (TransactionAttributeSource transactionAttributeSource, TransactionInterceptor transactionInterceptor) {BeanFactoryTransactionAttributeSourceAdvisor advisor = new BeanFactoryTransactionAttributeSourceAdvisor () ;advisor. setTransactionAttributeSource (transactionAttributeSource) ;advisor. setAdvice (transactionInterceptor) ;if (this. enableTx != null) {advisor. setOrder (this. enableTx. \u003egetNumber( attributeName: “order”)) ;}return advisor;https://blog.csdn.net/qq_36882793",
  "assets/20200701190109867-20230331090430-o8hl29a.png": "Configuration (proxyBeanMethods = false)@Role (BeanDefinition. ROLE_INFRASTRUCTURE)public class ProxyTransactionManagementConfiguration extends AbstractTransactionManagementConfiguration {@Bean (name = TransactionManagementConfigUtils. TRANSACTION_ADVISOR_BEAN_NAME)@Role (BeanDefinition. ROLE_INFRASTRUCTURE)public BeanFactoryTransactionAttributeSourceAdvisor transactionAdvisor (TransactionAttributeSource transactionAttributeSource, TransactionInterceptor transactionInterceptor) {BeanFactoryTransactionAttributeSourceAdvisor advisor = new BeanFactoryTransactionAttributeSourceAdvisor () ;advisor. setTransactionAttributeSource (transactionAttributeSource) ;advisor. setAdvice (transactionInterceptor) ;if (this. enableTx != null) {advisor. setOrder (this. enableTx. \u003egetNumber( attributeName: “order”)) ;}return advisor;https://blog.csdn.net/qq_36882793",
  "assets/20200702230415906-20230331084946-d7swbk7.png": "DemoBeforeAdvice. beforehello 124DemoAfterReturnAdvice. afterReturning",
  "assets/20200702231857712-20230331084946-42t54q8.png": "https://blog.csdn.net/qq_36882793",
  "assets/20200704113413855-20230331084824-41qy0hi.png": "eee ee SE ET了@ demoService = {DemoServicelmp|@5249}\u003e» @msg=",
  "assets/20200704181744291-20230331081736-6wq3k7e.png": "1. Spring Aop 和Aspect) 的关系2. @Apsect 的启用- @EnableAspecUAutoproxy、 AspectiAutoProxyRegistrar、AnnotationAwareAspectJAutoProxyCreator|, AbstractAutoProxyCreator1. 是否跳过代理1.1. isinfrastructureClass(beanClass)1.2. shouldSkip(beanClass, beanName)2. AbstractAutoProxyCreator#wraplfNecessary2.1, 获取代理增强点- getAdvicesAndAdvisorsForBean2.2. 创建代理类- createProxy2.2.1. buildAdvisors(beanName, specificinterceptors);2.2.2. proxyFactory.getProxy(getProxyClassLoader());2.2.2.1 createAopProxy()2.2.2.2 getProxy(classLoader)",
  "assets/20200704181744291-20230331090525-ca9g8yq.png": "1. Spring Aop 和Aspect) 的关系2. @Apsect 的启用- @EnableAspecUAutoproxy、 AspectiAutoProxyRegistrar、AnnotationAwareAspectJAutoProxyCreator|, AbstractAutoProxyCreator1. 是否跳过代理1.1. isinfrastructureClass(beanClass)1.2. shouldSkip(beanClass, beanName)2. AbstractAutoProxyCreator#wraplfNecessary2.1, 获取代理增强点- getAdvicesAndAdvisorsForBean2.2. 创建代理类- createProxy2.2.1. buildAdvisors(beanName, specificinterceptors);2.2.2. proxyFactory.getProxy(getProxyClassLoader());2.2.2.1 createAopProxy()2.2.2.2 getProxy(classLoader)",
  "assets/20200704182258112-20230331081736-f2l0giz.png": "indCandidateAdvisors2. thisaspectAdvisorsBuilder buildAspectAdvisors02.1. this.advisorFactory.getAdvisors(factory);2.1.1. 切点信息的获取- getPointcut2.1.2. 根据切点信息封装成增强器- InstantiationModelAwarePointcutAdvisorlmpl=, fe IEAVAdvisors - findAdvisorsThatCanApply",
  "assets/20200704182258112-20230331090526-eokd5pk.png": "indCandidateAdvisors2. thisaspectAdvisorsBuilder buildAspectAdvisors02.1. this.advisorFactory.getAdvisors(factory);2.1.1. 切点信息的获取- getPointcut2.1.2. 根据切点信息封装成增强器- InstantiationModelAwarePointcutAdvisorlmpl=, fe IEAVAdvisors - findAdvisorsThatCanApply",
  "assets/20200706181028512-20230331081630-kqgtvn0.png": "https://blog.csdn.net/qq_36882793",
  "assets/20200706181028512-20230331090450-ds37ohr.png": "https://blog.csdn.net/qq_36882793",
  "assets/20200712111825533-20230331081741-jx2zqa7.png": "esult:00 result = TransacionAspectsupporSTransactionnfo@6448 “PROPAGATION, REQUIRED ISOLATION, DEFAULTJavalang excepti\u003e © transactionManager = {DataSourceTransactionManager@6097}Y ® transactionattribute = {TransactionAspectSupport$1@6118} \"PROPAGATION REQUIRED, ISOLATION_DEFAULT, -java.lang.Exce\u003e © joinpointidentification = \"com-kingfish.springjdbcdemo.service.impl.UserServicelmpl.findAll\"\u003e @ this$0 = {Transactioninterceptor@6079}\u003e @ targetAttribute = (RuleBasedTransactionAttribute@6093} \"PROPAGATION_ REQUIRED, ISOLATION DEFAULT, -java.lang.Exce\u003e ©@ targetDefinition = (RuleBasedTransactionAttribute@6093} \"PROPAGATION_REQUIRED,|SOLATION_DEFAULT, -java.lang.Exce\u003e @ joinpointidentificatior\"com.kingfish.springjdbcdemo.service.impl.UserServicelmpl.findAll\"了@ transactionStatus = {DefaultTransactionStatus@6141}\u003e @ transaction = {DataSourceTransactionManager$DataSourceTransactionObject@6119}@ newTransaction = true@ newSynchronization = true@ readonly = false@ debug = false@ suspendedResources = null@ rollbackOnly = false@ completed = false@ savepoint = null@ oldTransactioninfo = nullhttps://blog.csdn.net/qq_36882793",
  "assets/20200712111825533-20230331090558-ovv7joz.png": "esult:00 result = TransacionAspectsupporSTransactionnfo@6448 “PROPAGATION, REQUIRED ISOLATION, DEFAULTJavalang excepti\u003e © transactionManager = {DataSourceTransactionManager@6097}Y ® transactionattribute = {TransactionAspectSupport$1@6118} \"PROPAGATION REQUIRED, ISOLATION_DEFAULT, -java.lang.Exce\u003e © joinpointidentification = \"com-kingfish.springjdbcdemo.service.impl.UserServicelmpl.findAll\"\u003e @ this$0 = {Transactioninterceptor@6079}\u003e @ targetAttribute = (RuleBasedTransactionAttribute@6093} \"PROPAGATION_ REQUIRED, ISOLATION DEFAULT, -java.lang.Exce\u003e ©@ targetDefinition = (RuleBasedTransactionAttribute@6093} \"PROPAGATION_REQUIRED,|SOLATION_DEFAULT, -java.lang.Exce\u003e @ joinpointidentificatior\"com.kingfish.springjdbcdemo.service.impl.UserServicelmpl.findAll\"了@ transactionStatus = {DefaultTransactionStatus@6141}\u003e @ transaction = {DataSourceTransactionManager$DataSourceTransactionObject@6119}@ newTransaction = true@ newSynchronization = true@ readonly = false@ debug = false@ suspendedResources = null@ rollbackOnly = false@ completed = false@ savepoint = null@ oldTransactioninfo = nullhttps://blog.csdn.net/qq_36882793",
  "assets/20200712141325245-20230331081741-5otffa8.png": "\u003e ® suspendedResources = {ConnectionHolder@6441}@ suspendedSynchronizations = {Collections$EmptyList@6439} size = 0\u003e @ name = \"com.kingfish.springjdbcdemo.service.UserProxyServicelmpl.findAll\"@ readOnly = false@ isolationLevel = null@ wasActive = truehttps://blog.csdn.net/qq_36882793",
  "assets/20200712141325245-20230331090558-kj23nek.png": "\u003e ® suspendedResources = {ConnectionHolder@6441}@ suspendedSynchronizations = {Collections$EmptyList@6439} size = 0\u003e @ name = \"com.kingfish.springjdbcdemo.service.UserProxyServicelmpl.findAll\"@ readOnly = false@ isolationLevel = null@ wasActive = truehttps://blog.csdn.net/qq_36882793",
  "assets/20200712141417889-20230331081741-ri79ij6.png": "\u003e @ transaction = {DataSourceTransactionManager$DataSourceTransactionObject@6418}@ newTransaction = true@ newSynchronization = true@ readonly = false@ debug = falseY @ suspendedResources = {AbstractPlatformTransactionManager$SuspendedResourcesHolder@6446}\u003e ® suspendedResources = {ConnectionHolder@6441}@ suspendedSynchronizations = {Collections$EmptyList@6439} size = 0\u003e @ name = \"com.kingfish.springjdbcdemo.service.UserProxyServicelmpl.findAll”@ readOnly = false@ isolationLevel = null@ wasActive = true@ rollbackOnly = false@ completed = false@ savepoint = nullhttps://blog.csdn.net/qq_36882793",
  "assets/20200712141417889-20230331090559-cwv9y6h.png": "\u003e @ transaction = {DataSourceTransactionManager$DataSourceTransactionObject@6418}@ newTransaction = true@ newSynchronization = true@ readonly = false@ debug = falseY @ suspendedResources = {AbstractPlatformTransactionManager$SuspendedResourcesHolder@6446}\u003e ® suspendedResources = {ConnectionHolder@6441}@ suspendedSynchronizations = {Collections$EmptyList@6439} size = 0\u003e @ name = \"com.kingfish.springjdbcdemo.service.UserProxyServicelmpl.findAll”@ readOnly = false@ isolationLevel = null@ wasActive = true@ rollbackOnly = false@ completed = false@ savepoint = nullhttps://blog.csdn.net/qq_36882793",
  "assets/20200714182035739-20230331081901-5eh6a32.png": "https://blog.csdn.net/qq_36882793",
  "assets/20200714182035739-20230331090654-d9loosu.png": "https://blog.csdn.net/qq_36882793",
  "assets/20200715212809413-20230331081844-n12hn8t.png": "https://blog.csdn.net/qq_36882793",
  "assets/20200715212809413-20230331090638-4wgcdc2.png": "https://blog.csdn.net/qq_36882793",
  "assets/2020071522223421-20230331081844-r0hbefc.png": "ContextLoaderproperties.6.RELEASE.jar ) Ell org ) Ea springframework » Bal web ) Bal context@® = \u0026 |— \u0026ContextLoader.properties «Y Bycontext # Default WebApplicationContext implementation class for ContextLoader.\u003e annotationa Used as fallback when no explicit context implementation has been specified as context-param.\u003e Byrequest\u003e By support Not meant to be customized by application developers.(Gy AbstractContextLoaderinitializer(@ ConfigurablewebApplicationConte:(@ ConfigurablewebEnvironmentContextCleanupListenerQ ContextLoaderorg. springframework. web. context. WebApplicationContext=org. springframework. web. context. support. XmlWebApplicationContextQ ContextLoaderListener@ package-info@ ServletConfigAware@ ServletContextAware(GQ WebApplicationContext| https://blog.csdn.net/qq_36882793",
  "assets/2020071522223421-20230331090638-6yjawmb.png": "ContextLoaderproperties.6.RELEASE.jar ) Ell org ) Ea springframework » Bal web ) Bal context@® = \u0026 |— \u0026ContextLoader.properties «Y Bycontext # Default WebApplicationContext implementation class for ContextLoader.\u003e annotationa Used as fallback when no explicit context implementation has been specified as context-param.\u003e Byrequest\u003e By support Not meant to be customized by application developers.(Gy AbstractContextLoaderinitializer(@ ConfigurablewebApplicationConte:(@ ConfigurablewebEnvironmentContextCleanupListenerQ ContextLoaderorg. springframework. web. context. WebApplicationContext=org. springframework. web. context. support. XmlWebApplicationContextQ ContextLoaderListener@ package-info@ ServletConfigAware@ ServletContextAware(GQ WebApplicationContext| https://blog.csdn.net/qq_36882793",
  "assets/2020072612595369-20230329115317-pczh6yd.png": "bean的创迁#createBean‘.postProcessBeforelnstaiion对条的实例化InstantiationAwareBeanPostProcessor5.postProcessAfterInstantiation6.postProcessProperties由2.determineCandidateConstructors\u003c4 3 postProcessMergedBeanDefinition —MergedBeanDefinitionPostProcessorhttps://blog.csdn.net/qq_35634181Bee初始化阶段分为两个过程:一: Sa beans initializingBeanizO, MitafterPropertiesSet方法，进行bean的初始化用bean定义的时候汇定的订始化方法先来看一下如何指定bean的初始化方法，3入方式方式1: xm方式指定初始化方法\u003cbean init-\"bean中方法名称\"/\u003e“放巡化的方法afterPropertiesseyp 一T.postProcessBeforelnitiali| |方式3: apis SASthis.beanDefinition.setInitMethodName(methodName);依次判断每一个bean是否实现了SmartlnitializingSingleton接口,如果是，则执行这个接口的afterSingletonsinstantiated 71d8.postProcessAfterInited |销毁4.getEarlyBeanReferenceSmartInstantiationAwareBeanPostProcessorBeanPostProcessor",
  "assets/20201014180756919-20230404005858-kvt70yy.png": "",
  "assets/20201014180756922-20230404012138-9oi3gf5.png": "",
  "assets/20201014180756922-20230404012245-pyotm32.png": "",
  "assets/20201021150941473-20230404010250-jruotyw.png": "Aprotected void prepareBeanFactory(ConfigurabLeListabLeBeanFactory beanFactory) {// Tell the internal bean factory to use the context's class loader etc.// 设置beanFactory的cLassLoader为当前context的cLassLoaderbeanFactory.setBeanClassLoader(getClassLoader());// 设置b Sanfactery的表达式语言处理器ory.getBeanClas:// 为beanFactory增加一个默认的propertyEditor，这个主要是对bean的属性等设置管理的一个工具类- . 、fbeanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar( resourceLoader: this, getEnvironi// Configure the bean factory with context callbacks.// 添加beanPostProcessorbeanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));// 设置要忽略自动装配的接口beanFactory.ignoreDependencyInterface(EnvironmentAware.cLass) ;DRRRTNRRNNSRRASRTSSESesshttps/blog.csdn.nelu013277209上nmrcmh=aanauna'",
  "assets/20201021151605820-20230404010250-2ckir46.png": "owner: this);»\u003e\u003e\u003e\u003e\u003e\u003e\u003e*/protected BeanWrapper instantiateBean(String beanName, RootBeanDefinition mbd) {try {Object beanInstance;if (System.getSecurityManager() != null) {beanInstance = AccessController.doPrivileged((PrivilegedAction\u003cObject\u003e) () -\u003e getInstantiationStrategy().instantiate(mbd, beanName,,getAccessControlContext());+else {beanInstance = getInstantiationStrategy().instantiate(mbd, beanName,+BeanWrapper bw = new BeanlirapperImpl|(beanInstance) ;initBeanWrapper (bw) ; \u003c\u003creturn bw;+natch (Thrawahle ey) 了https://blog.csdn.net/u013277209",
  "assets/20201021151724775-20230404010251-nplc53h.png": "*/protected void |registerCustomEditors(PropertyEditorRegistry registry) {PropertyEditorRegistrySupport registrySupport =(registry instanceof PropertyEditorRegistrySupport ? (PropertyEditorRegistrySupport) registif (registrySupport != null) {registrySupport.useConfigValueEditors() ;+if (!this.propertyEditorRegistrars.isEmpty()) {for (PropertyEditorRegistrar registrar : this.propertyEditorRegistrars) {try {registrar.registerCustomEditors(registry) ;+catch (BeanCreationException ex) {Throwable rootCause = ex.getMostSpecificCause() ;if (rootCause instanceof BeanCurrentlyInCreationException) {BeanCreationException bce = (BeanCreationException) rootCause;String bceBeanName = bce.getBeanName();if (bceBeanName != null \u0026\u0026 isCurrentlyInCreation(bceBeanName)) {if (logger.isDebugEnabled()) {Logger.debug(\"PropertyEditorRegistrar [\" + registrar. ped essean.epluiiitd (30%.",
  "assets/20201021152834976-20230404010251-bagrhu3.png": "*/private Object doConvertTextValue(@Nullable Object oldValue, String newTextValue, PropertyEditor editor) {try {editor.setValue(oldValue) ;+catch (Exception ex) {if (logger.isDebugEnabled()) {Logger.debug( message: \"PropertyEditor [\" + editor.getClass().getName() + \"] does not support sety+// Swallow and proceed.+editor. setAsText|(newTextValue) 8return editor.getValue();https:/blog.csdn.net/u013277209",
  "assets/20201027203441803-20230331085026-3sautpv.png": "@ Title x 十所CQ@ localhost:8080/demo/beanNameSayHello",
  "assets/2020102720544362-20230331085026-35f1pdz.png": "@\u0026 AwareAAA@% ApplicationContextAware = (@ % ServletContextAware @% BeanNameAware @% EmbeddedValueResolverAware*(6) % ApplicationObjectSupportA| 上[1 WebApplicationdbjectSupport| @r Ordered|Ann11|||||||||||||||||~ |fof |1 1 |I I |@\u0026 InitializingBean (©) AbstractHandlerMapping (@\u0026 MatchableHandlerMapping ||||||||||||||||||||||JA A6) % AbstractHandlerMethodMapping,em RequestHlappingInfoHandlerMapping|fo© % RequestMappingHandlerMapping",
  "assets/20201102193508182-20230331081919-ac4kw79.png": "Structure x 一加HEBiéEecomY Oe 中ery® ¢ buildLocaleContext(HttpServletRequest): LocaleContext | 145 re® ¢ buildRequestAttributes(HttpServietRequest, HttpServiet 146 * Suff® © configureAndRefreshWebApplicationContext(Configurak 147 * givef ? createWebApplicationContext(ApplicationContext): WebApplicationContext. —* resomcreateWebApplicationContext(WebApplicationContext): 149 yi - - publicdoDelete(HttpServietRequest, HttpServletResponse): vo,doGet(HttpServletRequest, HttpServietResponse): void | 1 ViadoOptions(HttpServietRequest, HttpServietResponse): v1 * DefadoPost(HttpServietRequest, HttpServietResponse): void 1 * @seedoPut(HttpServietRequest, HttpServietResponse): void | 1 / Z StructuredoService(HttpServietRequest, HttpServietResponse): ve 1 publicdoTrace(HttpServietRequest, HttpServletResponse): voicindWebApplicationcontext(): WebApplicationcontext 155 i‘= getContextAttribute(): String 159 * Pref‘= getContextClass(): Class\u003c?\u003e 160 * The‘= getContextConfigLocation(): String 161 WAme aetConteytid): String, 1 bublic© Web|avorites",
  "assets/20201102193508182-20230331090710-xyltxjh.png": "Structure x 一加HEBiéEecomY Oe 中ery® ¢ buildLocaleContext(HttpServletRequest): LocaleContext | 145 re® ¢ buildRequestAttributes(HttpServietRequest, HttpServiet 146 * Suff® © configureAndRefreshWebApplicationContext(Configurak 147 * givef ? createWebApplicationContext(ApplicationContext): WebApplicationContext. —* resomcreateWebApplicationContext(WebApplicationContext): 149 yi - - publicdoDelete(HttpServietRequest, HttpServletResponse): vo,doGet(HttpServletRequest, HttpServietResponse): void | 1 ViadoOptions(HttpServietRequest, HttpServietResponse): v1 * DefadoPost(HttpServietRequest, HttpServietResponse): void 1 * @seedoPut(HttpServietRequest, HttpServietResponse): void | 1 / Z StructuredoService(HttpServietRequest, HttpServietResponse): ve 1 publicdoTrace(HttpServietRequest, HttpServletResponse): voicindWebApplicationcontext(): WebApplicationcontext 155 i‘= getContextAttribute(): String 159 * Pref‘= getContextClass(): Class\u003c?\u003e 160 * The‘= getContextConfigLocation(): String 161 WAme aetConteytid): String, 1 bublic© Web|avorites",
  "assets/20201102193659478-20230331081919-scjifqf.png": "国。 Servlet @¥% Serializable @% ServletConfigi i ri |© \u0026 GenericServlet @®* Aware, tt)% HttpServlet @®% EnvironmentAware @®% EnvironmentCapable @®% ApplicationContextAwareLy LN a1||)% HttpServletBean |||4网= SuppressWarnings © % FrameworkServlet© \u0026 DispatcherServlet",
  "assets/20201102193659478-20230331090710-ty86lwh.png": "国。 Servlet @¥% Serializable @% ServletConfigi i ri |© \u0026 GenericServlet @®* Aware, tt)% HttpServlet @®% EnvironmentAware @®% EnvironmentCapable @®% ApplicationContextAwareLy LN a1||)% HttpServletBean |||4网= SuppressWarnings © % FrameworkServlet© \u0026 DispatcherServlet",
  "assets/20201104122643600-20230404010254-dnhdh9l.png": "ne oe SN testy PF \u0026 Sey 条JRebelY © B =. ) Gt Ke vw US em USN SSava * © XmlBeanDefinitionReaderjava = @ Testjava ~ © DefaultBeanDefinitionDocumentReaderjava » # boboTestxml » @ Ajava © BeanDefinitionParserDelegatejava ~ |! BeanDefinitionReaderUtilsjava* (cull Ue qacuue HULLS LU JUST register UEUT CLUSSES uy TUNE754 * @return the bean definition: 55 * @throws ClassNotFoundException if the bean class could not be loadedy 56 */57@ public static AbstractBeanDefinition createBeanDefinition(58 @Nullable String parentName, @Nullable String className, @Nullable ClassLoader classLoader) throws ClassNotFoundException { pare59o 国|61 一762 if (className != null) {63 if (classLoader != null) {64 bd.setBeanClass(ClassUtils.forName(className, classLoader)) ;65 +66 else {67 bd.setBeanClassName(className) ;— aoDebug: AT :spring-debug:Test.main() ~G@ _Debugger 加Console = + +2 4% 国I\u003e Frames Variables¥ \"main\"@1 in group \"main\": RUNNING x] T ¥ Y + @beanFactory.beanDefinitionMap = Cannot find local variable 'beanFactory'~ \u003e @static members of BeanDefinitionReaderUtils© createBeanDefinition:672, BeanDefinitionParserDelegate (org.sj ___ © ParentName=null4 parseBeanDefinitionElement:524, BeanDefinitionParserDelegate 二\u003e @ className = combob1 _parseBeanDefinitionElement:442, BeanDefinitionParserDelegat gs @ classLoader = nullt _ parseBeanDefinitionElement:407, BeanDefinitionParserDelegatsFa processBeanDefinition:323, DefaultBeanDefinitionDocumentReiparseDefaultElement:197, DefaultBeanDefinitionDocumentReacparseBeanDefinitions:176, DefaultBeanDefinitionDocumentReadoRegisterBeanDefinitions:149, DefaultBeanDefinitionDocumentReader (org.springframework.beans.factory.xml) htpsyblog csdnnetu013277209",
  "assets/20201104122721185-20230404010254-olbnalm.png": "S~ % %@\\JRebely) REL U|Gtvy vs Oo; Fm HQ ae—. java») AbstractBeanFactory,java * (@) AbstractApplicationContextjava ~ | PostProcessorRegistrationDelegatejava —_ © ListableBeanFactoryjava » @ DefaultBe ¥7/ priorityuraerea, Uraerea, ana tne rest.] // 用于保存本次要执行的BeanDefinitionRegistryPostProcessorList\u003cBeanDefinitionRegistryPostProcessor\u003e currentRegistryProcessors= new ArrayList\u003c\u003e(); currentRegistryPro|J // First, invoke the BeanDefinitionRegistryPostProcessors that implement PriorityOrdered.// 调用所有实现Priority0rdered接口的BeanDefinitionRegistryPostProcessor实现类essors:5 // 找到所有实现BeanDefinitionRegistryPostProcessor接口bean的beanNameString[] postProcessorNames =// 遍历处理所有符合规则的postProcessorNamesclass, includeNonSingletons: true, allowEageriniz for (String ppName : postProcessorNames) {// 检测是否实现了Priority0rdered接口if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) {// 获取名字对应的bean实例，添加到currentRegistryProcessors中// 将要被执行的8FPP名称添加到processedBeans，避免后续重复执行processedBeans.add(ppName) ;currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class)https://blog.csdn.net |u013277209 -Error in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/20201104122819579-20230404010254-r19qhi7.png": "=e eee | NN eeSS aaDefaultListableBeanFactory.java ~_ ‘5! AbstractBeanFactory,java ” (6) AbstractApplicationContext.java ” 外PostProcessorRegistrationDelegate java ” © ListableBeanFactoryjava ” @23@ private String[] doGetBeanNamesForType(ResolvableType type, boolean includeNonSingletons, boolean allowEagerInit) {4 List\u003cString\u003e result = new ArrayList\u003c\u003e(); result: size = 056 // Check all bean definitions.7 // 遍历BeanDefinitionNames集合aa9 // Only consider bean as eligible if the bean name is not defined as alias for some other bean.0 // 如果是别名，则直接跳过a if (!isAlias(beanName)) {2 try {3 // 获取合并的BeanDefinition，合并的BeanDefinition指的是整合了父BeanDefinition的属性，然后属性值会转换为RootBea4 RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName) ;5 // Only check bean definition if it is complete.6 //抽象的BeanDefinition是不做考虑，抽象的就是拿来继承的加/7如果介计时期初始化，那么直接短路”进入产法体httpsyblog.csdnnetu013277209",
  "assets/20201104123139775-20230404010254-3tmrlpg.png": "// Iterate over a copy to allow for init methods which in turn register new bean definitions.// While this may not be part of the regular factory bootstrap, it does otherwise work fine.// 将所有BeanDefinition的名字创建一个集合List\u003cString\u003e beanNames = new ArrayList\u003c\u003e(this.beanDefinitionNames); beanNames: size = 1// Trigger initialization of all non-lazy singleton beans...// 触发所有非延迟加载单例pbean的初始化，遍历集合的对象for (String beanName : beanNames) { beanName: \"a\" beanNames: size = 1// 合并父类BeanDefinition[ERENEEGNIEjoetheroedlocotteonoerinitioEENEG EEC si// 条件判断，抽象，单例，非懒加载if (!bd.isAbstract() \u0026\u0026 bd.isSingleton() \u0026\u0026 !bd.isLazyInit()) {// 判断是否实现了FactoryBean接口if (isFactoryBean(beanName)) {// 根据\u0026+beanName来获取具体的对象Object bean = getBean( name: FACTORY_BEAN_PREFIX + beanName) ;// 进行类型转换if (bean instanceof FactoryBean) {FactoryBean\u003c?\u003e factory = (FactoryBean\u003c?\u003e) bean;7 SoA Ce Renn Denn BRS EHS NHANAeALhttps://blog.csdn.net/u013277209",
  "assets/20201104144852245-20230404010254-murifg2.png": "了if (resource.isReadable()) {try {MetadataReader metadataReader = getMetadataReaderFactory() .getMetadataReader (resource) ;//是否是带有Q@Component注解的类，如果是则创建Scanned6enericBeanDefinition加入到符合条件的列表叫这GsCandidateConponent(metadstaReader)) 1lela ScannedGenericBeanDefinition sbd = new ScannedGenericBeanDefinition(metadataReader) ; |sbd.setSource(resource) ;if (isCandidateComponent(sbd)) {if (debugEnabled) {lLogger.debug(\"Identified candidate component class: \" + resource);了candidates.add(sbd) ;https://blog.csdn.net/u013277209,ten S",
  "assets/202011041523575-20230331081919-utxk4ec.png": "Dispateharserrlat | | Uandlerdapping | | UandlertxecutionChain || aadlerTntereeptorWandleridaoter | | landler1L.doServiesT teenie| srEDIT| etaler 1)上一生成Handlergxecurionchain6. getliandlerAdaptera-41 i1 REFEREE pretland ler 1一了8 handle (执行handle):9AMIe -------LeT返回ModelAnaview10, PUFA aos TianaTer A r1 ||一1, 执行render0 沾染vier返EMDdeladiey",
  "assets/202011041523575-20230331090710-o8w5nrc.png": "Dispateharserrlat | | Uandlerdapping | | UandlertxecutionChain || aadlerTntereeptorWandleridaoter | | landler1L.doServiesT teenie| srEDIT| etaler 1)上一生成Handlergxecurionchain6. getliandlerAdaptera-41 i1 REFEREE pretland ler 1一了8 handle (执行handle):9AMIe -------LeT返回ModelAnaview10, PUFA aos TianaTer A r1 ||一1, 执行render0 沾染vier返EMDdeladiey",
  "assets/20201104153706698-20230404010254-tocqm84.png": "8@* BeanDefinition(@* AbstractBeanDefinitiona 二@* RootBeanDefinition| |@* ChildBeanDefinition| |@»= AnnotatedBeanDefinitionaa x@* GenericBeanDefinitionBs ConfigurationClassBeanDefinition @*« ScannedGenericBeanDefinition@* AnnotatedGenericBeanDefinitionhttps://blog.csdn.net/u013277209",
  "assets/20201105171543144-20230331085005-o8hfbnn.png": "dame X Headers Preview Response ”Initiator Timing_| beanNameSay v GeneralRequest URL: http: //localhost : 8081/beanllameSayRequest Method: GETRemote Address: [Referrer Pol081strict-origin-when-cross-originy Response Headers 。 view sourceAccept-Ranges: bytesContent-Length: 146Content-Type: text/htmlDate: Thu, @5 Nov 2020 09:14:53 GMTLast-Modified: Thu, @5 Nov 2020 09:14:26 GMTVary: OriginVary: Access-Control-Request-MethodVary: Access-Control-Request-Headersy Request Headers 。 view sourceAccept: text/html, application/xhtml+xml, application/xml}q9, image/avif, image/webp, image/apng,*/*;q-0.8, application/signed-exchange;v=b3;q=0.9Accept-Encodi: gzip, deflate, brAccept-Language: zh-CN,zh;q.9Cache-Control: max-age=0Connection: keep-aliveHost: localhost:8981requests | 148Btransferred",
  "assets/20201105171720556-20230331085005-873m32o.png": "lame X Headers Preview Response ”Initiator ”Timing_| hello y GeneralRequest URL: http: //localhost:8081/say/helloRequest Method: GETRemote Address: [::1]:8081Referrer Poli: strict-origin-when-cross-origin» Response Headers (4)y Request Headers 。 view sourceAccept: text/html, application/xhtml+xm1, application/xml;q-0.9, image/avif, image/webp, image/apng,*/*;q=.9.8,app-exchangejiv=b3jqAccept-Encoding: gzip，deflate，brAccept-Language: zh-CN,zh;q-0.9Cache-Control: max-age=0Connection: keep-aliveHost: localhost:8981ince: Thu，65 Nov 2020 9:12:07 GMTSec-Fetch-De:jocumentSec-Fetch-Mode: navigateSec-Fetch-Site: noneSec-Fetch-User: 21Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.@ (Windows NT 10.@; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.424(7.36",
  "assets/20201105194111964-20230331085005-0gy3mb8.png": "// Process last-modified header, if supported by the handler.口if (new ServletWebRequest (request, response). checkNotModified(lastModified) \u0026\u0026 isGet) {return; iDispatcherServlet \u003e doDispatch)%% B=his = {DispatcherServlet@5417}\u003e @request = {RequestFacade@5418}» @response = {ResponseFacade@5419}全1VEprocessedRequest = {RequestFacade@5418}wel7 mappedHandler = (Handler=xecutionChain@5420} \"HandlerExecutionChain with [com.kingfish.springdemothree.controller. BeanNameSayControlle multipartRequestParsed = falseet)a.core)https://blog.csdn.net/qq_36882793",
  "assets/20201105194251683-20230331085005-xlb45jq.png": "@0verrideuestFacade@5418 handler: Beaupublic longreturn ~1L;}SimpleControllerHandlerAdapter \u003e getLastModifjeork.web.s _ https://blog.csdn.net/qq_36882793",
  "assets/20201105202310149-20230331085005-1rsbemk.png": "// Process last-modified header, if supported by the handler.String method = request. getMethod () ;boolean isGet = “GET”. equals (method) ;if (isGet || “HEAD”. equals (method)) {ed = ha. getLastModDispatcherServlet \u003e doDispatch)return; 7/this = {DispatcherServlet@5203}— » @ request = {RequestFacade@5204}\u003e @ response = {ResponseFacade@5205}alina.corere) isGet = true 4alina.core lastModified = -1https://blog.csdn.net/qq_36882793Error in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/20201109170808719-20230404010254-mp96xe5.png": "Bnm ApplicationEventeje 4@* ContextClosedEvent© ContextStartedEvent©* ContextStoppedEvent@* ContextRefreshedEventhttps://blog.csdn.net/u013277209,",
  "assets/20201116182109614-20230404010256-9e37qwt.png": "@« ConverterRegistry| |@= ConversionService人个@B ConfigurableConversionService个@* GenericConversionServicei© DefaultConversionServicehffps:/blog.csdn.net/u013277209",
  "assets/20201117143029328-20230404010257-kmoaj4i.png": "- @Testjava ” @ classpathXmlApplicationContextjava ~ [@i/AbstractApplicationContextjavall| e AbstractBeanFactoryjava ， @ FactoryBeanRegistrySupport java» @ Abstr vBe;5 */546547 prepareRefresh() ;549 // Tell the subclass to refresh the internal bean factory.// 创建容器对象: DefauLtListabLeBeanFactory7/ 加载xmt配置文件的属性值到当前工厂中，最重要的就是BeanDefinitionConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory(); | beanFactory: “org.springfra® ®日254 // Prepare the bean factory for use in this context. -//_beanFactory的准备工作，对各种属性进行填充\u003eng-debug:Testmain() » spring 4.2.8 [Test.main(] » _E2:spring-debug:Test.main() = axe =Variables+ @dependencyComparator = null一， @autowireCandidateResolver = {SimpleAutowireCandidateResolver@1323} |‘B resolvableDependencies = {ConcurrentHashMap@1324} size=0. beanDefinitionMap = {ConcurrentHashMap@1319} size= 1=}\u003e B key=\"myFactoryBean\"value = (GenericBeanDefinition@1371} \"Generic bean: class [com.bobo.MyFectoryBean]; sco@ parentName=null\u003e @beanClass = \"com.bobo.MyFactoryBean\"\u003e @scope=© abstractFlag= false\u003e @lazyinit = (Boolean@1376} false@ autowireMode=0bstract=false; lazylnit=false; autowireMode=0; dependencyCheck:https://blog.csdn.net/u013277209,Error in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/20201117143052673-20230404010257-09y5tkt.png": "@ Testjava ” @ ClassPathXmlApplicationContextjava ”LGAbstractApplicationContextjava ~ (8! AbstractBeanFactoryjava \\@! FactoryBeanRegistySupportjava ” Abstr583 // Check for listener beans and register them.// 在所有注册的bean中查找Listener bean, 注册到消息广播器中registerListeners();// Instantiate all remaining (non-tazy-init) singletons.// 初始化剩下的单实例AENEAN)名finishBeanFactoryInitialization(beanFactory); beanFactory g.springframework.beans.factory591 // Last step: publish corresponding event.592 // 完成刷新过程，通知生命周期处理器LifecycLeProcessor刷新过程，同时发出ContextRefreshEvent通知别人594 }debugTestmain0 » spring 4.2.8 [Test.main()] « _2:spring-debug-Test.main() =Variables‘8 prototypesCurrentlyinCreation = {NamedThreadLocal@1346) \"Prototype beans currently in creation”‘8 factoryBeanObjectCache = (ConcurrentHashMap@1347} size=0‘B singletonObjects = (ConcurrentHashMap@1348} size =\u003e © \"myFactoryBean\" \u003e {MyFactoryBean@1628}\"systemEnvironment” -\u003e {CollectionsSUnmodifiableMap@1572} size = 50\u0026 “applicationEventMulticaster\" -\u003e {SimpleApplicationEventMulticaster@1574}“environment” \u003e {StandardEnvironment@1576) \"StandardEnvironment {activeProfiles=(], defaultProfiles=[default], propertySources=[PropertiesPropertySource {name: \"systemProperties\" -\u003e (Properties@1578} size = 53 \"messageSource” \u003e (DelegatingMessageSource@1580} \"Empty MessageSource”‘@ singletonFactories = {HashMap@1349} size=0https://blog.csdn.net/u013277209,Error in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/20201118180056354-20230404010301-9h32c9q.png": "(ConstructorArgumentValues@5324}Y_ © indexedArgumentValues = {LinkedHashMap@5328} sizekey = {Integer@5334} 0\u003e = value = {ConstructorArgumentValues$ValueHolder@5335}了\u0026 (integer@5336} 1 -\u003e {ConstructorArgumentValues$ValueHolder@5337}\u003e 5 key = {Integer@5336} 1value = {ConstructorArgumentValues$ValueHolder@5337}Y @ genericArgumentValues = (ArrayList@5329} size = 1\u003e © 0 = {ConstructorArgumentValues$ValueHolder@5339}https://blog.csdn.net/u013277209,Error in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/20201118180126104-20230404010301-zrgqfrx.png": "MyClassPathXmlApplicationContext ac = new MyCLassPathXmLAppLicationContext( ...config|ac.getBeancn) (String name) Objecth(\"test.xml\");o (Class\u003cT\u003e re tere To (String name, Obijec aras Objecto (String name, Class\u003cT\u003e requiredType) T@ (Class\u003cT\u003e requiredType, Object args 7 https:/blog.csdn.net/u013277209",
  "assets/20201127163206105-20230404010531-5kfo3vr.png": "Y = metadata = {InjectionMetadata@2098}* @ targetClass = {Class@1895} \"class com.bobo.selfAutowired.annotation.Person\"Y ® injectedElements = {ArrayList@2099} size = 1Y = 0={AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement@2103} \"AutowiredFieldElement for private com.bobo.selfAutowired.annotation.Pet8 required = true@ cached = false@ cachedFieldValue = null\u003e © thisSo = (AutowiredAnnotationBeanPostProcessor@1782}Navigate‘@isField = true® pd=null@ skip = null\u003e @checkedElements = {LinkedHashSet@2100} size=1https://blog.csdn.net/u013277209,",
  "assets/20210107143623857-20230331090001-4zrs46s.png": "Expression:getApplicationListeners (event, type)Use Ctrl+Shift+Enter to add{Arraylist@2415} size = 71 = {AnsiOutputApplicationListener@2407}2 = {LoggingApplicationListener@2408}3 = {ClasspathLoggingApplicationListener@2409}4 = {BackgroundPreinitializer@2410}= 5 = {DelegatingApplicationListener@2411}6 = {FileEncodingApplicationListener@2412}https://blog.csdn.net/qq_36882793",
  "assets/20210107144139807-20230331090001-d01lpzg.png": "@0verridepublic void environmentPrepared (ConfigurableEnvironment environment) {this. initialMulticaster-multicastEvent (ne this. application, this. args, environment)) ;https://blog.csdn.net/qq_36882793",
  "assets/20210107170157917-20230330125415-5gau4yd.png": "Create a new GenericApplicationContext.See Also: registerBeanDef inition, refreshpublicthis. beanFactory = new DefaultListableBeanFactory () ;[RE* Create a new GenericApplicationContext with the given DefaultListableBeanFactory.* @param* @see #registerBeanDefinitiontory the DefaultListableBeanFactory instance to use for this context* @see #refreshpublic GenericApplicationContext (DefaultListableBeanFactory beanFactory) {Assert. notNull(beanFactory, message: “BeanFactory must not be null”);this. beanFactory = beanFactory;https://blog.csdn.net/qq_B",
  "assets/20210107170157917-20230331090019-8o2h1u3.png": "Create a new GenericApplicationContext.See Also: registerBeanDef inition, refreshpublicthis. beanFactory = new DefaultListableBeanFactory () ;[RE* Create a new GenericApplicationContext with the given DefaultListableBeanFactory.* @param* @see #registerBeanDefinitiontory the DefaultListableBeanFactory instance to use for this context* @see #refreshpublic GenericApplicationContext (DefaultListableBeanFactory beanFactory) {Assert. notNull(beanFactory, message: “BeanFactory must not be null”);this. beanFactory = beanFactory;https://blog.csdn.net/qq_B",
  "assets/20210108111835979-20230330135531-qaoquy4.png": "",
  "assets/20210108111835979-20230331090032-1oqutcr.png": "",
  "assets/20210108112349788-20230330135619-qx2il3b.png": "public interface BeanDefinitionRegistryPostProcessor extends BeanFactoryPostProcessor {Modify the application context's internal bean definition registry after its standard initialization. Allregular bean definitions will have been loaded, but no beans will have been instantiated yet. Thisallows for adding further bean definitions before the next post-processing phase kicks in.Params: registry - the bean definition registry used by the application contextThrows: BeansException - in case of errorsvoid postProcessBeanDefinitionRegistry (BeanDefinitionRegistry registry) throws BeansException;https://blog.csdn.net/qq_36882793",
  "assets/20210108112349788-20230331090032-z4i4uyc.png": "public interface BeanDefinitionRegistryPostProcessor extends BeanFactoryPostProcessor {Modify the application context's internal bean definition registry after its standard initialization. Allregular bean definitions will have been loaded, but no beans will have been instantiated yet. Thisallows for adding further bean definitions before the next post-processing phase kicks in.Params: registry - the bean definition registry used by the application contextThrows: BeansException - in case of errorsvoid postProcessBeanDefinitionRegistry (BeanDefinitionRegistry registry) throws BeansException;https://blog.csdn.net/qq_36882793",
  "assets/2021010816015286-20230331084853-x4o3gng.png": "[ee* Merge the imported-by declarations from the given configuration class into this one.* @since 4.0.5*/public void mergeImportedBy (ConfigurationClass otherConfigClass) {this. importedBy. addAll (otherConfigClass. importedBy) ;https://blog.csdn.net/qq_36882793",
  "assets/20210111203553121-20230330141901-2g02g6r.png": "@0verridepublic Object getBean(String name) throws BeansException {return doGetBean (name, requiredType: null, args: null, typeCheckOnly: false) ;https://blog.csdn.netqq_36882793",
  "assets/20210111203553121-20230331090046-5fxa2da.png": "@0verridepublic Object getBean(String name) throws BeansException {return doGetBean (name, requiredType: null, args: null, typeCheckOnly: false) ;https://blog.csdn.netqq_36882793",
  "assets/20210111203945289-20230330142004-b47q5ym.png": "Throws: BeansException — if the bean could not be createdReader Mode/unchecked/242 protected \u003cI\u003e T doGetBear| final String name, @Nullable final Class\u003cI\u003e requiredType,243 U) @ullable final Object[] args, boolean typeCheckOnly) throws BeansException {© Fp String bean = atstormedpeaaeaObject bean;// Eagerly check singleton cache for manually registered singletons.Object sharedInstance = getSingleton (beanName) ;司if (sharedInstance != null \u0026\u0026 args == mull = true) { |MF 251 i I I sepa er. isTraceRnabled()) {fir AbstractBeanFactory » doGetBean()Debugger EQConsole Endpoints = \u0026 ++ * GO BHFrames¥ \"main\"@1 in group \"main\": RUNNING x) TY了7ull© requiredType© args = nullv © typeCheckOnly = falsegetBean:202, AbstractBeanFactory (org.springtramework.beans.fact®) \u003cprelnstantiateSingletons:882, DefaultListableBeanFactory (org. sprintfinishBeanFactoryinitialization:878, AbstractApplicationContext (ortrefresh:550, AbstractApplicationContext (org.springframework.coniLSERiERSSanarpalaioreosaasozPad|refresh:747, SpringApplication (org.springframework boot)refreshContext:397, SpringApplication (org.springframework boot)run:315, SpringApplication (org.springtramework.boot) https://olog.csdn.netiqq_36882793",
  "assets/20210111203945289-20230331090046-w3kxxo1.png": "Throws: BeansException — if the bean could not be createdReader Mode/unchecked/242 protected \u003cI\u003e T doGetBear| final String name, @Nullable final Class\u003cI\u003e requiredType,243 U) @ullable final Object[] args, boolean typeCheckOnly) throws BeansException {© Fp String bean = atstormedpeaaeaObject bean;// Eagerly check singleton cache for manually registered singletons.Object sharedInstance = getSingleton (beanName) ;司if (sharedInstance != null \u0026\u0026 args == mull = true) { |MF 251 i I I sepa er. isTraceRnabled()) {fir AbstractBeanFactory » doGetBean()Debugger EQConsole Endpoints = \u0026 ++ * GO BHFrames¥ \"main\"@1 in group \"main\": RUNNING x) TY了7ull© requiredType© args = nullv © typeCheckOnly = falsegetBean:202, AbstractBeanFactory (org.springtramework.beans.fact®) \u003cprelnstantiateSingletons:882, DefaultListableBeanFactory (org. sprintfinishBeanFactoryinitialization:878, AbstractApplicationContext (ortrefresh:550, AbstractApplicationContext (org.springframework.coniLSERiERSSanarpalaioreosaasozPad|refresh:747, SpringApplication (org.springframework boot)refreshContext:397, SpringApplication (org.springframework boot)run:315, SpringApplication (org.springtramework.boot) https://olog.csdn.netiqq_36882793",
  "assets/20210111204114382-20230330142013-6vwd1r1.png": "RSs oO VV EY SS Fe TFhttps://blog.csdn.net/qq_36882793",
  "assets/20210111204114382-20230331090046-x56o683.png": "RSs oO VV EY SS Fe TFhttps://blog.csdn.net/qq_36882793",
  "assets/2021011215585131-20230331090103-md3teg6.png": "static void processCommonDefinitionAnnotations (AnnotatedBeanDefinition abd, AnnotatedTypeMetadata metadata) {AnnotationAttributes lazy = attributesFor(metadata, Lazy. class) ;if (lazy != null) {abd. setLazyInit (lazy. getBoolean( attributeName: “value”)) ;}else if (abd. getMetadata() != metadata) {lazy = attributesFor (abd. getMetadata(), Lazy. class) ;if (lazy != null) {abd. setLazyInit (lazy. getBoolean( attributeName: “value”)) ;if (metadata. isAnnotated (Primary. class. getName())) {abd. setPrimary (true) ;}AnnotationAttributes dependsOn = attributesFor(metadata, DependsOn. class) ;if (dependsOn != null) {abd. setDependsOn (dependsOn. getStringArray ( attributeName: “value”)) ;AnnotationAttributes role = attributesFor(metadata, Role. class) ;if (role != null) {abd. setRole (role. getNumber ( attributeName: “yalue”). intValue()) ;}AnnotationAttributes description = attributesFor(metadata, Description. class) ;if (description != null) {abd. setDescription (description. getString( attributeName: “value”)) ;static BeanDefinitionHolder applyScopedProxyMode (ScopeMetadata metadata, BeanDefinitionHolder definition, BeanDefinitionRegistry registry) {https:/blog.csdn.netqq_36882793",
  "assets/20210112202925854-20230331084824-ujjnc43.png": "// Allow post-processors to modify the merged bean definition.synchronized (mbd. postProcessingLock) {if (!mbd. postProcessed) {try,aa}catch (Throwable ex) {throw new BeanCreationException (mbd. getResourceDescription(), beanName,\"Post-processing of merged bean definition failed”, ex);}mbd. postProcessed = true;https://blog.csdn.net/qq_36882793",
  "assets/20210115170250207-20230330142403-dmtiwj4.jpg": "A对象有BB对象有A简单的创建流程如下:创建对象创建对象B调用doGetBean 调用doGetBean调用getSingleton 调用getSingleton而周beforeSingletonCreationbeforeSingletonCreation调用addSingletonFactory调用addSingletonFactory调用populateBean调用populateBean调用doGetBean获取A循环依赖检查而调用getSingleton获取A省略A剩下的创建流程省略B剩下创建流程",
  "assets/20210115170250207-20230331090045-f59ajci.jpg": "A对象有BB对象有A简单的创建流程如下:创建对象创建对象B调用doGetBean 调用doGetBean调用getSingleton 调用getSingleton而周beforeSingletonCreationbeforeSingletonCreation调用addSingletonFactory调用addSingletonFactory调用populateBean调用populateBean调用doGetBean获取A循环依赖检查而调用getSingleton获取A省略A剩下的创建流程省略B剩下创建流程",
  "assets/20210118160048529-20230331090142-zu6d6de.png": "1. obtainFromSupplier由2. instantiateUsingFactoryMethod3. eS部4 、5调用autowireConstructor或6instantiateBean 创建beandetermineConstructorsFromBeanPos‘Processors国王二本下本6. 调用autowireConstructor或instantiateBean 创建beanos",
  "assets/20210119202222218-20230331090142-r0rbyrv.png": "xsi:schemaLocation=\"http: //www. springframework. org/schema/beans http://www. springframework. org/schema/beans/spring-be\u003cbean id=\"demoA” name=\"demoA” class=\"com. kingfish. springbootdemo. replace. DemoA” factory-bean=\"demoC”factory-method=\"hello” autowire\u003cbean id=\"demoB” name=\"demoB” class=\" ci ietqq_36882793",
  "assets/20210119202518865-20230331090142-m9a5xu3.png": "@hutowiredpublic DemoA2021 (DemoB2021 demob, DemoController demoController) {this. demob = demob;this. demoController = demoController;System. out. print1n(“DemoA2021. DemoA2021 +} httpsi/blog.csdn.net/qq_36882793",
  "assets/2021011920300568-20230331090142-dy3n9ox.png": "OD? i NI I EE\u003cbean id=\"constructorDemoA” class=\"com. kingfish. springbootdemo. constructor. ConstructorDemoA” \u003econstructor-are)amsachsraaa |constructor-are)",
  "assets/20210121174448395-20230329000022-6h4wmk9.png": "| resolvableDependenciesUse Ctrl+Shift+Enter to add to WateResult:¥ oo result = {ConcurrentHashMap@5549} size = 8(Class@2803} “interface org.springframework.context.ApplicationEventPublisher\" -\u003e {AnnotationConfigServletWebServerApplicationContext@5536} \"org.sprit...(Class@5603} “interface javax.servlet http.HttpSession\" -\u003e {WebApplicationContextUtils$SessionObjectFactory@6507} \"Current HttpSession\"(Class@2085} “interface org.springframework.core.io.ResourceLoader” -\u003e {AnnotationConfigServletWebServerApplicationContext@5536} \"org.springframewa .Vi= (Class@591 1} \"interface javax.servlet ServletResponse\" -\u003e {WebApplicationContextUtils$ResponseObjectFactory@6508} \"Current HttpServletResponse\"(Class@2804} “interface org.springframework.context.ApplicationContext\" -\u003e {AnnotationConfigServietWebServerApplicationContext@5536} \"org.springfram(Class@5821} “interface javax.servlet ServietRequest\" -\u003e {WebApplicationContextUtils$RequestObjectFactory@6509} \"Current HttpServietRequest\"(Class@6464} \"interface org.springframework.web.context.request. WebRequest” -\u003e {WebApplicationContextUtils$WebRequestObjectFactory@6510} \"Current Vi(Class@2798} “interface org.springframework.beans.factory.BeanFactory\" -\u003e {DefaultListableBeanFactory@5534} \"org.springframework.beans.factory.support... V/https://blog.csdn.net/qq_36882793",
  "assets/20210121174448395-20230331090158-7w19ueu.png": "| resolvableDependenciesUse Ctrl+Shift+Enter to add to WateResult:¥ oo result = {ConcurrentHashMap@5549} size = 8(Class@2803} “interface org.springframework.context.ApplicationEventPublisher\" -\u003e {AnnotationConfigServletWebServerApplicationContext@5536} \"org.sprit...(Class@5603} “interface javax.servlet http.HttpSession\" -\u003e {WebApplicationContextUtils$SessionObjectFactory@6507} \"Current HttpSession\"(Class@2085} “interface org.springframework.core.io.ResourceLoader” -\u003e {AnnotationConfigServletWebServerApplicationContext@5536} \"org.springframewa .Vi= (Class@591 1} \"interface javax.servlet ServletResponse\" -\u003e {WebApplicationContextUtils$ResponseObjectFactory@6508} \"Current HttpServletResponse\"(Class@2804} “interface org.springframework.context.ApplicationContext\" -\u003e {AnnotationConfigServietWebServerApplicationContext@5536} \"org.springfram(Class@5821} “interface javax.servlet ServietRequest\" -\u003e {WebApplicationContextUtils$RequestObjectFactory@6509} \"Current HttpServietRequest\"(Class@6464} \"interface org.springframework.web.context.request. WebRequest” -\u003e {WebApplicationContextUtils$WebRequestObjectFactory@6510} \"Current Vi(Class@2798} “interface org.springframework.beans.factory.BeanFactory\" -\u003e {DefaultListableBeanFactory@5534} \"org.springframework.beans.factory.support... V/https://blog.csdn.net/qq_36882793",
  "assets/20210121174804624-20230331090158-we8i0v5.png": "Expression:(run. getBenn Gemoazoat. clash 00Use Ctrl+Shift+Enter to add to WatchResult:¥ oo result = (DemoA2021@7368} \"DemoA2021 (demob=DemoB2021 (demoC2021 =com-kingfish.springbootdemo.component.DemoC2021@1dba4e06), democ=com... Vie\u003e @ demob = {DemoB2021@7371} \"DemoB2021 (demoC2021=com.kingfish.springbootdemo.component.DemoC2021@1dba4e06)\"\u003e @ democ = {DemoC2021@7372}stableBeanFactory@4fce1 36b: defining beans [org.spl... Viehttps://blog.csdn.net/qq_36882793",
  "assets/20210217121439234-20230329010113-6he2ldx.png": "什么是BeanDefinition日“BeanDefinition 是Spring Framework 中定义Bean 的配置元信息接口BeanDefinition 元信息Class : Bean 全闫名，必须是具体尖，不能用抽杀闫或接口Name : Bean 的名称或者IDScope : Bean 的作用三Jingleton. prototype 等)Constructor : arguments BeanBERETA)Properties: Bean 尾性设置(RFIREA)Autowiring mode : Bean SIaNS@I#st (如;通过名称byName)Lazy initialization mode : Bean 自R初给化模式(ER和ERER)Initialization method : Bean TAMURABeanDefinition 构建? BER ©)Destruction method : Bean通过AbstractBeanDefinition 以及",
  "assets/2021021719091528-20230328174432-dcbgnjx.png": "BeanDefinition生成过程由createBeanlnstance 实例化RBS SANE| determineCandidateConstructorsPRECEAL HANS第一次调用后去处理器postprocessBeforelnstantiation默认实现是判断是否需要代理放入map中”一一SmartinstantiationAwareBeanPostProcessor 后去处理器第三次调用后| 一postprocessMergedBeanDefinition处理合并bdMergedBeanDefinitionPostProcessor后时处理器InstantiationAwareBeanPostProcessorfs SRNR四次调用后去处理器J+ setfarlySeanReference解决循环依赖的问题‘SmartinstantiationAwarEe-anPostProcessor|\u003c_—AS?J_S adaSDRERSELESpostProcessAfterinstantiationBeanvFRSRE (Populate) 判断是否需要属性填充populateBean属v初始化Initialization第六次调用后置处理器postprocesspropertyValues为bean填充属性包括依赖注入的属性+ postProcessBeforelnitializationInstantiationAwareBeanPostProcessorfsS0NEae+} postProcessA fterinitialization由$882 Destruction",
  "assets/20210217211344425-20230328175541-ykz359b.png": "路径: AbstractAutowireCapableBeanFactory#createBeanlnstanceSmartlnstantiationAwareBeanpostprocessor #determineCandidateConstructorsKk BONER bens SESE: GUE SO{_ SBE: AutowiredAnnotationBeanPostProcessor #determineCandidateConstructors5. spring bean实列队SRBUUEEEE - InstantiationStrategySRTinstantiateBean(beanName, mbd)使用依赖六入的构造器© autowireConstructor(beanName, mbd ctors, args)",
  "assets/20210217212028751-20230328174852-06w8wlg.png": "BBG: AbstractAutowireCapableBeanFactory#resolveBeforelnstantiation(beanName, mbdToUse)贪敌一次调用bean后时处理: © _InstantiationAwareBeanPostProcessor#postProcessBeforelnstantiation4. Spring Bean SSPWCADNES | 这里香序员自己可以计半生成代理对条放回一个bean就不雪要后上采作了spring NEESER SOLE|主要/用是判时bean是否寺要家代理，委要术代理的类SEU mapAbstractAutoProxyCreator##postProcessBeforelnstantiation",
  "assets/20210217215712774-20230328180637-eupwlmc.png": "通过后填处理器床处理合并后的BeanDefinitionBe:AbstractAutowireCapableBeanFactory*te BNI beansSEsSs o| _applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName)MergedBeanDefinitionPostProcessor ##i3postProcessMergedBeanDefinitionAutowiredAnnotationBeanPostProcessortpostProcessMergedBeanDefinition =sme#SON ESO ZIDAURIE AutowiredAnnotationBeanPostProcessor SBEBRESBE: AbstractAutowireCapableBeanFactony#getEarlyBeanReference(beanName, mbd bean)we BERR Abean SWE 全SmartinstantistionAwareBeanPostProcessor# getEarlyBeanReferenceSURE: AbstractAutoProxyCreator #getEarlyBeanReference",
  "assets/20210217221705968-20230328232011-6d59puw.png": "+ Bean MERGE (Populate) 判断是否雪要履性寺充BBE: AbstractAutowireCapableBeanFactory#populateBean(beanName, mbdinstanceWrapper)6. spring beanS2ULEEINESInstantiationAwareBeanPostProcessor#postPracessAfterInstantiationspring ABASREAT IS",
  "assets/202102172222254-20230328232248-oq8s1wq.png": "路径: AbstractAutowireCapableBeanFactory#resolveBeforelnstantiation(beanName, mbdToUse)贪敌一次调用bean后时处理: 日。 InstantiationAwareBeanPostprocessor#postProcessBeforelnstantiation|_4 Spring Bean SSPUCADBTES | 这里香序员自己可以计半生成代理对条放回一个bean就不雪要后采作了spring NEESER SOLE|主要/用是判时bean是否寺要家代理，委要术代理的类SEU mapAbstractAutoProxyCreator##postProcessBeforelnstantiationHBG: AbstractAutowireCapableBeanFactory#createBeaninstanceSmartinstantiationAwareBeanPostProcessor #determineCandidateConstructorsKk BONER bens SESE: GUE SO5. spring beanSOMASNES Cf { SEHK: AutowiredAnnotationBeanPostProcessor #determineCandidateConstructorsStratSETS =实例化方式\\stantiateBean(beanName, mbd)(SSHRDEARUGIEE © _cutonireConstructorbeanNlame, Ed tors args)BEBE REA EH BeanDefinition路径:AbstractAutowireCapableBeanFactony#让BNI beansSEsSs “G| _applyMergedBeanDefinitionPostProcessors(mbd, beanType beanName)MergedBeanDefinitionPostProcessor ##i3postProcessMergedBeanDefinitionAutowiredAnnotationBeanPostProcessortpostProcessMergedBeanDefinition =#SONY ESA ZIDAURIE | SO autowiredAnnotationBeanPostProcessor SSBBRESBE: AbstractAutowireCapableBeanFactony#getEarlyBeanReference(beanName, mbd bean)ee SDE bean EWES 2SmartinstantiationAwareBeanPostProcessor# getEarlyBeanReferenceSBE: AbstractAutoProxyCreator #getEarlyBeanReference+ Bean REGEH (Populate) 判断是否雪要必性十路径: AbstractAutowireCapableBeanFactory#populateBean(beanName mbdinstanceWrapper)6. spring beanS2ULEEINESInstantiationAwareBeanPostProcessor#postPracessAfterinstantiationspring ABASREAT IS",
  "assets/20210219222135181-20230329005505-1t4pj4d.png": "//xiRe#eLazy-init Beanoverridepublic void preInstantiateSingletons() throws BeansException {if (this.logger.isDebugEnabled()) {this.logger.debug(\"Pre-instantiating singletons in \" + this)\u0026// Iterate over a copy to allow for init methods which in turn register new bean definitionspart of the regular factory bootstrap, it does othernew ArrayList\u003c\u003e(this.beanDefinitionNanes);may notList\u003cString\u003e beanNamesworkibeanDefin.for (String beanNameition#beanNames) {Bean//TOD0 ik BAGH beanDefinitionMiRE ，在Dean的后再处理器中会使用这些RootBeanDefinition bd = getMergedLocalBeanDefinition(beanNane) ;//Bean n// Trigger po alization callback for a:for (String beanName : beanNames) {Object singletonInstance = getSingleton(beanNane) ;if (singletonInstance instanceof SmartInitializingSingleton) {Final SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInsta|if (System.getSecurityManager() != null) {AccessController. doPriviteged((PrivilegedAction\u003cObject\u003e) () -\u003e {smartSingleton.afterSingletonsInstantiated();return null;}, getAccessControtcontext());ielse {smartSingleton.afterSingletonsInstantiated();https://blog.csdn.net/qq_3669788|",
  "assets/20210219222224365-20230329005129-85fu6hc.png": "路径: AbstractAutowireCapableBeanFactory#initializeBean+ BeanNameAware 日”如果bean实现了BeanNameAware 接口，则和将beanName设值去BeanClassLoaderAwareBeanFactoryAware: 。旨”如果bean实现了BeanFactornyAware接口，则将beanFactory 设全进去8、spring Bean初抬化initialzeBean; Aware SUEWHE | 0 ofEnvironmentAwareApplicationEventPublisherAware © XRTApplicationContextAwareinvokeAwareMethods - 激活Aware 方法Bean 实风化Estat Ol Bean BEIBean Aware #015389: Spring Bean WIGRIBTES ©) we 第七次调用后去处理器“日。 Beanpostprocessor#postProcessBeforelnitialization调用Bean实便所有的后于处理二的初始化前处理方法，为Bean实全对条在初褒化之前做_些让定义的处理查作@postConstruct标方法BO FHT法of SH IntialzingBean 接D的sfterpropertiesSet0 方法B自定义初始化方法init-method=\"init-10 Spring Bean TREES (Initialization) j @postConstruct注解的方法--\u003e afterpropertiesSet方法--\u003e init-method EAE.afterPropertiesSet通过接口实现方式调用(RULE) ，@PostConstructfinit-method部是通过反时机制调用@postConstruct i SEALEBeanPostProcessor#postProcessBeforelnitiaization其他两人都是属于invokelnitMethods 中执行的eB) BREE11, Spring Bean WHIBeanPostProcessor#postProcessAfterInitialization‘SmartinitializingSingleton‘afterSingletonsinstantiated12, Spring Bean ksliseAtinesingSingletonéafterSingletonsinstantiated, SCBERVTafterSingletonsinstantiated#i} i bean—SEI09Sa O — DestructionAwareBeanPostProcessor#postProcessBeforeDestruction12, Spring bean名作可@preDestroy TE| 给of S280 DisposableBean #018) destroy0 方法SEU",
  "assets/20210219223718781-20230329005702-i9sf66n.png": "多前阶段“日“DestructionAwareBeanPostprocessorypostprocessBeforeDestruction13, Spring bean名作是@preDestroy TE| 给of S280 DisposableBean #018) destroy0 方法SURE",
  "assets/20210219224125938-20230329005924-zy8ied2.png": "public class DefauLtUserFactory implements UserFactory, InitializingBean, DisposableBean {M--// Bean 初始化AN/-- 一// 1. 基于@PostConstruct 注解@PostConstructpublic void init() { System.out.printin(“@PostConstruct : UserFactory #haft?...\"); }U/ 2.自定义初始化方法public void initUserFactory() { System,out,printtn(\"自定义初始化方法initUserFactory() : UserFactory 初始化中.. ，// 了.实现InitiatizingBeant#afterPropertiesSet 接口方法overridepublic void afterPropertiesSet() throws Exception {System.out.printin(\"InitializingBean#afterPropertiesSet() : UserFactory #thft...\");tM-~// Bean 销毁public void preDestroy() {System.out.println(\"@PreDestroy: UserFactory 销毁中. .overridepublic void destroy() throws Exception {System.out.printin(\"DisposableBean#destroy() : UserFactory S#i%...\"public void doDestroy() {System.out.printin(SAI doDestroy() : UserFactory 销毁中",
  "assets/20210219224151726-20230329005938-3pmp2s4.png": "public class DefauttUserFactory imptements UserFactory, InitializingBean,| DisposableBean 上A/// Bean 初始化i// 1. 基于@PostConstruct i=@ostConstructpublic void init() { System.out.printin(\"@PostConstruct : UserFactory 初始化中.……”); }// 2.自定义初始化方法public void initUserFactory() { System.out.printtn(\"自定义初始化方法initUserFactory() : UserFactory 初始// 3.RMInitializingBeantafterPropertiesset 接口方法@overridepublic void afterPropertiesset() throws Exception {System. out printLn(\"InitializingBean#afterPropertiesset() : UserFactory 初始化中.+M--// Bean 488M-~@Prevestroypublic void preDestroy() {System.out.printLn(\"@PreDestroy: UserFactory RH...+Governide 实现DisposableBean 接口destroy() 方法Public void destroy() throws Exception {System.out.printLn(\"DisposableBean#destroy() | UserFactory ‘it.+public void doDestroy() {System,out,printLn(\"自定义销毁方法doDestroy() : UserFactory 销毁中,了",
  "assets/20210219224208925-20230329005952-9r7ac62.png": "AM/--// Bean 898M-~@PreDestroypublic void preDestroy() {System.out.println(\"@PreDestroy: UserFactory 销毁中. . .\");@overridePublic void destroy() throws Exception {System.out.println(\"DisposableBean#destroy() : UserFactory 销毁中public void doDestroy()System.out.printtn(\"自定义销毁方法doDestroy() : UserFactory WMP.",
  "assets/20210219224225498-20230329010005-ptrh26m.png": "wa ee 十‘/ibrary/dava/JavaVirtvalachines/ jakd.连接目标Vi，地直: 1°127.0.0.1:58330\", 16M: RAF© ePostconstruct : UserFactory Weft...InitiaLizingeantafterPropertiesSet() : UserFactory 初始化中自建义初始化方法initUserFactory() : UserFactory WHE...Spring 应用上下文已启动.，org ,inytecoding .thinking.in.spring ,bean ,factory-11.jdk/cantents/Wome/bin/java从:aul tUserFactory@72dladzeSpring SAE FRERM.与目标Vi开和连接，地址为: ，，127，Process finished with exit code @",
  "assets/20210302183927761-20230404084355-eouh2uz.png": "Inysq1\u003e select = from student;https:/blog.csdn.netvweixin_458519",
  "assets/20210302184506628-20230404084356-ygbd0h4.png": "Inysql\u003e select sid.sname from student;mysql\u003e select _sid.sname from student;https:/blog.csdn.netvweixin_458519",
  "assets/20210302185049215-20230404084356-dwncmk4.png": "Inysql\u003e select sid,sname,’2021-@3-@2’ from student2021-03-022021-03-022021-93-022021-93-022021-93-022021-93-022021-93-022021-93-022021-93-022021-93-022021-03-02https:/blog.csdn.netvweixin_458519||1@ vows in set \u003c@.88 see\u003eError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/20210302185517964-20230404084355-oiyxrtx.png": "t distinct gender from student;vous in set (0.08 sec)",
  "assets/20210302185922370-20230404084357-qv1ok8b.png": "wsal\u003e 一Ena) 18 AB Pasq1\u003e select sname,age+10 from studentsSetect snane-agest@ From studentshttps:/blog.csdn.netvweixin_458519",
  "assets/20210302190940321-20230404084356-rrtvx30.png": "iysq1\u003e select count\u003c*) from student;countvow in set (0.04 sec)",
  "assets/20210302191531189-20230404084357-s7dg8z7.png": "wsq1\u003e select sname-min(age》from student;",
  "assets/20210302192048399-20230404084358-8i0g37u.png": "wsql\u003e select avg\u003cage\u003e from studentaugtage\u003erow in set (8.07 sec)",
  "assets/20210302192155981-20230404084357-gk1nydi.png": "wsql\u003e select sumfage)\u003e from student;",
  "assets/20210302194156529-20230404084355-h4pxlir.png": "iysq1\u003e select * from student where age\u003e:vous in set (0.08 sec)",
  "assets/20210302195114401-20230404084357-4a1wf7a.png": "sql\u003e select * from student where sid in 《*S_1992*-*S_19937?\u003e3vous in set (8.08 sec?",
  "assets/20210302195321878-20230404084355-5hva976.png": "\u003c8 1BB1’ 5937 5sq1\u003e select * from student where sid not inhttps:/blog.csdn.netweixin_458519yous in set (8.08 sec\u003e",
  "assets/2021030219575915-20230404084357-gfosnif.png": "wsql\u003e select * from student where age between 15 and 18;https:/blog.csdn.netvweixin_458519vous in set (8.80 sec\u003e",
  "assets/20210302195913168-20230404084354-s2c71o5.png": "Imysq1\u003e select * from student where age not between 15 and 183vous in set (0.08 sec)",
  "assets/20210302201810965-20230404084354-g76ceh1.png": "wsql\u003e select * from student i A.https://blog.csdn.netweixin_458519",
  "assets/20210302202328945-20230404084358-z5ak5eb.png": "sq1\u003e select * from student where age\u003e15 and gender=’male’;vous in set (0.08 sec)",
  "assets/20210302202642783-20230404084357-cn38xhr.png": "wsq1\u003e select * from student where age\u003e15 or gender-’male’;vous in set (8.08 sec\u003e https:/blog.csdn.netvweixin_458519",
  "assets/202103022030077-20230404084355-nv52vl8.png": "Inysql\u003e select * from student where sname like “wang”",
  "assets/20210302203419987-20230404084354-2m4fcko.png": "wsql\u003e select * from student where sname like *1i:",
  "assets/20210302203654189-20230404084355-qtbsg8o.png": "",
  "assets/20210302203828429-20230404084356-rspvev9.png": "vous in set (0.08 sec)",
  "assets/20210302204051494-20230404084357-xhtuqkm.png": "sq1\u003e select * from student where sname like ’2x.",
  "assets/20210302204240798-20230404084357-binfvnh.png": "wsql\u003e select * from student where sname like ’_g'",
  "assets/20210302204847986-20230404084358-rqcx9dq.png": "ysq1\u003e select * from student order hy age asc limit 33agegendervows in set (8.00 sec)",
  "assets/2021030220555769-20230404084355-paz4u5q.png": "wsq1\u003e select count\u003c*), departmentnumber from employee group by departmentnumhez|departmentnumbervous in set (8.08 sec)",
  "assets/20210302210134682-20230404084356-mccriup.png": "wwsql\u003e select count¢*\u003e, departmentnumber from employee where departmentnumhbher2\u003e19|i. group by departmentnunbers1 count(*\u003e 1 departmentnumbervous in set (8.08 sec)",
  "assets/20210302210627962-20230404084358-s9oayrf.png": "wsq1\u003e select sumKsalary?。departmentnunber from employee group by departnentnumb|» having sun¢salary)\u003e8000;sum(salary) 1 departmentnumber",
  "assets/2021030221134859-20230404084356-7bdlfc4.png": "sq1\u003e select * from student order by age ascjhttps:/blog.csdn.netvweixin_458519",
  "assets/20210302211454223-20230404084358-rs9askj.png": "wsq1\u003e select * from student order by age desc;tsid ft sname 1 age 1 genderhttps:/blog.csdn.netweixin_458519",
  "assets/2021030312520741-20230404084356-bmorqgo.png": "Inysql\u003e create database dpliwery OK, 1 row affected (@.O1 sec?",
  "assets/20210303125330974-20230404084354-9kudypd.png": "jnysql\u003e show create database db1;",
  "assets/20210303125647454-20230404084355-j52tmzx.png": "sq1\u003e drop database dbt;ery OK, @ rows affected (0.08 sec\u003eInysq1\u003e",
  "assets/20210303125940965-20230404084353-nylbe9s.png": "sq1\u003e show databases;infornation_schenamydatabasemydbmysqlperfornance_schenasakilatestworldvous in set (8.89 sec\u003ehttps:/blog.csdn.netweixin_458519",
  "assets/20210303130330527-20230404084355-4iv9jus.png": "wsq1\u003e alter datah: ster set gbk;ery OK, 1 row affected (8.08 sec)ysq1\u003e show create database dbt;1 Database | Create DatabaseCREATE DATABASE ‘dbi* /*t40100 DEFAULT CHARACTER SETvow in set (8.08 sec\u003e",
  "assets/20210303130451230-20230404084356-7c1dsju.png": "Inysq1\u003e us 3atabase changedInysql\u003e",
  "assets/20210303130616683-20230404084357-iz8p2q8.png": "mysql\u003e select datahbase(C?5select _database(\u003es",
  "assets/20210303140044367-20230404084354-t7732c4.png": "wsql\u003e use dbiatabase changedweal\u003e create table stulont\u003cSy id int=\u003e ane varchar(20\u003e,=\u003e Gender varchar(l@\u003e,=\u003e Disehday date\u003e\u003eouery OK. © rous affected (0.44 see?",
  "assets/20210303144745383-20230404084357-vbcpho0.png": "ysq1\u003e show tables;",
  "assets/20210303144940575-20230404084356-p50zu1o.png": "wsq1l\u003e show create table student;1 student 1 CREATE TABLE ‘student *‘id* int(11\u003e DEFAULT NULL,‘name’ varchar(28\u003e DEFAULT NULL,‘gender* varchar(18) DEFAULT NULL,‘birthday’ date DEFAULT NULL\u003e ENGINE=InnoDB DEFAULT CHARSE!\u003cbkhttps://blog.csdn.netweixin_458519",
  "assets/20210303145223522-20230404084358-svv4a0k.png": "mwsal\u003e dese studentsintcll)archarK287archarK19\u003ebirthday | datevous in set 《8.12 sec?",
  "assets/20210303145645914-20230404084356-62jjoc5.png": "| wsq1\u003e alter table student rename to stu;ery OK, @ rows affected \u003c@.23 sec)Error in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/20210303150127793-20230404084358-x2rfqgl.png": "wsql\u003e alter table stu change name sname varchar(10);Query OK, 0 rows afFected W.90 sec)cords: @ Duplicates: @ Warnings: @",
  "assets/20210303150426652-20230404084358-6hcnvxl.png": "sql\u003e alter tu modify sname intery OK, @ rous affected (8.77 sec)ecords: @ Duplicates: @ Warnings: 日Error in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/20210303150757176-20230404084357-fuap0tk.png": "wsql\u003e alter 七stu add address varchar(5@);ery OK, @ rous affecte see)lecords: @ Duplicates: @ Warnings: 日nysq1\u003e dese stu;intc11\u003ename intcll?gender archarK19\u003ebi i dateaddress varchar(S@))! YESvous in set (8.08 sec)hitps:/ibiog.csdn.netweixin_458519",
  "assets/20210303151816445-20230404084358-d2h1895.png": "sql\u003e alter table stu drop address:uery OK, @ rows affected (0.64 sec7cords: @ Duplicates: @ Warnings: @Inysq1\u003e dese stu5id intc11\u003ename intcll?gender archarK19\u003ebirthday | datevous in set (B.01 sec\u003e hitpsi/ibiog.csdn.netiweixin_458519I",
  "assets/20210303152039101-20230404084356-ym3ofdx.png": "ysql\u003e drop table stusery OK, @ rows affected (0.13 sec\u003e=",
  "assets/20210303161028430-20230404084357-4b54tyj.png": "-\u003e id int primary key.=\u003e name varchar(2@)Default 1 Extra t1 name varehar(2@) 1 YES 1外Fipsyiblog.csdn.netweixin_458519|",
  "assets/2021030316590659-20230330185152-5wiyac1.png": "https://blog.csdn.net/qq_36882793",
  "assets/2021030316590659-20230331090350-jlunsq3.png": "https://blog.csdn.net/qq_36882793",
  "assets/20210303173104926-20230404084357-ap4l1eb.png": "sql\u003e create student@1¢-\u003e id int,-\u003e name varchar(20\u003e,-\u003e primary keyCid\u003eOewery OK, @ rows affected (0.40 sec\u003esql\u003e desc studentOLsField } Typehttps:/Iblog.csdn.nethveixin_458519}vous in set (8.06 sec?",
  "assets/2021030317340097-20230404084355-eppew30.png": "wsqL\u003e create table studentg2(《-\u003eiai-\u003e》nanme varchar(2@) not nullOeQuery OK, @ rows affected (8.35 sec)sq1\u003e desc studentO2;varehar(28\u003erows in set (@.05 sec) hittpsi/blog.csdn.netweixin_458519",
  "assets/20210303173835546-20230404084358-qvt6hea.png": "wsq1\u003e create table studentg3《dint,-\u003e name varchar(20\u003e,-\u003e gender varchar(1@\u003e default ’male’Oeuery OK, @ rows affected (0.37 sec\u003esql\u003e desc studentO3;intcll) 1 YESvarehar(28\u003e—+httpsvitslog.csdn.netweixin_458519}",
  "assets/20210303174216204-20230404084356-7tsg7n2.png": "wsq1\u003e create table studentg4(-\u003e id int,-\u003e name varchar(2@) uniqueOe auery OK, @ rows affected (0.50 sec\u003esq1\u003e desc studentd:1 Default 1 Extrarows in set (8.04 sec\u003e hiipsiliblog.csdn.netiveixin_458519",
  "assets/20210303180124470-20230404084355-48tb6h7.png": "",
  "assets/20210303180554954-20230404084356-i9bt76w.png": "wysql》 alter table class drop foreign key fk_class_studentidsjuery OK, @ rous affected (8.87 seccords: @ Duplicates: @ Warnings: @sq1\u003e show create table classiGreate TableCREATE TABLE \"class ¢‘classid* int¢11\u003e NOT NULL,‘studentid* int(11\u003e DEFAULT NULL,PRIMARY KEY C‘classid*\u003e,KEY “fk_class_studentid* (*studentiNGINE=[nnoDB DEFAULT CHARSET=g)https:/blog.csdn.netvweixin_458519",
  "assets/20210303181108891-20230330185152-swohpsy.png": "#Thu Mar 26 11:17:26 GMT 2020 mvorg. springframework. boot. autoconfigure. data. jpa. SS[ org. springframework. boot. autoconfigure. web. client. RestTemplateAutoConfiguratioy, frutoconfigureafted rg. springframework. boot. autoconfigure. http. HttpMessageConvertersAutoConfigurg. springframework. boot. autoconfigure. datzcassandra. CassandraReactiveDataAutoConfiguration. Conditional0nClas:om, datastax. driver. core. Cluster, reactor. core. publisher. Flux, orgorg. springframework. boot. autoconfigure. gAta. solr. SolrRepositoriesAutoConfiguration. Condigional0nClass=org. apache. solr. client. solrj. SolrClient, org. springframework. data. solr. repos:. security. oauth2. client. servlet. OAuth2ClientAutoConfiguration. ConditionalOnWebApplication=SERVLETJaa, 需要在value装配后装配org. springframework. boot. autoconfigure. jersey. JerseyAutoConfiguration. AutoConfigureBefore=org. springframework. boot. autoconfigure. web. servlet. DispatcherServletAutoConfigurationorg. springframework. boot. autoconfigu:org. springframework. boot, autoconfiguge,sieb. servlet. error. ErrorlvchutoConfigurationEeorg. springframework. boot. autoconfigure. jms. artemis. ArtemisXAConnectionFactoryConfiguration=org. springframework. boot. autoconfigure. web. reactive. HttpHandlerAutoConfiguration. ConditionalOnWebApplication=REACTIVEorg. springframework. boot. autoconfigure. web. reactive. ReactiveWebServerFactoryAutoConfiguration. Conditional0nWebApplication=REACTIVEorg. springframework. boot. autoconfigure. data. elasticsearch. ElasticsearchRepositoriesAutoConfiguration=org. springframework. boot. autoconfigure. security. oauth2. resource. servlet. 0Auth2ResourceServerAutoConfiguration. Conditional OnWebApplication=SERVLETorg. springframework. boot. autoconfigure. web. servlet. MultipartAutoConfiguration. Conditional0nWebApplication=SERVLEThttps://blog.csdn.netiqq_36882793",
  "assets/20210303181108891-20230331090349-62ox5pi.png": "#Thu Mar 26 11:17:26 GMT 2020 mvorg. springframework. boot. autoconfigure. data. jpa. SS[ org. springframework. boot. autoconfigure. web. client. RestTemplateAutoConfiguratioy, frutoconfigureafted rg. springframework. boot. autoconfigure. http. HttpMessageConvertersAutoConfigurg. springframework. boot. autoconfigure. datzcassandra. CassandraReactiveDataAutoConfiguration. Conditional0nClas:om, datastax. driver. core. Cluster, reactor. core. publisher. Flux, orgorg. springframework. boot. autoconfigure. gAta. solr. SolrRepositoriesAutoConfiguration. Condigional0nClass=org. apache. solr. client. solrj. SolrClient, org. springframework. data. solr. repos:. security. oauth2. client. servlet. OAuth2ClientAutoConfiguration. ConditionalOnWebApplication=SERVLETJaa, 需要在value装配后装配org. springframework. boot. autoconfigure. jersey. JerseyAutoConfiguration. AutoConfigureBefore=org. springframework. boot. autoconfigure. web. servlet. DispatcherServletAutoConfigurationorg. springframework. boot. autoconfigu:org. springframework. boot, autoconfiguge,sieb. servlet. error. ErrorlvchutoConfigurationEeorg. springframework. boot. autoconfigure. jms. artemis. ArtemisXAConnectionFactoryConfiguration=org. springframework. boot. autoconfigure. web. reactive. HttpHandlerAutoConfiguration. ConditionalOnWebApplication=REACTIVEorg. springframework. boot. autoconfigure. web. reactive. ReactiveWebServerFactoryAutoConfiguration. Conditional0nWebApplication=REACTIVEorg. springframework. boot. autoconfigure. data. elasticsearch. ElasticsearchRepositoriesAutoConfiguration=org. springframework. boot. autoconfigure. security. oauth2. resource. servlet. 0Auth2ResourceServerAutoConfiguration. Conditional OnWebApplication=SERVLETorg. springframework. boot. autoconfigure. web. servlet. MultipartAutoConfiguration. Conditional0nWebApplication=SERVLEThttps://blog.csdn.netiqq_36882793",
  "assets/2021030318190944-20230404084354-24jv4n4.png": "uery OK, 1 row affected (8.18 sec)wsq1\u003e insert into student Cid,name,age-gender\u003e values (1,’bob’,16,’male’ \u003e; 避",
  "assets/20210303182837401-20230404084357-1qlrrfx.png": "wsql\u003e inserto student Cid.name,age.gender) values ¢2,’ lucy’ -17- female \u003e, ¢3Query OK, 3 rows affected (8.04 sec)cords: 3 Duplicates: @ Warnings: @https:/blog.csdn.netvweixin_4585194 rows in set (8.80 sec\u003e",
  "assets/2021030318372031-20230404084355-9tkkssw.png": "wsq1\u003e update student set age-29-gender-'female”vwhere name-’ tom’ 了wery OK, i row affected (8.06 secows matched: 1 Changed: 1 Warnings: 日wsql\u003e select * from student;vous in set (8.08 sec\u003e https://blog.csdn.net/weixin_458519}",
  "assets/2021030318401177-20230404084356-78chwg7.png": "wsq1\u003e update student _set_age=185uery OK, 4 rows affected (8.03 sec?lous matched: 4 Changed: 4 Warnings: @sql\u003e select * from studentshttps:/blog.csdn.netvweixin_458519rows in set (8.00 sec)",
  "assets/20210303185050926-20230404084354-vlgeb5f.png": "wsq1\u003e delete from student where age=145ery OK, 1 row affected (8.05 sec)Error in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/20210303185424760-20230404084357-zyzh8q5.png": "sal) delete fron studentsery OK, 6 rows affected (0.03 sec\u003eselect x from studentsimpty set (0.00 sec.",
  "assets/20210303192155711-20230404084357-cqxbhf4.png": "wsql\u003e select 关fr as stu5vous in set (8.08 sec?",
  "assets/2021030319253113-20230404084358-odv12is.png": "Wysq1》 select name as ,姓名' -id from studentsselect nane as 入站-id from students",
  "assets/2021030319330865-20230404084357-i20cuj0.png": "Wysql》select from student uhere classid=\u003cselect cid from class where cnane:va\" 3sid 1 snamevous in set (8.08 sec)",
  "assets/2021030319415767-20230404084356-v8e39ay.png": "Query OK, 2 rows affected (8.05 sec)Inysq\u003e delete fi ne =? Jay.ltuery OK, 1 row affected (0.04 sec\u003ect \u003e from classshttps:/blog.csdn.netweixin_458519.",
  "assets/2021030320040897-20230404084354-a5f4cmr.png": "wsql\u003e select _ employee-ename-qepartment-dnane from department inner join enploye|on department .did=employee department id;yous in set (8.08 sec\u003e",
  "assets/20210303201647123-20230404084356-u332rhc.png": "wsq1\u003e select class.cid.class.cname,student.sname from class left outer join stu|lent on class.cid=student .classid;vous in set (8.01 sec\u003e https://blog.csdn.net/weixin_458519)",
  "assets/20210303202037216-20230404084356-ll0p8ir.png": "wsq1\u003e select class.cid.class.cname,student.sname from class right outer join st|dent on class.cid=student .classid;rows in set (8.00 sec) https://blog.csdn.net/weixin_458519)",
  "assets/2021030320275492-20230404084356-fuk08sd.png": "\u003cselect classid from student where snamwsql\u003e select * from class where cis长三3",
  "assets/20210303203231622-20230404084355-rpyw9fd.png": "ysq1\u003e select * from class where cid\u003e\u003cselect classid from student where sname-’SKS\" \u003esvous in set (0.05 sec)",
  "assets/20210303203707252-20230404084355-dtymucs.png": "select * from class where exists \u003cselect * from student where sname=’ T 71]vous in set (8.08 sec)",
  "assets/20210303204057530-20230404084355-4ntc736.png": "sq1\u003e select * from class where cid \u003e any \u003cselect classid from student);vous in set (@.02 sec?",
  "assets/20210303204447489-20230404084355-i6630c2.png": "cid | cname.| 1005 | Android |1 一-i row in set (0.00 sec)",
  "assets/20210303204835945-20230404084355-tf9mpmh.png": "",
  "assets/20210304164639342-20230404084357-j5ogqwn.png": "",
  "assets/20210305112513266-20230331081615-q6ak15n.png": "EvaluatexExpression:advisors 二Use Ctrl+Shift+Enter to add to WatchesResult:Y oo result = {Arraylist@5188} size = 2InstantiationModelAwarePointcutAdvisorimpl@5195} \"InstantiationModelAwarePointcutAdvisor: expression [pointCut(msg)]; advice method [public void com .kingfish.aopdemo.aop.AopDemo.after(java.... View\u003e @ declaredPointcut = {Aspect/ExpressionPointcut@5207} \"AspecUlExpressionPointcut: (java.lang.String msg) pointCut(msg)\"5 inge Ctass@#097} \"class com.kingfish.aopdemo.aop.AopDemo™ .... Navigate@ methodNam\u003e @ aspectJAdviceMethod = {Method@5210})*public void com.kingfish.aopdemo.aop.AopDemo.after(java.lang.String)\"\u003e © aspectJAdvisorFactory = {ReflectiveAspectAdvisomegctory@4395}\u003e @ aspectinstanceFactory = {LazySingletonAspectinstanceF Decorator@4396} \"LazySingletonAspectinstanceFactoryDecorator: decorating BeanFactoryAspectinstanceFactory: bean name 'aopDemo'”@ declarationOrder = 1\u003e @ aspectName = \"aopDemo\"\u003e ®@ pointcut = (AspectlExpressionPointcut@5207} \"AspectUExpressionPointcut: (java.lapg-String msg) naintCut(msg)\"$B lazy = false\u003e @ instantiatedAdvice = {Aspect/AfterAdvice@521 1} \"org.springframework.aop.aspect)-AspectAfterAdvicel advice method [public void com.kingfish.aopdemo.aop.AopDemo.after(java.lang.String)]; aspect n... View@isbeforeAdvice = null@ isAfterAdvice = nullAfter 封装成了AspectAfterAdvice 类型，会在方法执行后进行操作ups 379",
  "assets/20210305112513266-20230331090430-8l3qdoa.png": "EvaluatexExpression:advisors 二Use Ctrl+Shift+Enter to add to WatchesResult:Y oo result = {Arraylist@5188} size = 2InstantiationModelAwarePointcutAdvisorimpl@5195} \"InstantiationModelAwarePointcutAdvisor: expression [pointCut(msg)]; advice method [public void com .kingfish.aopdemo.aop.AopDemo.after(java.... View\u003e @ declaredPointcut = {Aspect/ExpressionPointcut@5207} \"AspecUlExpressionPointcut: (java.lang.String msg) pointCut(msg)\"5 inge Ctass@#097} \"class com.kingfish.aopdemo.aop.AopDemo™ .... Navigate@ methodNam\u003e @ aspectJAdviceMethod = {Method@5210})*public void com.kingfish.aopdemo.aop.AopDemo.after(java.lang.String)\"\u003e © aspectJAdvisorFactory = {ReflectiveAspectAdvisomegctory@4395}\u003e @ aspectinstanceFactory = {LazySingletonAspectinstanceF Decorator@4396} \"LazySingletonAspectinstanceFactoryDecorator: decorating BeanFactoryAspectinstanceFactory: bean name 'aopDemo'”@ declarationOrder = 1\u003e @ aspectName = \"aopDemo\"\u003e ®@ pointcut = (AspectlExpressionPointcut@5207} \"AspectUExpressionPointcut: (java.lapg-String msg) naintCut(msg)\"$B lazy = false\u003e @ instantiatedAdvice = {Aspect/AfterAdvice@521 1} \"org.springframework.aop.aspect)-AspectAfterAdvicel advice method [public void com.kingfish.aopdemo.aop.AopDemo.after(java.lang.String)]; aspect n... View@isbeforeAdvice = null@ isAfterAdvice = nullAfter 封装成了AspectAfterAdvice 类型，会在方法执行后进行操作ups 379",
  "assets/20210308193903307-20230331081520-pk9epwm.png": "9AbstractAutoProxyCreator#postProcessAfterInitializationwraplfNecessary superfindCandidateAdvisors0)findCandidateAdvisorsthis.aspectlAdvisorsBuilder.buildAspectlAdvisors0getAdvicesAndAdvisorsForBeanfindAdvisorsThatCanApplycreateProxy返回创建好的代理",
  "assets/20210308193903307-20230331090403-33zggr4.png": "9AbstractAutoProxyCreator#postProcessAfterInitializationwraplfNecessary superfindCandidateAdvisors0)findCandidateAdvisorsthis.aspectlAdvisorsBuilder.buildAspectlAdvisors0getAdvicesAndAdvisorsForBeanfindAdvisorsThatCanApplycreateProxy返回创建好的代理",
  "assets/20210309111635754-20230331081630-6snjnmm.png": "®) EvaluateExpression:{chainUse Ctrl+Shift+EnResult:Y oo result = {Arraylist@5628} size = 3= {InterceptorAndDynamicMethodMatcher@6702}\u003e © interceptor = {Aspect/AfterAdvice@6704} \"org.springframework.aop.aspectj.AspectlAfterAdvice: advice method [public void com.kingfish.aopdemo.aop.AopDemo.after(java.lang.String)];\u003e %@ methodMatcher = (AspectlExpressionPointcut@6705} \"AspectlExpressionPointcut: (java.lang.String msg) pointCut(msg)\"\u003e @ interceptor = {MethodBeforeAdviceinterceptor@6708}\u003e @® methodMatcher = {AspectlExpressionPointcut@6709} \"AspectJExpressionPointcut: (java.lang.String msg) pointCut(msg)\"@@wo htpsifblog.csdn.nevigg_ 268s",
  "assets/20210309111635754-20230331090450-vbg5egr.png": "®) EvaluateExpression:{chainUse Ctrl+Shift+EnResult:Y oo result = {Arraylist@5628} size = 3= {InterceptorAndDynamicMethodMatcher@6702}\u003e © interceptor = {Aspect/AfterAdvice@6704} \"org.springframework.aop.aspectj.AspectlAfterAdvice: advice method [public void com.kingfish.aopdemo.aop.AopDemo.after(java.lang.String)];\u003e %@ methodMatcher = (AspectlExpressionPointcut@6705} \"AspectlExpressionPointcut: (java.lang.String msg) pointCut(msg)\"\u003e @ interceptor = {MethodBeforeAdviceinterceptor@6708}\u003e @® methodMatcher = {AspectlExpressionPointcut@6709} \"AspectJExpressionPointcut: (java.lang.String msg) pointCut(msg)\"@@wo htpsifblog.csdn.nevigg_ 268s",
  "assets/20210309112603531-20230331081631-z3m3e6z.png": "®) EvaluatexExpression:[advised Fil-Use Ctrl+Shift+Enter to add to WatchesResulViel加aopProxyFactory = (DefaultAopProxyFactory@6144}@ listeners = {LinkedList@6145} size = 0@ active = true\u003e @ targetSource = {SingletonTargetSource@6146} \"SingletonTargetSource for target object [com.kingfish.aopdemo.service.impl.DemoServicelmpl@37e0292a]\"@ preFiltered = true\u003e @ advisorChainFactory = {DefaultAdvisorChainFactory@6147}@ methodCache = {ConcurrentHashMap@6148} size = 00 = {Exposelnvocationinterceptor$1@6157} \"org.springframework.aop.interceptor.Exposelnvocationinterceptor.ADVISOR\"\u003e © 1 = {instantiationModelAwarePointcutAdvisorimp!@6158} \"InstantiationModelAwarePointcutAdvisor: expression [pointCut(msg)]; advice method [public void com.kingfish.aopdemo.aop.AopDemo.after(jz adviso@ proxyTargetClass = true@ optimize = false@ opaque = false@ exposeProxy = false@ frozen.= falseups 7",
  "assets/20210309112603531-20230331090450-ctl1zob.png": "®) EvaluatexExpression:[advised Fil-Use Ctrl+Shift+Enter to add to WatchesResulViel加aopProxyFactory = (DefaultAopProxyFactory@6144}@ listeners = {LinkedList@6145} size = 0@ active = true\u003e @ targetSource = {SingletonTargetSource@6146} \"SingletonTargetSource for target object [com.kingfish.aopdemo.service.impl.DemoServicelmpl@37e0292a]\"@ preFiltered = true\u003e @ advisorChainFactory = {DefaultAdvisorChainFactory@6147}@ methodCache = {ConcurrentHashMap@6148} size = 00 = {Exposelnvocationinterceptor$1@6157} \"org.springframework.aop.interceptor.Exposelnvocationinterceptor.ADVISOR\"\u003e © 1 = {instantiationModelAwarePointcutAdvisorimp!@6158} \"InstantiationModelAwarePointcutAdvisor: expression [pointCut(msg)]; advice method [public void com.kingfish.aopdemo.aop.AopDemo.after(jz adviso@ proxyTargetClass = true@ optimize = false@ opaque = false@ exposeProxy = false@ frozen.= falseups 7",
  "assets/20210309150518765-20230331081740-g1zm5kw.png": "public static boolean canApply(Pointcut pc，Class\u003c?\u003e targetClass, boolean hasIntroductions) {Assert. notNull (po, message: “pointcut mist not be null”);return false;加pc.getClassFilter().matches(targetClass) == trueMethodMatcher methodMatcher = pc. getMethodMatcher () ;if (methodMatcher == MethodMatcher. TRUE) {// No need to iterate the methods if we’ re matching any method anyway...这里我们不考虑，因为MethodIntroductionAwareMethodMatcher introductionAwareMethodMatcher = null; Matcherreturn true;if (methodMatcher instanceof IntroductionAwareMethodMatcher) { 这里不会inatroductionAwareMethodMateher = (IntroductionAwareMethodMatcher) methodMatcher; 鸭mmeSet\u003cClass\u003c?\u003e\u003e classes = new LinkedHashSet© () ;if (!Proxy. isProxyClass(targetClass)) {classes. add (ClassUtils. getUserClass(targetClass)) ;}classes. addAll (ClassUtils. getAllInterfacesForClassAsSet (targetClass)) ;for (Class\u003c?\u003e clazz : classes) {Method[] methods = ReflectionUtils. getAllDeclaredMethods(clazz) ;for (Method method : methods) {if GntroductionAwareMethodMatcher != null ?intrpductionAwareMethodMatcher. matches (method, targetClass, hasIntroductions) :methodMatcher. matches (method, targetClass)) {return true; \\@ _methodMatcher.mactcher == truereturn false;[ee https://blog.csdn.net/qq_36882793Error in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/20210309150518765-20230331090544-cxzpvvn.png": "public static boolean canApply(Pointcut pc，Class\u003c?\u003e targetClass, boolean hasIntroductions) {Assert. notNull (po, message: “pointcut mist not be null”);return false;加pc.getClassFilter().matches(targetClass) == trueMethodMatcher methodMatcher = pc. getMethodMatcher () ;if (methodMatcher == MethodMatcher. TRUE) {// No need to iterate the methods if we’ re matching any method anyway...这里我们不考虑，因为MethodIntroductionAwareMethodMatcher introductionAwareMethodMatcher = null; Matcherreturn true;if (methodMatcher instanceof IntroductionAwareMethodMatcher) { 这里不会inatroductionAwareMethodMateher = (IntroductionAwareMethodMatcher) methodMatcher; 鸭mmeSet\u003cClass\u003c?\u003e\u003e classes = new LinkedHashSet© () ;if (!Proxy. isProxyClass(targetClass)) {classes. add (ClassUtils. getUserClass(targetClass)) ;}classes. addAll (ClassUtils. getAllInterfacesForClassAsSet (targetClass)) ;for (Class\u003c?\u003e clazz : classes) {Method[] methods = ReflectionUtils. getAllDeclaredMethods(clazz) ;for (Method method : methods) {if GntroductionAwareMethodMatcher != null ?intrpductionAwareMethodMatcher. matches (method, targetClass, hasIntroductions) :methodMatcher. matches (method, targetClass)) {return true; \\@ _methodMatcher.mactcher == truereturn false;[ee https://blog.csdn.net/qq_36882793Error in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/2021031018172347-20230404010544-j3mebe3.png": "@*= BeanFactoryPostProcessor @* Ordered|@\" BeanDefinitionRegistryPostProcessor @* PriorityOrdered@* ConfigurationClassPostProcessorhttps:/blog.csdn.net/u013277209",
  "assets/20210310181749967-20230404010544-6cw6fag.png": "“org.springframework.context.annotation.internalConfigurationAnnotationProcessor\" -\u003e {RootBeanDefinition@825} \"Root bean: class [org.springframework.contr-“org.springframework.context.event.internalEventListenerFactory\" -\u003e {RootBeanDefinition@1065} \"Root bean: class [org.springframework.context.event.Default-“org.springframework.context.event.internalEventListenerProcessor\" -\u003e {RootBeanDefinition@1046} \"Root bean: class [org.springframework.context.event.EventL-“org.springframework.context.annotation.internalAutowiredAnnotationProcessor\" -\u003e {RootBeanDefinition@1004} \"Root bean: class [org,springframework.beans{-“org.springframework.context.annotation.internalCommonAnnotationProcessor\" -\u003e {RootBeanDefinition@1023} \"Root bean: class [org,springframework.context.",
  "assets/20210310181833269-20230404010544-g30s1jq.png": "{BeanDefinitionHolder@1850} \"Bean definition with name ‘springConfiguration’: Generic bean: class [com.bobo.aop.annotation.SpringConfiguration]; scope=s-~\u003e {® beanDefinition = {AnnotatedGenericBeanDefinition@1405} \"Generic bean: class [com.bobo.aop.annotation.SpringConfiguration]; scope=singleton; abstract=fal:-~\u003e 外beanName= “springConfiguration\"‘Daliases = nullError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/20210312111902698-20230404010548-auk3at9.png": "I Project ~ © = % — efinitionReaderjava © DefaultBeanDefinitionDocumentReader.java ” @ BeanDefinitionParserDelegatejava ” @ispring.handlers ~ Nodejava ” @ boboAopxr\u003e Bs build gi http\\://www. springframework.org/schema/aop=org.springframework.aop.config.AopNamespaceHandler\u003e» Ba buildSrc 2integration-testspring-aop\u003e Bbuild\u003e BoutY 四SrCc了上mainresourcesY 四META-INF#ispring:handlers#ispring.schemas@ spring.tooling\u003e I org.springframework.aop.config\u003e Mitest\u003e ItestFixtures https:/blog.csdn.netlu013277209",
  "assets/20210312111924559-20230404010549-j1dc9ud.png": "\u003caop:config\u003e\u003caop:aspect ref \u003e\u003caop:pointcut id expression ( Integer com.bobo.aop.xml.MyCalculator.* (..))\"/\u003e\u003caop:around method pointcut-ref \u003e\u003c/aop:around\u003e\u003caop:before method pointcut-ref \u003e\u003c/aop:before\u003e\u003caop:after method pointcut-ref \u003e\u003c/aop:after\u003e\u003caop:after-returning method pointcut-ref returning \u003e\u003c/aop:after-returning\u003e\u003caop:after-throwing method pointcut-ref throwing \u003e\u003c/aop:after-throwing\u003e\u003c/aop:aspect\u003e\u003c/aop:config\u003e https://blog.csdn.net(u013277209",
  "assets/20210312112013152-20230404010548-4fxihql.png": "\u003caop:config\u003e\u003caop:aspect ref. \u003e\u003caop:pointcut id expression=\"execution( Integer com.bobo.aop.xml.MyCalculator.* (..))\"/\u003e\u003caop:around method pointcut-ref \u003e\u003c/aop:around\u003e\u003caop:before method pointcut-ref \u003e\u003c/aop:before\u003e\u003caop:after method pointcut-ref \u003e\u003c/aop:after\u003e\u003caop:after-returning method pointcut-ref returning \u003e\u003c/aop:after-returning\u003e\u003caop:after-throwing method pointcut-ref throwing \u003e\u003c/aop:after-throwing\u003e\u003c/aop:aspect\u003e\u003c/aop:config\u003e https:/blog.csdn.net/u013277209",
  "assets/20210312112047486-20230404010549-jj0x22b.png": "\u003e MethodLocatingactonBeanApraponumsnoro {P| sspescunsnsice | 二| aa\u003e| SimpledeanFactonavaresspectinstancefactony—+| MethodLocatingFactoneansspecurcincusdisort |] specuMethodBetorebchice | aSimpeBeanFactoyawareAspectinstanceFatoryMethodLocatingFactonBeaneaeAspectiPointcutAdvisor#2, |] AspectiAfterAdvice 一| :\u003e| SimpleseanFatoranareAspectinstncefactony~ MethodLocatingFctonBeanspecuPcineutraisors. 上fapecuatertetumingadvce |} —t | a\u003e| simpleseantactoryavaresspectinstanceFactory~ MethodLocatingFactonBeanscpnciPontaasdvier | sspecustetivovngadvee | —t | aaSimpleBeanFactoryAwareAspectinstanceFactory",
  "assets/20210312112105694-20230404010548-fm8b45d.png": "\u003cbean id class \u003e\u003c/bean\u003e\u003caop:config\u003eaop:aspect ref \u003e\u003caop:pointcut id expression ( Integer com.bobo.aop.xml.MyCalculator.* (..))\"/\u003e\u003caop:around method pointcut-ref \u003e\u003c/aop:around\u003e\u003caop:before method pointcut-ref \u003e\u003c/aop:before\u003e\u003caop:after method pointcut-ref \u003e\u003c/aop:after\u003e\u003caop:after-returning method pointcut-ref returning \u003e\u003c/aop:after-returning\u003e\u003caop:after-throwing method pointcut-ref throwing \u003e\u003c/aop:after-throwing\u003ee \u003c/aop:aspect\u003c/aop:config\u003e\u003c/beans\u003e https://blog.csdn.net/u013277209",
  "assets/20210312112119366-20230404010548-qnoaa7m.png": "\u003cbean id class \u003e\u003c/bean\u003e\u003cao onfig\u003eaop:aspect ref \u003e\u003caop:pointcut id expression ( Integer com.bobo.aop.xml.MyCalculator.* (..))\"/\u003e\u003caop:around method pointcut-ref »\u003c/aop:around\u003e\u003caop:before method pointcut-ret \u003e\u003c/aop:before\u003e\u003caop:after method pointcut-ref \u003e\u003c/aop:after\u003e\u003caop:after-returning method pointcut-ref returning \u003e\u003c/aop:after-returning\u003e\u003caop:after-throwing method pointcut-ref throwing \u003e\u003c/aop:after-throwing\u003e\u003c/aop:aspect\u003c/aop:config\u003eelheancshttps:/blog.csdn.net/u013277209",
  "assets/20210312112138967-20230404010549-hb3euze.png": "myPoint' -\u003e {RootBeanDefinition@2322} \"Root bean: class [org.springframework.aop.aspectj.AspectJExpressionPointcut]; scope=prototype; abstract=false; lazylnit=null; autowireMode=0; def… ViewmyCalculator \u003e {GenericBeanDefinition@2324} \"Generic bean: class [com.bobo.aop.xml.MyCalculator]; scope=; abstract=false; lazylnit=false; autowireMode=0; dependencyCheck=0; autowir--- Vieworg.springframework.aop.aspect). AspectJ PointcutAdvisor#4\" -\u003e {RootBeanDefinition@2326} \"Root bean: class [org.springframework.aop.aspect).AspectJPointcutAdvisor]; scope=; abstract=fal… Vieworg.springframework.aop.aspect). AspectJ PointcutAdvisor#2\" \u003e {RootBeanDefinition@2328} \"Root bean: class [org.springframework.aop.aspect).AspectJPointcutAdvisor]; scope=; abstract=fal -- Vieworg.springframework.aop.aspect). AspectJ PointcutAdvisor#3\" \u003e {RootBeanDefinition@2330} \"Root bean: class [org.springframework.aop.aspect).AspectJPointcutAdvisor]; scope=; abstract=fal… Vieworg.springframework.aop.aspect). AspectJ PointcutAdvisor#0\" -\u003e {RootBeanDefinition@2006} \"Root bean: class [org.springframework.aop.aspect).AspectJPointcutAdvisor]; scope=; abstract=fal… Vieworg.springframework.aop.aspect), AspectJ PointcutAdvisor#1\" -\u003e {RootBeanDefinition@2333} \"Root bean: class [org.springframework.aop.aspect).AspectJPointcutAdvisor]; scope=; abstract=fal… Vieworg.springframework.aop.config.internalAutoProxyCreator\" -\u003e {RootBeanDefinition@1714} \"Root bean: class [org,springframework.aop.aspect/.autoproxy.AspectJAwareAdvisorAutoProxyCrea: ViewlogUtil’ \u003e {GenericBeanDefinition@2336} \"Generic bean: class [com.bobo.aop.xml.Logutil]; scope=; abstract=false; lazylnit=false; autowireMode=0; dependencyCheck: autoyicer andidatsa77 208!pvvVYYVYYVyY",
  "assets/20210312112150653-20230404010549-8twca8o.png": "Y @ beanClass = {Class@2349} \"class org.springframework.aop.aspectj.AspectJExpressionPointcut\"… Navigate@ cachedConstructor = null@ newinstanceCallerCache = null\u003e @nam“org.springframework.aop.aspect).AspectJExpressionPointcut\"",
  "assets/2021031211220323-20230404010549-pqr11fy.png": "Y @ propertyValues = {MutablePropertyValues@2352} \"PropertyValues: length=1; bean property 'expression了© propertyValueList = {ArrayList@2376} size=1Y = 0=(PropertyValue@2378} \"bean property ‘expression\u003e @name= \"expression\"\u003e ®@ value =\"execution( Integer com.bobo.aop.xml.MyCalculator.* (..)© optional = false",
  "assets/20210312112215217-20230404010548-4nhc35z.png": "Y \u0026 \"org.springframework.aop.aspectj AspectJPointcutAdvisor#0\" -\u003e {RootBeanDefinition@2006} \"Root bean: class [org.sprikey = “org.springframework.aop.aspect).AspectJPointcutAdvisor#0\"value = {RootBeanDefinition@2006} \"Root bean: class [org.springframework.aop.aspect) AspectJ PointcutAdvisor}; sco}@ decoratedDefinition = null",
  "assets/20210312112225725-20230404010548-f1pu4um.png": "Y @ beanClass = {Class@2386} \"class orgspringframework.aop.aspectjAspectJPointcutAdvisor'@ cachedConstructor= null@ newinstanceCallerCache = null\u003e @name = \"org.springframework.aop.aspect/.AspectJPointcutAdvisor\"\u003e (® classloader = {Launcher$AppClassLoader@1505}Error in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/20210312112241128-20230404010549-idepp1i.png": "Y @ beanClass = {Class@2402} \"class org.springframework.aop.aspectj AspectJAroundAdvice\"@ cachedConstructor = null@ newinstanceCallerCache = null\u003e @name= \"org.springiramework.aop.aspect).AspectJAroundAdvice\"\u003e @ classloader = {Launcher$AppClassLoader@1505}@ roflactinnNata |",
  "assets/20210312112253931-20230404010548-k9krce3.png": "Y ® indexedArgumentValues = {LinkedHashMap@2425} size=3Y = (Integer@2432} 0 -\u003e {ConstructorArgumentValues$ValueHolder@2433}\u003e key= {Integer@2432} 0Y = value = {ConstructorArgumentValues$ValueHolder@2433}\u003e @value = {RootBeanDefinition@1894} \"Root bean: class [org.springframework.aop.config.MethodLocatingFactoryBean]; scope=; abstract=false; lazylnit=null; autowireMo~@ type= null@ name =null@ source = null@ converted = false@ convertedValue = nullY \u0026 (Integer@2434} 1 -\u003e {ConstructorArgumentValues$ValueHolder@2435}\u003e © key= {Integer@2434} 1Y = value = {ConstructorArgumentValu\u003e @ value = {RuntimeBean Reference 2438) \u003cmyPoi@ type =null@ name=null@ source = null@ converted = false@ convertedValue = nullY \u0026 (Integer@2436} 2 -\u003e {ConstructorArgumentValues$ValueHolder@2437}\u003e © key={Integer@2436} 2Y = value = {ConstructorArgumentValues$ValueHolder@2437}\u003e @ value = {RootBeanDefinition@1907} \"Root bean: class [org.springframework.aop.config.SimpleBeanFactoryAwareAspectinstanceFactory], scope=; abstract=false; lazyln--@ type =null@ name=null@ source = null https://blog.csdn.net/u013277209Da",
  "assets/20210312112321540-20230404010548-fwqxlk7.png": "\"myPoint' -\u003e {RootBeanDefinition@1844} \"Root bean: class [org.springframework.aop.aspectj.AspectJExpressionPointcut]; scope=prototype; abstract=false; lazylr…\"myCalculator\" -\u003e {GenericBeanDefinition@1846} \"Generic bean: class [com.bobo.aop.xml.MyCalculator]; scope=; abstract=false; lazylnit=false; autowireMode=0;“org.springframework.aop.aspect).AspectJPointcutAdvisor#4\" -\u003e {RootBeanDefinition@1848} \"Root bean: class [org.springframework.aop.aspectj.AspectJPointcut:--“org springframework.aop.aspect).AspectJPointcutAdvisor#2\" -\u003e {RootBeanDefinition@1850} \"Root bean: class [org.springframework.aop.aspect.AspectJPointcut:“org springframework.aop.aspect).AspectJPointcutAdvisor#3\" -\u003e {RootBeanDefinition@1852} \"Root bean: class [org.springframework.aop.aspect.AspectJPointcut:--“org springframework.aop.aspect).AspectJPointcutAdvisor#0\" -\u003e {RootBeanDefinition@1854} \"Root bean: class [org.springframework.aop.aspect.AspectJPointcut:--“org.springframework.aop.aspect).AspectJPointcutAdvisor#1\" -\u003e {RootBeanDefinition@1856} \"Root bean: class [org.springframework.aop.aspectj.AspectJPointcut:--“org.springframework.aop.config.internalAutoProxyCreator\" -\u003e {RootBeanDefinition@1858} \"Root bean: class [org.springframework.aop.aspectj.autoproxy.Aspect-~ V“logUtil\" \u003e {GenericBeanDefinition@1859} \"Generic bean: class [com.bobo.aop.xml.LogUtil]; scope=; abstract=false; lazyinit=false; auttipei/éogdesch).depertBA7G209 V",
  "assets/20210312112335180-20230404010548-88caepb.png": "Qoverride@ ro protected boolean shouldSkip(Class\u003c?\u003e beanClass, String beanName) { beanClass: \"class com.bobo.aop.xml.LogUtip// TODO: Consider optimization by caching the list of the aspect namesList\u003cAdvisor\u003e candidateAdvisors = findCandidateAdvisors() ;oug:MyTest.main() ~Variables+ * cobeanFactory.beanDefinitionMap = {ConcurrentHashMap@1286} size=9candidateAdvisors: size = 5if (advisor instanceof AspectJPointcutAdvisor \u0026\u0026((AspectJPointcutAdvisor) advisor) .getAspectName().equals(beanName)) {return true;\u003e. \u003e @beanName = \"logUtil”\u003e @ beanClass = {Class@1738} \"class com.bobo.aop.xml.Logutil” -- Navigate= {AspectJPointcutAdvisor@2733}= {AspectJPointcutAdvisor@2734}= {AspectJPointcutAdvisor@2735}(AspectJPointcutAdvisor@2736}= {AspectJPointcutAdvisor@2737}candidateAdvisors = {ArrayList@1993} size =5https://blog.csdn.net/u013277209,",
  "assets/20210312112415709-20230404010549-dxad0eg.png": "Y ® singletonObjects = {ConcurrentHashMap@4392} size = 13Y = \"myCalculator” -\u003e {MyCalculator$$EnhancerBySpringCGLIB$$ca047c14@4285} \"com.bobo.aop.xml.MyCalculator@7ce026d3\"= key=\"myCalculator\"* \u0026 value = {MyCalculator$$EnhancerBySpringCGLIB$$ca047c14@4285} \"com.bobo.aop.xml.MyCalculator@7ce026d3\"= \"systemEnvironment\" \u003e {Collections$UnmodifiableMap@4483} size = 52= \"org.springframework.aop.aspectj.AspectJPointcutAdvisor#4\" -\u003e {AspectJPointcutAdvisor@2737}v“org.springframework.aop.aspectj.AspectJPointcutAdvisor#2” -\u003e {AspectJPointcutAdvisor@2735}= “org.springframework.aop.aspect).AspectJPointcutAdvisor#3\" -\u003e {AspectJPointcutAdvisor@2736}= “org.springframework.aop.aspect).AspectJPointcutAdvisor#0\" -\u003e {Aspect JPointcutAdvisor@2733}= “org.springframework.aop.aspect).AspectJPointcutAdvisor#1\" -\u003e {AspectJPointcutAdvisor@2734}“org.springframework.aop.config.internalAutoProxyCreator\" -\u003e {AspectJAwareAdvisorAutoProxyCreator@1785} \"proxyTargetClass=false; optimize=false; opaqu-~\\\u0026 “applicationEventMulticaster\" -\u003e {SimpleApplicationEventMulticaster@4485}\"environment\" \u003e (StandardEnvironment@4487} \"StandardEnvironment {activeProfiles=[], defaultProfiles=[default], propertySources=[PropertiesPropertySourc-~\\\"logutil\" \u003e {Logutil@2827}= \"systemProperties\" -\u003e {Properties@4489} size = 53 https://blog.csdn.net{u013277209vvvvvvvvvvvrT",
  "assets/20210312112455588-20230404010549-34zd9o4.png": "es Aware(@+ SnartInstantiationAwareBeanPostProcessor.igs AbstractAdvisorAutoProxyCreator下@+ AspectJAwareAdvisorAutoProxyCreatorhttps://blog.csdn.net/u013277209,",
  "assets/20210312161057440-20230404010551-9fs07i7.png": "ev BeanPostProcessor|—,—le» Awaretot©» InstantiationAwareBeanPostProcessole» ordered@* ProxyConfig |®» BeanClassLoaderAware|日AopInfrastructureBean © BeanFactoryAware||ry© = SmartInstantiationAwareBeanPostProcesso!ry@ = ProxyProcessorsupport,'@ AbstractAutoProxyCreato!ryi» AbstractAdvisorAutoProxyCreato!不© = AspectJAwareAdvisorAutoProxyCreatory@ = AnnotationAwareAspectJAutoProxyCreato!ryhttps://blog.csdn.net/u013277209,",
  "assets/20210313121913548-20230404010532-e8bev91.png": "ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext( configLocation: \"boboAopXmlTest.xmL\")j»MyCalculator bean = context.getBean(MyCalculator.class); bean: \"com.bobo.aop.xml.MyCalculator@332729ad\" contiمرq +2.8 [MyTest.main()] “ a -Variables+© beanFactory.beanDefinitionMap = Cannot find local variable 'beanFactory’© args = {String[0]@2075}\u003e = context = {(ClassPathxmlApplicationContext@2076} \"org.springframework.context.support.ClassPathXm|ApplicationContext@35bbe5e8, started on Sat Mar 13 09.30… Vie\u003e @ CGLIBSCALLBACK_0 = {CglibAopProxy$DynamicAdvisedinterceptor@2133}\u003e @ CGLIBSCALLBACK_1 = {CglibAopProxy$StaticUnadvisedinterceptor@2134}\u003e @ CGLIBSCALLBACK_2 = {CglibAopProxy$SerializableNoOp@2135}\u003e @ CGLIBSCALLBACK_3 = {CglibAopProxy$StaticDispatcher@2136}\u003e @ CGLIBSCALLBACK_4 = {CglibAopProxySAdvisedDispatcher@2137}\u003e @ CGLIBSCALLBACK_5 = {CglibAopProxySEqualsinterceptor@2138}\u003e @ CGLIBSCALLBACK_6 = {CglibAopProxy$HashCodelnterceptor@2139}https://blog.csdn.net/u013277209,",
  "assets/20210313121943797-20230404010532-nvh618w.png": "Y @proxy={MyCalculatorS$EnhancerBySpringCGLIB$Scfa21dd@2077} \"com.bobo.aop.xml.MyCalculator@332729ad\"© CGLIBSBOUND = false\u003e @ CGLIBSCALLBACK_0 = {CglibAopProxy$DynamicAdvisedinterceptor@2133}\u003e @ CGLIBSCALLBACK_1 = {CglibAopProxy$StaticUnadvisedinterceptor@2134}\u003e @ CGLIBSCALLBACK_2 = {CglibAopProxy$SerializableNoOp@2135}\u003e @ CGLIBSCALLBACK_3 = {CglibAopProxy$StaticDispatcher@2136}\u003e @ CGLIBSCALLBACK_4 = {CglibAopProxySAdvisedDispatcher@2137}\u003e @ CGLIBSCALLBACK_5 = {CglibAopProxySEqualsinterceptor@2138}\u003e @ CGLIBSCALLBACK_6 = {CglibAopProxySHashCodelnterceptor@2139} https:/blog.csdn.netu013277209",
  "assets/20210313121955722-20230404010532-r2o5f4m.png": "\u003e @clazz={class@1814] \"class com.bobo.aopxmlMyCalculator'… Navigate@slot=1\u003e @name= \"add\"\u003e @ returnType = {Class@256} \"class java.lang.Integer\" -- Navigate\u003e @ parameterTypes = {Class[2]@2179}@ exceptionTypes = {Class[0]@2180}© modifiers =1 signature = null@ genericnfo = null@ annotations = null@ parameterAnnotations = null annotationDefault = null@ methodAccessor = nullv@ root = {Method@21¢ 1} \"public java.lang.Integer com.bobo.aop.xml.MyCalculator.add (java.lang,integer,java.lang. Integer)\"@ hasRealParameterDaia =@ parameters = null https://blog.csdn.net/u013277209",
  "assets/20210313122008618-20230404010532-jqkjm96.png": "\"9args={Object2]@2160}\u003e 三0={integer@2185}1\u003e 三1={integer@2185}1Error in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/20210313122021756-20230404010532-0ze7ovu.png": "\u003e @sigl={Ssignature@2166} \"add (Ljava/lang/Integer;Ljava/lang/Integer;)Ljava/lang/Integer;’\u003e @ sig2 = (Signature@2167} \"CGLIBSadd$0(Ljava/lang/Integer;Ljava/lang/Integer;) java/lang/Integer;\"\u003e @createinfo = {MethodProxy$Createlnfo@2168}\u003e ® initLock = {Object@2169}@ fastClassinfo = null",
  "assets/20210313122037208-20230404010532-dyuer3k.png": "",
  "assets/20210313122054711-20230404010531-u93i0dk.png": "v = chain ={ArrayList@2287} size=6{Exposelnvocationlnterceptor@2264}\u003e {AspectJAfterThrowingAdvice@2266} \"org.springframework.aop.aspectj.AspectJAfterThrowingAdvice: advice method [public static voiv = 2={AfterReturningAdviceinterceptor@3745}\u003e {@ advice = {Aspect JAfterReturningAdvice@2270} \"org springframework.aop.aspectj.AspectJAfterReturningAdvice: advice method [public s{AspectJAfterAdvice@2274} “org springframework.aop.aspect).AspectJAfterAdvice: advice method [public static void com.bobo.aop.xr{AspectJAroundAdvice@2278} “org.springframework.aop.aspect).AspectJAroundAdvice: advice method [public java.lang.Object com.bY © 5=(MethodBeforeAdviceinterceptor@3746}\u003e B advice = (AspectJMethodBeforeAdvice@2282} \"org,springframework.aop.aspect}.AspectJMethodBefordéttpsiislog.eisirmetindd JArI/209 irv",
  "assets/20210313122120743-20230404010532-vgfs4la.png": "\u003e Task :spring-debug:compileJava UP-TO-DATE\u003e Task :spring-debug:classes UP-TO-DATE\u003e Task :spring-debug:MyTest.main()CGLIB debugging enabled. writing to '/home/bobo'Tog---环绕通知start: add方法开始执行，参数为: [1, 1]https:/blog.csdn.net/u013277209",
  "assets/20210313122136526-20230404010531-2rsu1ez.png": "\u003e Task :spring-debug:MyTest.main()CGLIB debugging enabled, writing to '/home/bobo'1og---环绕通知start: add方法开始执行，参数为: [1, 1]1og---add方法开始执行: 参数是[1，1]",
  "assets/20210313122149283-20230404010532-sa9jv55.png": "Bo)public Object around(ProceedingJoinPoint pjp) throws Throwable { pjp: \"execution(Integer com.bobo.aop.xml.MyCalcu”—\u003eSignature signature = pjp.getSignature(); signature: \"Integer com.bobo.aop.xml.MyCalculator.add(Integer, Integy.Object[] args = pjp.getArgs(); args: Object[2]@2224Object result = null; result: nulltry {System.out.printLn(\"Log---环绕通知start: \"+signature.getName()+\"方法开始执行，参数为: \"+Arrays.asList(args)); sSystem.out.printLn(\"Log---环绕通知stop\"+signature.getName()]+\"方法执行结束\") ;} catch (Throwable throwable) {System.out.printLn(\"Log---环绕异常通知: \"+signature.getName()+\" HWS\");throw throwable;}finally {System.out.printLn(\"Log---环绕返回通知: \"+signature.getName()]+\"方法返回结果是:了return result;|\"+result) ;ig tehttps://blog.csdn.net/u013277209Error in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/20210313122202581-20230404010532-ced1t19.png": "\u003e Task :spring-debug:MyTest.main()CGLIB debugging enabled, writing to '/home/bobo'1og---环绕通知start: add方法开始执行，参数为: [1, 1]1og---add方法开始执行: 参数是[1，1]Log---环绕通知stopadd方法执行结束1og---环绕返回通知: add方法返回结果是: 2https://blog.csdn.net/u013277209",
  "assets/20210313122218409-20230404010532-28miaop.png": "QoverrideJ public Object invoke(MethodInvocation mi) throws Throwable { mi:了try {// 执行下一个通知/拦截器\"ReflectiveMethodInvocation: public Java.1ca] finally {// 后置通知的方法总是会被执行,原因就在这finaLLyinvokeAdviceMethod(getJoinPointMatch(), returnValue: nuLL， ex: null);https://blog.csdn.net/u013277209,",
  "assets/20210313122232515-20230404010531-9jecznc.png": "\u003e Task :spring-debug:MyTest.main()CGLIB debugging enabled, writing to '/home/bobo'1og---环绕通知start: add方法开始执行，参数为: [1，11]1og---add方法开始执行: 参数是[1，1]Tog---环绕通知stopadd方法执行结束1og---环绕返回通知: add方法返回结果是: 21og---add方法执行结束。。。。。overhttps://blog.csdn.net/u013277209",
  "assets/20210313122244713-20230404010532-8v35qfn.png": "QoverridetO public Object invoke(MethodInvocation mi) throws Throwable { mi: \"ReflectiveMethodInvocation: public Java.1// 执行下一个通知/拦截器// 返回通知方法this.advice.afterReturning(retVal, mi.getMethod(), mi.getArguments(), mi.getThis());return retVal;https://blog.csdn.net/u013277209,",
  "assets/2021031312225676-20230404010531-s9ff6kn.png": "\u003e Task :spring-debug:MyTest.main()CGLIB debugging enabled, writing to '/home/bobo'1og---环绕通知start: add方法开始执行，参数为: [1，11]1og---add方法开始执行: 参数是[1，1]Tog---环绕通知stopadd方法执行结束1og---环绕返回通知: add方法返回结果是: 21og---add方法执行结束。。。。。over1o9---add方法执行结束，结果是: 2 httpsilblog.csdn.netu013277209",
  "assets/20210313122310361-20230404010532-uixxe76.png": "Qoverridepublic Object invoke(MethodInvocation mi) throws Throwable { mi: \"ReflectiveMethodInvocation oldInvocation = invocation.get(); oldInvocation: nullinvocation.set(mi);try {return mi.proceed(); mi: \"ReflectiveMethodInvocation: public java. la+J finally {| imacaton see otavention: ateavention: mitthttps://blog.csdn.net/u013277209,Error in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/20210313122322850-20230404010531-tmcv8ac.png": "afterThrowing ania1 iexposeTnvocatontnterceptoroseRsLr Tes *知来执行，相当于是联系者LY VvafterRiefurning P| AsepctiAfterReturingAdvicei2 invokerix里after SINTER3 ia 的around oa过程4 |全| 。中全用before iisbeforessiebefore [-P} sound ria5 过程中执行的环绕通知start: add方法开始执行，参数为: [1, 1] around-add方法开始执行: 参数是[1, 1] beforepen eee haeited around回通知: add方法返回结果是: 2行结束，。。。。over afteradd人方法执行结束，结果是: 2 afterReturning",
  "assets/20210316161812219-20230404010815-61zwrq7.png": "Y = propertySources = {MutablePropertySources@1309} \"[PropertiesPropertySource {name='systemProperties'}, SystemEnvironmentPropertySource fname='systemEnv…Y ® propertySourceList = {CopyOnWriteArrayList@1338} size=3y{PropertiesPropertySource@1340} \"PropertiesPropertySource {name='systemProperties'}\"\u003e Blogger = {LogAdapter$JavaUtilLog@1348}\u003e Bname= \"systemProperties\"\u003e @ source = {Properties@1350} size=53{SystemEnvironmentPropertySource@1341} \"SystemEnvironmentPropertySource {name='systemEnvironment’}\"\u003e Blogger = {LogAdapter$JavaUtilLog@1345}\u003e Bname= \"systemEnvironment”\u003e @ source = {Collections$UnmodifiableMap@1347} size = 61{ResourcePropertySource@1302} \"ResourcePropertySource {name='class path resource [dbconfig.properties]'}\"8 resourceName = null\u003e Blogger = {LogAdapter$JavaUtilLog@1321}\u003e ®@name= \"class path resource [dbconfig.properties]\"© \"jdbc.url\" -\u003e \"jdbc:mysql://localhost:3306/demo\"= \"jdbc.username' -\u003e \"root\"\"jdbcpassword\" -\u003e \"zhac= \"jdbc.driverClassName\" -\u003e \"com.mysql.jdbc.Driver\" https://blog.csdn.net/u013277209",
  "assets/2021031616183286-20230404010815-rqgsrgy.png": "",
  "assets/2021031616184999-20230404010815-gl7kyyl.png": "Y :E postProcessorNames = {String[3]@1546}“org.springframework.context.annotation .internalAutowiredAnnotationProcessor\"“org.springframework.context.annotation.internalCommonAnnotationProcessor\"2=\"org.springframework.aop.config.internalAutoProxyCreator\"Error in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/20210316161907563-20230404010814-vw3vfim.png": "‘8 factoryBeanObjectCache = {ConcurrentHashMap@4091} size=0Y ® singletonObjects = {ConcurrentHashMap@3270} size = 23\u003e \"idbcTemplate\" -\u003e (JdbcTemplate@4848}“org.springframework.context.annotation.internalConfigurationAnnotationProcessor\" -\u003e {ConfigurationClassPostProcessor@1153}\"bookService\" -\u003e {BookService$$EnhancerBySpringCGLIB$$14676e66@4863} \"com.bobo.tx.annotation.service.BookService@53142455\"\"bookDao\" -\u003e {BookDao$$EnhancerBySpringCGLIB$$5a8cfld4@4853} \"com.bobo.tx.annotation.dao.BookDao@2dd29a59\"“org.springframework.context.event.internalEventListenerFactory\" -\u003e {DefaultEventListenerFactory@3229}“org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration\" -\u003e {ProxyTransactingpaprag eeantheuloasar T2004",
  "assets/20210316161933334-20230404010814-zckb9vu.jpg": "扫描EnableTransactionManagementAOP通知器检测实例方法中是否有事务AutoProxyRegistrar infrastructureA dvisorAutoProxyCreator 注解，并放入缓存Import， . ， 增强的TiansactionManagementConfigurationSelector BeanFactoryTransactionAttributeSourceAdvisor AOP增强的通知器AnnotationTransactionAttributeSource 解析事务注解属性TransactionInterceptorTransactionalEventListenerFactoryinvokeBeanFactoryPostProcessorsregisterBeanPostProcessorsfinishBeanFactoryInitializationEventListenerMethodProcessorf¥postProcessBeanFactory中创建TransactionalEventListenerFactory创建InfrastructureAdvisorAutoProxyCreatorInfrastructureAdvisorAutoProxyCreator的第一次postProcessAfterInitialization方法的wrapInNecessary中就会创建BeanFactoryTransactionAttributeSourceAdvisor所有实例化的类都会经过InfrastructureAdvisorAutopProxyCreator的postProcessorAfterInitialization中的wrapIfNecessary判断是否是需要创建事务代理类为BeanFactoryTransactionAttributeSourceAdvisor是bean注解的工厂方法，所以要先实例化工厂factoryBean,也就是实例化ProxyTransactionManagementConfiguration为BeanFactoryTransactionAttributeSourceAdvisor工厂方法有参数依赖，所有要注入依赖，创建AnnotationTransactionAttributeSource和TransactionInterceptor实例最后反射调用方法创建BeanFactoryTransactionAttributeSourceAdvisor设置依赖属性AopUtilfindAdvisorsThatCanApplyTransactionAttributeSourcePointcut的AnnotationTransactionAttributeSource获取方法属性AnnotationTransactionAttributeSource的computeTransactionAttributefindTransactionAttribute优先根据方法注解解析，然后是类注解",
  "assets/20210319091230710-20230404010808-9vewvjc.png": "@* Advice @* Awarel@« Interceptor| |\\@*« InitializingBean| @* BeanFactoryAwarerN(@= TransactionAspectSupport, [一@* TransactionInterceptor@* MethodInterceptorhttps:/blog.csdn.net/u013277209",
  "assets/20210324201215778-20230402222916-76us5cz.gif": "",
  "assets/20210324203827626-20230402222916-wm7ww3o.gif": "",
  "assets/20210324205129590-20230402222916-itnijdj.gif": "",
  "assets/20210324205927538-20230402222917-20rdbhd.gif": "",
  "assets/20210324211453685-20230402222915-ep2vf87.gif": "",
  "assets/20210324212237591-20230402222916-mg3ffw9.png": "之前跟着CSDN 大佬的博客学习Spring一“作者呈的很好还成了Spring 的开源丙献者，在他简介里有提Bisa.«回:«coum “’Ctea a as",
  "assets/20210324212324405-20230402222916-yiq5kv6.png": "ze ce | Spring官网阅读(一) 容器及实例化程序员DMZ 2143 2F+ 8374 255+ 属ei] asee ee ee 分类专栏: 。 Spring言网污书笔记\u0026 Rte etspring, SRE 实例化f6347 1189 1952 950-3418积分he从今天开始, Blt aisprngiem, os, ea ESR, HCA, KEATS坊代理的文章，还是污Spring的官网，都是为了之后对Spring的源玛做更全而细歼的学习，所以在这个过程中，不会涉及过允底层的代码，更多是通过例子证明我们在言网得出的结论，希望自己可以坚持下来，给自己加个油! 1 |Co ae Bee 本文主要涉及到言网中的1.2 , 1.3节。eS eS ar a",
  "assets/20210526125429824-20230407010500-r94pw93.png": "aoP体系execution_ (BRRAAS)一-一Pointout\u003e 《切点)-二Li a[Aspect |CN)| Before《前置处理)Weaving织入1 )After《后置处理)Target advisor ] seein | - 、joinPoint | advice 《环绕处理)《连接点》 ) /AfterReturningae一CRESS)| AfterThrowing《异常处理)",
  "assets/20210526134209833-20230407010500-ug01ycg.png": "",
  "assets/20210526164926651-20230407010500-73l388d.png": "Springaop《〈一) 切面类解析流程GEnabledspectJAutoProxyCreateBean@Inport (AspectJautoProxy |Registrar. class)(—» PostProcessBetoretnst ant |dation检测:是否是\u0026spectJ注解的类AopConfiglitils. registerA)spectJAnnotationAutoProxyCreatorlfNecessary (regi shouldSkip\\ stry) \\Effamnct ati ondvareAspectJautoProxyCreato 本所有avieernnotationawareaspectJan |toProzyCreator, classfindCandidateddvisors()了BeanPostProcessor人有eeSmartInstantiationhwareB |this. aspectJAdvisorsBuil |der.eanPostProcessorbuildaspectJAdvisors0解析所有|的ahspectJ只会解析一次，HEIRString[] beanNanes遍历出所有的@Aspect AZ检测是否是\u0026spectJ注解的类a解析出所有的\u0026dvice查找所有的advisor把所有的结果存放到缕存中得到所有的Advisorthis. aspectBeanNanes| pectic:return advisors| Fm所有的一Bean|-|-|-‘BeanFactoryUtils. b |eanllanesForTypelneLudingAncestors (this. beanFactory,Object. class,true, false): _this. advisorFactory. ishspect (beanType)List\u003cAdvisor\u003eclassAdvisors =this. advisorFactory. getAdvisors (factory)this. advisorsCache= put (beanNane,classAdvisors)",
  "assets/20210526172618493-20230407010500-8nsnopd.png": "Springdop (—) 创建切面代理流程GEnabledspectJAutoProxyCreateBeanGInport (Aspect JautoProxyRegistrar. class)postProcessAfterInitializationSnencianinkAopConfigiitils. registerspectJAnnotationAutoProxyCreatorIfllecessary (regi wrapltNecessary\\ stry): -‘EiflnotationtvarchepectautaProssCreato advisorAmotationdwaredspectJéu‘toProxyCreator. class了BeanPostProcessor+etddvicesindAdvisorsForB | 查找findELigiblesdvean(bean. getClass() advisor isorsejlib动态代理SnartInstantiationAwareBeanPostProcessorcreateProxyClasSindinstanceane new -ProxyFactory()| TD动态代理newProxyInstanc",
  "assets/20210602172251507-20230331081932-splfobe.png": "@*\u0026 Wrapper @% CommonDataSource@% DataSource@%® InitializingBean 加AbstractDataSource% AbstractRoutingDataSource",
  "assets/20210602172251507-20230331090724-os6xywx.png": "@*\u0026 Wrapper @% CommonDataSource@% DataSource@%® InitializingBean 加AbstractDataSource% AbstractRoutingDataSource",
  "assets/20210608193738627-20230331091345-t9m5797.png": "@\u0026 AttributeAccessor(€)% AttributeAccessorSupport @% BeanMetadataElementa-1© BeanMetadataAttributeAccessor @*\u0026 Cloneable @% BeanDefinition(€)% AbstractBeanDefinition @%\u0026 AnnotatedBeanDefinition@\u0026 SuppressWarnings | | @ % GenericBeanDefinition |‘= ScannedGenericBeanDef.",
  "assets/20210616095329616-20230331091345-y3amw6p.png": "*/QOverridepublic void setResourceLoader(@Nullable ResourceLoader resourceLoader) {this.resourcePatternResolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader) ;‘omponentsIndex = CandidateComponentsIndexLoader . LoadIndex(this.resourcePatternResolver.getClassLoader());",
  "assets/20210616105910254-20230331091345-mfizx99.png": "\u0026 spring.componentscom. Kingfish. SpringAopApplication=org. springframework. stereotype. Componentcom. kingfish.aop.User=com.kingfish.annotation.MyComponentcom. kingfish.controLler.IndexContorLler=com.kingfish. controller. IndexContorLler, org.springframework. stereotype. Component",
  "assets/20210616143115752-20230331091345-lqh8ez0.png": "名Evaluateot bean: class [org.springf. Vic),HtionHolder@4327} \"Bean defi... View® qualifiedElement = null@ stale = false® allowCaching = true@ isFactoryMethodUnique = false® targetType = null® resolvedTargetType = null® isFactoryBean = null二factoryMethodReturnType = null® factoryMethodTointrospect = null\u003e ® constructorArgumentLock = {Object@4328}® resolvedConstructorOrFactoryMethod = null® constructorArgumentsResolved = false® resolvedConstructorArguments = null® preparedConstructorArguments = null\u003e ® postProcessingLock = {Object@4329}® postProcessed = false® beforeinstantiationResolved = null® externallyManagedConfigMembers = null1 vtarallyMananadinitMathade - nullCloseEvaluate 加J 原始BeanDefinitionExpression:oo result = {ScannedGenericBeanDefinition@3544}® parentName = null\u003e ® beanClass = \"com.kingfish.aop.User\"\u003e @scope=\"\"® abstractFlag = false@ lazyini© autowireMode =0® dependencyCheck = 0® dependsOn = null® autowireCandidate = false® primary = false® qualifiers = {LinkedHashMap@4459} size = 0® instanceSupplier = null® nonPublicAccessAllowed = true® lenientConstructorResolution = truenull@ factoryBeanName = null® factoryMethodName = null® constructorArgumentValues = null® propertyValues = nullSURIASHhadowarridac = IMathadOwarridac@AAGO.2 plEvaluatenc|Close",
  "assets/20210624140952117-20230406114032-gcby1zf.png": "org. springframework. boot. autoconfigure .internalCachingMetadataReaderFactoryConfigurationAabAs tae —- NaemyConfigtestController @ControllertestDao @RepositorytestService @Serviceorg. springframework. boot .autoconfigure.AutoConfigurationPackages",
  "assets/20210624141152799-20230406114031-elvwyzf.png": "org.springframework.boot.autoconfigure.internaLCachingMetadataReaderFactorymyConfig TestDao没有使用组件注解注册，testControllertestService 扫描不到org.springframework.boot.autoconfigure.AutoConfigurationPackages",
  "assets/20210624203943640-20230406114032-7pywr8i.png": "org.springframework.boot.autoconfigure.internaLCachingMetadataReaderFactorymyConfigtestServicetestDaoorg.springframework.boot.autoconfigure.AutoConfigurationPackages",
  "assets/20210624210534943-20230406114032-lzxwo8n.png": "v 四com\u003e troll\u003e on ronsr QC @SpringBootApplicationlaoo 1 | غاغا5 be service SG \u003e public class MainApplication {V Ba splay\u003e Eu config » public static void main(String[] args) {(@ MainApplication ConfigurableApplicationContext context = SpringApplication.run(MainApplication.class, args\u003e [ME resources ~ apsetest ed = eS String[] names = context.getBeanDefinitionNames() ;a target for (String name : names) {2 -gitignore System. out.print1n(name);3, HELP.md+mvnwmmvnw cmd",
  "assets/20210624210736998-20230406114032-v4gaqql.png": "org.springframework.boot.autoconfigure.internaLCachingMetadataReaderFactorymyConfigtestcontrotter 只有Controller注解标记的组件Neen",
  "assets/20210624223011916-20230406114032-xlm8hhv.png": "----\u003ecom.controller.TestControllerwaren eeen eee\u003ecom. service. TestServicewaren eeen eee\u003ecom.dao.TestDaoorg. springframework.boot.autoconfigure. internalCachingMetadataReaderFamyConfigtestController 包含ertestServiceora. snrinaframewank. haat .autacanfiaure. AutaCantiauratinnPackaaes",
  "assets/20210710134349143-1-20230329113102-rn6y07l.png": "BeanDefinition—_— bean返回Bean给用户，并存入缓存池容器销毁|tiprototype bean返回Bean给用户，剩下的生命周期由用户控制代表Bean自身的方法代表Bean级生命周期方法代表容器级生命周期方法",
  "assets/20210710134349143-20230329112640-wcfzu0w.png": "BeanDefinition代表Bean自身的方法[|ha 代表Bean级生命周期方法a代表容器级生命周期方法ate—_—. bean prototype ee返回Bean给用户，并存入缓存池Bean给用户，剩下的生命周期由用户控制",
  "assets/20210710134349143-fub-20230329112944-u9ek520.png": "代表Bean自身的方法代表Bean级生命周期方法代表容器级生命周期方法",
  "assets/2069d83532c640d79d8cd1254e817ec0-20230404011826-kazfmg1.png": "头结点level数组level[2]跨度2level1 ed 33 | level[1] 一|一:| }+ 广\"(23| }- levell0] 县人",
  "assets/2dc8ef0dde1e4c47a1ec1fdd5faedeb3-20230404011826-bgu2b12.png": "LP_ENCODING_6BIT_STR类型6 bit保存字符串长度LP_ENCODING_12BIT_STR类型12 bit保存字符串长度LP_ENCODING_32BIT_STR类型=32 bit保存字符串长度",
  "assets/2e215d36250c453d86d80b86815f0a83-20230331085035-rk0jo7c.png": "国* Advisor ®® IntroductionInfoaa®® IntroductionAdvisorry‘© © DefaultintroductionAdvisor ‘© DeclareParentsAdvisor",
  "assets/347929992e304406a8b6479551d1d24f-20230407010621-fntj1sn.png": "\u003caop:aspectj-autoproxy,,.,./\u003e",
  "assets/3b6768032388428687694b0e06f9f1a4-20230404011823-ts7f9bf.png": "SDS数据结构字符数组现有长度字符数组的分配空间长度SDS类型字符数组",
  "assets/3c62f8d0b3ed1ece0988503b2d31057e-20230331092213-0wssc4y.png": "本地方法本(Native Mehod Stack)Javatt(VM Stack)HRVAS(Program Counter Register)运行时数据区(Runtime Data Area)",
  "assets/43fe416a304036e8f52ce4a89ba553cc-20230331092213-khnek5s.png": "",
  "assets/4cb51ab2cd014b57936dc2234fad64d0-20230404011823-dvz24vo.png": "数据结构的时间复杂度名称时间复杂度哈希表O(1)跳表O(logN)双向链表O(N)压缩列表O(N)整数数组O(N)",
  "assets/4fe980c4b6ad0277e6bda2432d716b7a-20230331092213-3lsjn01.png": "JIT代玛生成器",
  "assets/5c01a2ae31884140219a0421d51d38fe-20230402210129-vy6vfxp.png": "",
  "assets/5e0d0bd4c1214851bbfb9b3dfd99766c-20230404011820-eensg9o.png": "SDS全局Hash表dictEntryredisObjectCSDN @吃透Java",
  "assets/5e2c99498da74bb7bd1abe8f51e94724-20230404011825-2xxhbi3.png": "大小为LP_HDR_SIZEclistpackkB istpack元素数量| listpack entry | listpack entry | listpack entry | 255‘ . 调用IpFirst，指针向右偏移指针初始位置LP_HDR_SIZE，指向第一个列表项listpack总字节数stack listpack entry | listpack entry | listpack entry | 255: 1，调用IpNext;指针位置2. IpFirst调用IpSkip ;3. IpSkip调用IpCurrentEncodedSize获得编码类型和数据的长度之和;4. IpSkip调用IlpEncodeBacklen获得entry-len长度;5. 指针向右偏移，长度为编码类型、数据和entry-len的总长。listpack总字节数istpack元素数量| listpack entry | listpack entry | listpack entry | 255指针位置",
  "assets/6451e37dd57ccc1eacf9e4ab5f79a217-20230402210129-iu3mcwf.png": "",
  "assets/745e051617c43375a56a271d279e8355-20230402210130-f9coufb.png": "GenericBeanDefinition",
  "assets/7742c967d8304a9d988da278430d56cf-20230331082020-dtbe7xw.png": "®* Callback|®* Methodinterceptor ®® SerializableA A© ® DynamicAdvisedinterceptor",
  "assets/7742c967d8304a9d988da278430d56cf-20230331090740-0o3nd5g.png": "®* Callback|®* Methodinterceptor ®® SerializableA A© ® DynamicAdvisedinterceptor",
  "assets/808a110be7d240eb85436b647a933c95-20230407010621-mdctks0.png": "public class Aop1 {//前置通知public void startTransaction() { System.out.printin(\" ====\u003ebegin ding...//后置通知public void commitTransaction() { System.out.printin(\" ====\u003efinish ding..//环绕通知public void around(ProceedingJoinPoint joinPoint) throws Throwable{System.out.printin(\" ====\u003earound begin ding\"); //1//调用process ()方法才会真正的执行实际被代理的方法joinPoint.proceed();|System. out.printin(\" ====\u003earound finish ding\"); //3\"); 1/2}- \"); 1/4}SDN @vimBa",
  "assets/81169b39a4974ae4809c040dea22d1ea-20230407010621-vr8nbb1.jpeg": "Bre企业级云原生权限治理平台",
  "assets/819e4b1abaf54bfdbe079480e247df83-20230407011441-y9icltn.png": "public int addkint i, int//构切关注点1: 方法开始int result = @; int resulttry { try {result = i+ j;} catch (Exception e)}//构切关注点3: 方法结束return result;if一一1 //横切关注点1:public int mul(int Ji, int j) {法开始\"oresult = if* j;{ } catch (Excep#ion e) {}/ EMRE,return result;CSDN @",
  "assets/835c5f70a82a135c7e54b675f808ca34-20230402210129-q84py9s.png": "PathMatchingResourcePRscanCandidateComponents3 4iScI1S]总.S\u003cE 5后a$idaWwaacUVndCandidateComponentsClassPathBeanDefinitionner[一erComponentScanBeanDefinitionPaContextNamespacHandlerolverDefaultNamespaceHandlerReBeanDefinitionParserDeleggetResourcesp",
  "assets/84342db8e5ac4d1684281901c0cf1861-20230407011441-0s5qgi3.png": "add sub|时| |@JO |mul div@) |图| FEI全| [GD@) | @| sac",
  "assets/8b6dfdada71946c88758bdb4cd71da42-20230404011825-rtryfv9.png": "头结点[一level1rp后向指针指向前一个结点0前向指针指向下一个结点",
  "assets/8c225b8213064098b37728c3abcbe12c-20230408235544-wp7pbrc.png": "Y *@% Advice (org.aopalliance.aop)¥ @% Interceptor (org.aopaltiance. intercept)\u003e @% MethodInterceptor (org.aopaltiance. intercept)@% Constructorinterceptor (org.aopalLiance. intercept)¥ @% DynamictntroductionAdvice (org. springfranework.aop)¥ @% Introductioninterceptor (org.springfranework.aop)\u003e @% delegatingintroductionInterceptor (org. springfranework.aop.support)@ x delegatePerTargetObjectIntroductionInterceptor (org. springframenork.aop. support)¥ @% Beforehdvice (org. springfranework.aop)\u003e @% MethodBeforeddvice (org. springframenork.aop)@% MethodBeforehdviceTnterceptor (org. springfranework.aop. franework.adapter)© (Gu AbstractAspectJAdvice (org. springframenork.aop.aspectj)@% Aspecthfterhdvice (org. springframenork.aop.aspectj)@% AspectJAFterReturningkdvice (org.springfranework.aop.aspectj)@% AspectJAroundAdvice (org. springfranework.aop.aspectj)@% AspectIMethodBeforeAdvice (org. springframenork.aop.aspectj)@% AspectIAFterThrowingAdvice (org. springfranework.aop.aspectj) @% AtterAdvice (org. springframenork.aop)@% AfterReturningkdviceInterceptor (org.springfranework.aop. framework. adapter)@% ThronsAdvice (org. springfranework.aop)@% Aspecthfterhdvice (org. springframenork.aop.aspectj)@% AspectIAFterReturningkdvice (org.springfranework.aop.aspectj)@% AspectdAFterThrowingAdvice (org. springfranework.aop.aspectj)@% ThronsAdviceInterceptor (org. springfranework.aop.franework.adapter)\u003e @\u0026 AfterReturningAdvice (org. springfranework.aop)",
  "assets/8dd3d27afa4d6591d64d270ff09e9240-20230331092214-2wv7x2x.png": "{类加载器》Runtime Data Area(运行时数据区)",
  "assets/8ee222ccd9cc4879985c53c45e5a653d-20230407010621-vbe324b.jpeg": "Aumng x Re Quickrable 一7 pw上Authing | ar cs",
  "assets/8f0c0053e1bd40ee92c406e9b0598d91-20230404011823-hlbrkcp.png": "Redis数据类型和底层数据结构的对应关系StringSorted Set",
  "assets/9cf4dde664c746579095e2aec515af39-20230408235517-8n0ayio.png": "",
  "assets/9dbf37c27c7d961ac5ba719906e98b92-20230402210129-5gvg29g.png": "",
  "assets/a1ad92e8f8344b4fadee09a8767a845e-20230331085134-z4i9veu.png": "if (!registry.containsBeanDefinition(EVENT_LISTENER_PROCESSOR_BEAN_NAME)) {RootBeanDefinition def = new RootBeanDefinition(EventListenerMethodProcessor.class) ;def.setSource(source); source: nullbeanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_PROCESSOR_BEAN_NAME)); beanDefs:",
  "assets/a9752098553b465e878a5c1fe2799f88-20230407011441-lv0aes0.png": "| \"C:\\Program Files (x86)\\Java\\jdk1.8.0_51\\bin\\java.exe\" ...VaLidateAspect-\u003e前置通知LoggerAspect，方法: add，参数: [1，1]环绕通知- -\u003e前置通知方法内部: result=2环绕通知- -\u003e返回通知环绕通知- -\u003e后置通知LoggerAspect，方法: add，结果: 2LoggerAspect，方法: add，执行完毕aProcess finished with exit code 0",
  "assets/ae89abeabc004a7684963c28c67194f1-20230407010621-rjmf2jw.jpeg": "pp be 9be人4© Authing x (Ge -Authing 入选金融信创生态实验室《金融信创优秀解决方案》 于",
  "assets/af986012c2eb4ba28a3df8602cfabf51-20230404011829-ehnmr4p.png": "主线程Client 1Client 1",
  "assets/articleReadEyes2-20230404011747-unktnge.png": "",
  "assets/articleReadEyes2-20230404011832-il8ot2j.png": "",
  "assets/articleReadEyes2-20230404012245-bm1z70y.png": "",
  "assets/b05519647e264030af495f4086dd69b3-20230404011820-nwyojuq.png": "embstr编码- raw编码本int编码(字符串小于等于44字节) (字符串大于44字节)type (4bit)encoding4bit)type (4bit)encoding(4bit)encoding(4bit)RedisObjectrefcount(4B)int (8B)RedisObject RedisObject | Iu (24bit)refcount(4B)refcount(4B)*ptr (8B)*ptr (8B)buf (8B)(“hello\\O\")len (4B)alloc (4B)buf (8B)(“hello\\0\")SDS",
  "assets/b193af768f7e47b28ae4528f518fc257-20230407010621-k2f30px.png": "默认使用JdkProxy proxyTargetClasseerSDN @YimBa",
  "assets/b27ce484e5cc01bddd876072851e66ff-20230402210130-ylpou7i.png": "protected void registerComponents(Xm1lReaderContext readerContext, Set\u003cBeanDefinitionHolder\u003ebeanDefinitions, Element element) {Object source = readerContext.extractSource(element) ;CompositeComponentDefinition compositeDef = newCompositeComponentDefinition(element.getTagName(), source);for (BeanDefinitionHolder beanDefHolder : beanDefinitions) {compositeDef .addNestedComponent (newBeanComponentDefinition(beanDefHolder) ) ;}boolean annotationConfig = true;if (element.hasAttribute(ANNOTATION_CONFIG_ATTRIBUTE)) {annotationConfig =Boolean. parseBoolean(element.getAttribute(ANNOTATION_CONFIG_ATTRIBUTE) ) ;}if (annotationConfig) {Set\u003cBeanDefinitionHolder\u003e processorDefinitions =AnnotationConfigUtils.registerAnnotationConfigProcessors(readerContext.gé}Regoutce) ;for (BeanDefinitionHolder processorDefinition : processorDefinitions)compositeDef .addNestedComponent (newBeanComponentDefinition(processorDefinition) ) ;}readerContext .fireComponentRegistered(compositeDef) ;",
  "assets/b4ef942b8e3a4bf3b2a28b0787018e0e-20230404011823-mocqz5i.png": "entry2新增空间后，导致插入元素，entry1需要更大的prevlensize， entry3需要更大的prevlensize，引起entry1新增空间引起entry3新增空间entry1新增空间后，导致entry2需要更大的prevlensize，引起entry2新增空间",
  "assets/b628bfae8ef45022e4ac984c1d8cbd57-20230402210129-tm2ue8h.png": "public BeanDefinition parse(Element element, ParserContext parserContext) {String basePackage = element.getAttribute(BASE_PACKAGE_ATTRIBUTE) ;basePackage =parserContext.getReaderContext().getEnvironment().resolvePlaceholders(basePackage)3String[] basePackages = StringUtils.tokenizeToStringArray(basePackage,ConfigurableApplicationContext .CONFIG_LOCATION_DELIMITERS) ;ClassPathBeanDefinitionScanner scanner = configureScanner(parserContext,element) ;Set\u003cBeanDefinitionHolder\u003e beanDefinitions = scanner.doScan(basePackages) ;registerComponents(parserContext.getReaderContext(), beanDefinitions,element) ;return null;",
  "assets/badge-20230404005858-foq3007.png": "",
  "assets/badge-20230404012138-d8q9cj9.png": "",
  "assets/badge-20230404012245-hqqyycp.png": "",
  "assets/bbfca01eadbf4094b7189deb893af0ee-20230331085036-mx9u9n5.png": "else if (advisor instanceof IntroductionAdvisor) {IntroductionAdvisor ia = (IntroductionAdvisor) advisor;if (config.isPreFiltered() || ia.getClassFilter().matches(actualClass)) {Interceptor[] interceptors = registry.getInterceptors(advisor) ;interceptorList.addAll(Arrays.asList(interceptors));",
  "assets/bd56c884ce2a4a4d98d6b92df2912f34-20230331085134-sr2ifj1.png": "7 Diagram for EventListenerMethodProcessor@* Functionalinterface @*® aware@® \u0026 BeanFactoryPostProcessor @®%\u0026 SmartinitializingSingleton @®% ApplicationContextAware‘®) % postProcessBeanFactory(ConfigurableListableBeanFactory) void _ ft) * afterSingletonsinstantiated() voidA A‘f) % setApplicationContext(ApplicationContext) void© % EventListenerMethodProcessorff % afterSingletonsinstantiated() void ® isSpringContainerClass(Class\u003c?\u003e) boolean® '\u0026 postProcessBeanFactory(ConfigurableListableBeanFactory) void™ @ processBean(String, Class\u003c?\u003e) void而setApplicationContext(ApplicationContext) void",
  "assets/bfd7c5b4d44c49598cfcca9f5b936bf3-20230404011828-sl7qdru.png": "select 1024 遍历所有描述符poll 自定义人遍历所有描述符、 epoll_wait自动返回就绪的描述符，epoll 自定义未就绪的描述符不返回CSDN @吃:va",
  "assets/c3239b1ad22446a890d0c6b630763cc7-20230404011829-9df46my.png": "Client 1Client 1GSON Oli ava",
  "assets/c36999dff4474cb79be11b62d62e44e2-20230407011441-w2sp6er.png": "a‘ 1要1 110 |1S |1OO |3!11",
  "assets/ccac506d12784ffaa5258c02da3e47bb-20230404011838-di98tq1.png": "16 bits 8 bitsredisObject结构体的Iru变量(24 bits)",
  "assets/cd9cdc470764001342c5e2b98e212a24-20230331092213-sx69un7.png": "BREBRPAE ANEan |aaa eeebck 方法返回地址(Stack Frame)Em附加信息(Stack Frame)zn(Stack Frame)oe(Stack Frame)Em(Stack Frame)",
  "assets/cdda77cb148c4412b55ee4bfc1b1f976-20230407010621-0dt8xvc.png": "SpringFramework",
  "assets/cfa72b29e1f24177a235813a32a0fc6c-20230404011825-4ox2rbj.png": "LP_ENCODING_7BIT_UNIT类型A7 bit的无符号整数",
  "assets/commentArrowRightWhite-20230404012245-lpa5ys8.png": "",
  "assets/d05e96a35d4d4e2691ea3093da57a6b0-20230404011825-spp6pvz.png": "quicklist链表头quicklist链表尾下|quicklistNode quicklistNode quicklistNodequicklistNodeziplistziplistziplist ziplist",
  "assets/d0eaced87c5847f8be8c7a362024f01f-20230404011829-q338wn6.png": "Client",
  "assets/d114851d1af5442a831d2a899510656b-20230402210130-13kpcgr.png": "public BeanDefinition parseCustomElement(Element ele, @Nullable BeanDefinitioncontainingBd) {String namespaceUri = getNamespaceURI(ele) ;if (namespaceUri == null) {return null;NamespaceHandler handler =this.readerContext .getNamespaceHandlerResolver().resolve(namespaceUri) ;if (handler == null) {error(\"Unable to locate Spring NamespaceHandler for XML schemanamespace [\"“ + namespaceUri + \"|\", ele);return null;return handler.parse(ele, new ParserContext(this.readerContext, this,containingBd) ) ;}",
  "assets/d9ab8195aa8440ce987298258924bafd-20230404011826-pezx8bb.png": "entry-encoding entry-data entry-lenCSDN @吃透",
  "assets/d9f24e4f52864f37a61ea01369753e5b-20230407011441-rr2w11t.png": "@语法细节用*号代替\"权限修饰符'和'返回值'部分表示'权限修饰符'和\"返回值'不限在包名的部分，一个“*\"号只能代表包的层次结构中的一层，表示这一层是任意的。o 例如: *.Hello匹配com.Hello，不匹配com.atguigu.Hello在包名的部分，使用'“*.…表示包名任意、包的层次深度任意在类名的部分，类名部分整体用*号代替，表示类名任意在类名的部分，可以使用*号代蔡类名的一部分9 例如: *Sservice匹配所有名称以Service结尾的类或接口在方法名部分，可以使用*号表示方法名任意在方法名部分，可以使用*号代蔡方法名的一部分o 例如: *Operation匹配所有方法名以Operation结尾的方法在方法参数列表部分，使用(..)表示参数列表任意在方法参数列表部分，使用(int…)表示参数列表以一个int类型的参数开头在方法参数列表部分，基本数据类型和对应的包装类型是不一样的9 切入点表达式中使用int 和实际方法中Integer 是不匹配的在方法返回值部分，如果想要明确指定一个返回值类型，那么必须同时写明权限修饰符o 例如: execution(public int ..Service.*(.., int)) 正确o 例如: execution(* int ..Service.*(.., int)) 错误方法返回值参数列表| 方法所在类型的全类名方法名|个execution(public in t com.atguigu.spring.aop.target.Calculator] piv| int'int扮\u003e 使用(..)形式表示参数列表任意Y K )ae ’ / 方法名全部用*号代替，表示方法名人pean a SMP SRS, ARBRSERRS \"表示权限修饰符和返回信任意方法名部分用*号代蔡， 例如: get'*，表示史配以get开头的方法这里写*号表示包名任意这里写*.表示包名任意同时包的层次深度任意类名全部用*号代替，表示类名任意类名部分用*号代替，例如: *Service，表示匹配以Service结尾的类或接口",
  "assets/ded0d65a8f0bf679ffa39ba45146807f-20230402210130-odtwws4.png": "protected void processConfigurationClass(ConfigurationClass configClass,Predicate\u003cString\u003e filter) throws IOException {sourceClass = doProcessConfigurationClass(configClass, sourceClass,filter);}while (sourceClass != null);",
  "assets/deponc_book-20230331093549-4h4cevj.jpg": "Data engineeringpatterns onthe cloudA list of 84 cloud native patterns to solvecommon data engineering problemswaitingfor{code}.comBartosz KoniecznyRe",
  "assets/deponc_book-20230331093716-b1ybku2.jpg": "Data engineeringpatterns onthe cloudA list of 84 cloud native patterns to solvecommon data engineering problemswaitingfor{code}.comBartosz KoniecznyRe",
  "assets/deponc_book-20230331093807-ruc25d6.jpg": "Data engineeringpatterns onthe cloudA list of 84 cloud native patterns to solvecommon data engineering problemswaitingfor{code}.comBartosz KoniecznyRe",
  "assets/deponc_book-20230331093953-hj6n69z.jpg": "Data engineeringpatterns onthe cloudA list of 84 cloud native patterns to solvecommon data engineering problemswaitingfor{code}.comBartosz KoniecznyRe",
  "assets/deponc_book-20230331094046-00c9xzk.jpg": "Data engineeringpatterns onthe cloudA list of 84 cloud native patterns to solvecommon data engineering problemswaitingfor{code}.comBartosz KoniecznyRe",
  "assets/deponc_book-20230331094054-f3chkyr.jpg": "Data engineeringpatterns onthe cloudA list of 84 cloud native patterns to solvecommon data engineering problemswaitingfor{code}.comBartosz KoniecznyRe",
  "assets/devote.fe704c8a-20230407010621-6euh9tq.svg": "",
  "assets/e07e3a233356cb46f954593c76b2f9a1-20230402210129-znrdm4t.png": "",
  "assets/eba0943a3c3d49acb377b92d20ee50ef-20230331085035-0z7m74x.png": "@*® Advice4®® DynamicintroductionAdviceA®® Introductioninterceptor‘© * DelegatingIntroductionInterceptor ‘© DelegatePerlargetObjectintroductioninterceptor",
  "assets/eef88e877e7d4c219b39cc1324bc48c5-20230331085134-d0oyhmx.png": "FE Diagram for TransactionalApplicationListenerMethodAdapter@®*® Eventlistener © Functionalinterface ©)% ApplicationEvent@® © ApplicationListener\u003cE\u003e@® GenericApplicationListener 国TransactionalApplicationListener\u003cE\u003e© % ApplicationListenerMethodAdapter© © TransactionalApplicationListenerMethodAdapterCSDN @",
  "assets/f26cbbed871a4562aa3ad22b9d69992f-20230404011829-6ghhtt8.png": "Client一一Proactor Initiator.1 wee1 se1创建vHandler内核进程Asynchronous Operation ProcessorProactor",
  "assets/f97be0504d52417ab6e2e94407a4dc94-20230407011441-te16d1a.png": "Spring基于注解的AOP的情况",
  "assets/f9fed9f8c71945dbbf2ff64d2b863dfc-20230331091400-gju99lh.png": "MethodMatcher mmpointcutaAdvisor.getrointcut() .gethethodMatcher();boolean match; =9if (mm instanceof IntroductionAwareMethodMatcher) { 5if (hasIntroductions == null) { 号hasIntroductions = hasMatchingIntroductions(advisors, actualClass);} 一国8(CintroductionAwareMethodMatcher) mm).matches(method, actualClass, hasIntroductions); 2\"1 iB MethodMatcherfmatches广法Amm.matches(method, actualClass) ; x=zif (match) {if (mm.isRuntime()) {// Creating a new object instance in the getInterceptors() method// isn't a problem as we normally cache created chains.. . 如果runTime = tnue，则包装为for (MethodInterceptor interceptor : interceptors) { InterceptorAndDynamicMethointerceptorList.add(new InterceptorAndDynamicNethodMatcher(interceptor, mm)); Matcher 添加到集合中，否刚直接添jn集合中+else {interceptorList.addAll(Arrays.asList(interceptors));",
  "assets/fb97a50647784dc3a93ae1d0716aadec-20230407010621-a52lj4v.png": "\u003caop:config\u003e\u003caop:pointcut expression=\"execution(* io.kimmking.aop.*.*(..))\" id=\"p1\" /\u003e \u003c!--切点--\u003e\u003caop:aspect ref=\"aop1\"\u003e \u003c!--切面--\u003e\u003caop:around method=\"around\" pointcut-ref=\"p1\" /\u003e \u003c!--环绕通知--\u003e\u003caop:before method=\"startTransaction\" pointcut-ref=\"p1\" /\u003e \u003c!--前置通知--\u003e\u003caop:after-returning method=\"commitTransaction\" pointcut-ref=\"p1\"/\u003e \u003c!--后置通知--\u003e\u003c/aop:aspect\u003e-- \u003caop:advisor pointcut-ref=\"p1\" advice-ref=\"aop3\"/\u003e--\u003e\u003c/aop:config\u003eSDN @vimBa",
  "assets/fc51c34b59c7f9a2d900e0d90b11fa2d-20230402210129-7wp4al9.png": "public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {// ERE 6con Fi gurat ion RIESConfigurationClassParser parser = new ConfigurationClassParser(this.metadataReaderFactory, this.problemReporter,this.environment,this.resourceLoader, this.componentScanBeanNameGenerator,registry);Set\u003cBeanDefinitionHolder\u003e candidates = new LinkedHashSet\u003c\u003e(configCandidates) ;Set\u003cConfigurationClass\u003e alreadyParsed = new HashSet\u003c\u003e(configCandidates.size());do {// fmecomponent @ComponentScan @ComponentScans @Bean @Import@ImportResourceparser.parse(candidates) ;parser.validate();",
  "assets/icon-default-20230407011441-rpz3h85.png": "",
  "assets/iconAddWhite-20230404005858-pl2ljzg.png": "",
  "assets/image-20230321105834-jb5wxx9.png": "5 操作系统的运行机制是怎样的OIE操作系统的运行机制。 re人申断处理过程nmD--国人-6 一@关中断@引出中断产生一个故障中断FESTt 指令2 a wanes一一指令3指令4 IPS",
  "assets/image-20230321110707-o83d4go.png": "第一章bean的元数据一、回顾bean的注入方式1、xmlI1 \u003cbean id=\"user\" class=\"com.ydlclass.User\" scope=\"prototype\" autowire=\"byType\" init-method=\"init™depends-on=\"a,b\" \u003e\u003cproperty name=\"name\" value:\u003cproperty name=\"age\" value=\"4 \u003c/bean\u003e\"jerry\"/\u003e8\"/\u003exm2. TERR1 @Controller2 public class UserService {}1 @Service2 @Dependson(value = {\"xxx\", \"yyyy\"})3 public class UserService {}1 @Repository2 public class UserDao {}@Compoment@Dependson(value = {\"xxx\", \"yyyy\"})public class RedisTemplate {}wm",
  "assets/image-20230321140007-dmssm6m.png": "(@Uverride ipublic Object instantiate(RootBeanDefinition bd, @Nullable String beanName, BeanFactc// Don't override the class with CGLIB if no overrides.if (!bd.hasMethodOverrides()) {Constructor\u003c?\u003e constructorToUse;synchronized (bd.constructorArgumentLock) {",
  "assets/image-20230321140039-s6d1609.png": "Jelse {// Must generate CGLIB subclass.return instantiateWithMethodInjection(bd, beanName, owner);",
  "assets/image-20230321144830-eriw3ec.png": "no usages@Testpublic void test(){Object user = beanFactory.getBean( name: \"user\");Object userFactory = beanFactory.getBean( name: \"\u0026user\");logger.info(\"user --\u003e{} \",user);° logger.info(\" --\u003e{} \",userFactory) ;©: ww Tests passed: 1 of 1 test - 275 mstoryTest (com.ydiclass.spr 275 ms275 msBeanFactoryTest : Starting BeanFactoryTest using Java 17.0.5 with PID 11576 (started byBeanFactoryTest : No active profile set, falling back to 1 default profile: \"default\"BeanFactoryTest : Started BeanFactoryTest in 0.923 seconds (process running for 1.554)BeanFactoryTest : user --\u003eUser{username='###)i', age=30}BeanFactoryTest : userFactory --\u003ecom.ydlcLlass .UserFactoryBean@5ae15",
  "assets/image-20230321145448-0tdre2t.png": "public class UserFactoryBean implements FactoryBean\u003cUser\u003e {@Overridepublic User getObject() throws Exception {return new User( username: \"楠老师\"，age: 30);@Overridepublic Class\u003c?\u003e getObjectType() {return User.class|;",
  "assets/image-20230321151448-sxtm87h.png": "@Component(\"user|\")public class UserFactoryBean implements FactoryBean\u003cUser\u003e {@Overridepublic User getObject() throws Exception {// 可能很复杂，帮助我们完成复杂对象的创建return new User( username: \"楠老师\"，age: 30);@Overridepublic Class\u003c?\u003e getObjectType() {return User.class;",
  "assets/image-20230321151805-cey2u26.png": "二、bean工厂的创建一个典型的功能强大的bean工厂实现，就是DefaultListableBeanFactory，事实上我们的容器中维护的beanFactory都是这个类的实例;我们看一下该类的类图:这里简单的总结一下，一个完整的bean工厂应该具备哪些能力?1、bean工厂的芭础能力，枚举bean，分层，自动装配、独立配置等。2、注册单例bean (包括Factorybean) 的能力。3、注册别名的能力。",
  "assets/image-20230321151947-pqwody2.png": "地YY| 上下文创建后，我们该做人什么。 。 |。 bean工厂创建后，我们该做什么|| 所有的beanDefinition注册后，我们二点什么，比如再注册一些bean实例化前，我们干点什么bean实例化后，我们干点什么bean的属性填充前，我们干点什么bean MERI, RFRAhbean调用初始化方法前，我们干点什么bean调用初始化方法后，我们干点什么所有的bean都实例化完成了，我们干点祭4 - - ---- -一-\u003espringSSSeTHRRRIS BA SPRAPOSTProcessor, tH0/EHSs. Mee EBANBeanFactoryPostProcessor#f]BeanPostProcessor，我们可以写如下的用例做测试:",
  "assets/image-20230321152144-6wh3s3t.png": "四、了解扩展点spring给我们提供了很多的扩展点，这些扩展点可以多许我们在spnng上下文启动的任意环节进行干预，实现自己的膛辑。我们大致将spring的启动环节回一个图，当然他可能不准确，我们只是想将大致的环节勾勒出来，然后看看其中的可以扩展的地方。后午处理器的核心作用就是当容器的一项工作做完了，我们可以做点什么补充扩展atopen \u003e ,Y v上下文创建后，我们该做什么bean工厂创建后，我们该做什么所有的beanDefinition注册后，我们干点人— - - - _ - \u003e么，比如再注册一些bean实例化前， 了们二点什么—_\u003e \u003c\u003ebean实例化后，我们干点什么+-- : ea eet 1bean的属性填充前，我们干点什么w--F \u003e \u003ebean的属性填充后，我们干点什么人\\----\u003c@ \u003e\u003e :bean调用初始化方法前，我们干点什么4 i ibeaniMMMKARE, RFRA 4- - - ~~~ -\u003c \u003e \u003c\u003e-一一一一所有的bean都实例化完成了，我们干点祭4 - -----------\u003e",
  "assets/image-20230321152210-tt32bxy.png": "当然实现类内容和过程基本一致，如下:1 public AnnotationConfigApplicationContext(String... basePackages) {2 thisQ:3 scan(basePackages) ;4 refreshQ);5 }refresh()方法被定义在AbstractApplicationContextd个大章节进行讲解。和，该方法会引导spring8上下文的启动，所以十分重要，下边我们会和独出一",
  "assets/image-20230321152308-c9hafch.png": "我们观豪一下这个实现类的构造器如下，整个构造的过程如下，在之前的课程中，我们已经学习了加载beanDefintion的过程，下个章节我们就进入【刷新容器的部分】:1 public GenericXm1App1icatipnContext(Resource... resources) {2 J/ 1、加载资源3 load(resources);4 // 2、刷新容器5 refreshgO ;5 }",
  "assets/image-20230321152743-ntmgpcr.png": "我们在之前的学习中常常下的ApplicationContext实现: FileSystemXmlApplicationContext,ClassPathXmlApplicationContext这里就不演示了。spring3.0之后我们更推荐如下的实现类，GenericApplicationContext作为一个通用的上下文类，给我们提供了丰富的实现, 如下:wu NYous1112@Testpublic void testxmlConfigQO{GenericxmlApplicationContext xmlApplicationContext = newGenericxmlApplicationContext(\"classpath:spring.xm1\");User user = xmlApplicationContext.getBean(User.class);System. out.printIn(user);]] -一xmlApplicationContext = new GenericxmlApplicationContext(\"file:D://spring. xml\");user = xmlApplicationContext.getBean(User.class);System. out.printIn(user);",
  "assets/image-20230321152811-0akpd56.png": "我们编写如下测试类，然3析一下，我们注册的线程会在何时调用1 public class TestBeanFactory {23 @Testzl public void testxmlConfig() throws InterruptedException {5 MyGenericApplicationContext myGenericApplicationContext = newMyGenericApplicationContext() ;6 myGenericApplicationContext. registerShutdownHook() ;7 System.out.printin(\"before\");8 Thread.sleep(2000) ;9 System.out.printIn(\"after\");10 }11 }1213 GR:14 before I15 after16 BSA, wre Tew!",
  "assets/image-20230321152832-ofx5cwe.png": "我们可体会一下registerShutdownHook的用法，我们自己写一个容器类继承GenericApplicationContext:1 public class MyGenericApplicationContext extends GenericApplicationContext {23 private Thread shutdownHook = null;45 @Override6 public void registerShutdownHook() {7 if (this.shutdownHook == null) {// No shutdown hook registered yet.3 this.shutdownHook = new Thread(SHUTDOWN_HOOK_THREAD_NAME) {10 @Ooverrideuu public void runQ {12 System.out.println(\"容器关闭了，该干啥干啥吧! \");13 }14 515 Runtime. getRuntime() . addShutdownHook (this . shutdownHook) ;16 } I17 +",
  "assets/image-20230321152849-cmytgdh.png": "// 配置和获取环境对象void setEnvironment(ConfigurableEnvironment environment) ;ConfigurableEnvironment getEnvironmentQ);// 设置一个启动器void setApplicationStartup(ApplicationStartup applicationStartup) ;ApplicationStartup getApplicationStartup();// 增加BeanFactoryPostProcessorvoid addBeanFactoryPostProcessor(BeanFactoryPostProcessor postProcessor) ;// 增加/删除Listenervoid addApplicationListener (ApplicationListener\u003c?\u003e listener);void removeApplicationListener(ApplicationListener\u003c?\u003e listener);// 设置类加载器void setClassLoader(ClassLoader classLoader);// 增加协议解析策略， 我们可以定义对应解析器解析自定义协议void addProtocolResolver(ProtocolResolver resolver);// PRBS, BPHvoid refreshQ) throws BeansException, IllegalStateException;// PIWMETNAM-TARABT, EIWAAMKAMETR, RECS RARA, TMADMT-void registerShutdownHook() ;// 关闭这个容器释放她锁定的所有的资源Goverridevoid close();// 确定一个上下文是否是活跃的，已经被刷新，没有关闭boolean isActiveQ);// 获得上下文中持有的bean工厂ConfigurableListableBeanFactory getBeanFactory() throws I11egalStateException;",
  "assets/image-20230321152906-17cbz7m.png": "其子接口ConfigurableApplicationContextz寺ApplicationContext进行了扩展:1 public interface ConfigurableApplicationContext extends ApplicationContext, Lifecycle, Closeable {23 // 定义配置路径的分隔符4 String CONFIG_LOCATION_DELIMITERS = \",; \\t\\n\";56 // ConversionServicefJ BF7 String CONVERSION_SERVICE_BEAN_NAME = \"“conversionService\";8 String LOAD_TIME_WEAVER_BEAN_NAME = “loadTimeWeaver\"™;9 String ENVIRONMENT_BEAN_NAME = “environment”;10 String SYSTEM_PROPERTIES_BEAN_NAME = “systemProperties\";11 String SYSTEM_ENVIRONMENT_BEAN_NAME = “systemEnvironment\";12 String APPLICATION_STARTUP_BEAN_NAME = \"“applicationStartup\";13 String SHUTDOWN_HOOK_THREAD_NAME = “SpringContextShutdownHook\" ;1415 // 给上下文设置一个唯一的id16 void setId(String idys1718 // 设置一个父上下文19 void setParent(@Nullable ApplicationContext parent);",
  "assets/image-20230321152958-yj2ev54.png": "一个ApplicationContext继承了五个接口，共同为一个上下文赋能，这些接口我们都已经接触过了:1. EnvironmentCapable: 提供一个上下文环境的能力2. ListableBeanFactory: 枚举bean工厂的bean的能力3. HierarchicalBeanFactory: 分层的能力4. MessageSource: 国际化的能力5. ApplicationEventPublisher: 发布事件的能力1 public interface ApplicationContext extends EnvironmentCapable, ListableBeanFactory,HierarchicalBeanFactory,MessageSource, ApplicationEventPublisher, ResourcePatternResolver {23 // 返回一个4 @Nullable5 String getId(Q); I67 // 返回此上下文所属的已部署应用程序的名称。8 String getApplicationName();910 // 返回此上下文的显示名称11 String getDisplayName(Q);1213 // 返回第一次加载此上下文时的时间戳。14 long getStartupDate();1516 // BORER17 @Nul lable18 ApplicationContext getParent();1920 // 为此上下文公开AutowireCcapab1eBeanFactory功能。21 AutowireCapableBeanFactory getAutowireCapableBeanFactory() throws IllegalStateException;2223}",
  "assets/image-20230321153027-ajfhfn9.png": "三、认识SpringApplicationSpringApplication是应用程序的中央接口，提供一些便利的功能，引导Spring的程序进行启动，他是我们学习spring中的重中之重, 理解了SpringApplication我们就学会了spring。spring8上下文提供了丰富的功能，拥有强大的能力，一切的spring的知识内其实都是为了服务个SpringApplication，下图展示了SpringApplication中的一些核心接口和类:usaiessenectarne) ——7 Messagetourcetto本和a se i seabgatasyanenanooscationC anteRS REEN cs Ca3 ‘Feleccenaowesaa cereicapolcaontoet ‘cenercwebaccicanenCorersAAPWERADplicaboaComeah®, preg3. ERE \"i ARCANE TRAsa‘Aeerectheremnaniecontgtosieatarc ntact 8 8 eenereninciseatanonent nesRANA aiE ROR Arnatatontaniighpohaionreent \u003e zar 本至全下上下= \" . Ganramamingpicaton omen ath \u0026 er",
  "assets/image-20230321153143-5rmgec3.png": "三、了解扩展点3pring给我们提供了很多的扩展点，这些扩展点可以多许我们在spring上下文启动的任意环节进行十蔬，实现自己的逻辑。我们大致将spring的启动环节画一个图，当然他可能疏售确，我们只是想将大致的环节勾勒出来，然后看看其中的可以扩展的地方。后置处理器的核心作用就是当容器的一项工作做完了，我们可以做点什么补充扩展5 amen“tmsetain 5 \u003e¥ Y上下文创建后，我们该做什么bean工厂创建后，我们该做什么所有的beanDefinition注册后，我们干点什么，比如再注册一些bean实例化前，我们干点什么bean实例化后，我们干点什么bean的属性填充前，我们干点什么bean的属性填充后，我们干点什么bean调用初始化方法前，我们干点什么bean调用初始化方法后，我们干点什么所有的bean都实例化完成了，我们干点人4 - -----------\u003c\u003c",
  "assets/image-20230321153524-7ewagu3.png": "spring给我们提供的常用的扩展点称为POSTProcessor，也叫后填器。而我们最常使用的BeanFactoryPostProcessor和BeanPostProcessor，我们可以写如下的用例做测试:",
  "assets/image-20230321153702-agmifdh.png": "@Componentpublic class MyBeanFactoryPostProcessor implements BeanFactoryPostProcessor {@Override :@ public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {// 核心目的是对bean工三做额外的于预System.out.printLn(\"beanFactory-----------------\u003epostProcessBeanFactory\");",
  "assets/image-20230321153828-hyvgo2m.png": "@Componentpublic class MyBeanPostProcessor| implements BeanPostProcessor {@Overridepublic Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {System. out. printLn(beanName+\" ----------------\u003epostProcessBeforeInitialization\") ;return bean;Ip@Overridepublic Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {System. out. printLn(beanName+\" ----------------\u003epostProcessAfterInitialization\");return bean;",
  "assets/image-20230321155120-cnpqrhf.png": "",
  "assets/image-20230321155233-qso98ad.png": "四、认识ApplicationContextApplicationContekt 2 iv FR FRI, Fe SRIORE, S| SSpringheruTiaa), test Sspring4重，理解了ApplicationContext我们就学会了spring。spring8上下文提供了丰富的功能，拥有强大的能力，一切的spring的知识内其实都是为了服务一个ApplicationContext，下图展示类.了SpringApplication中的一些核心接口和ES:h的重中之",
  "assets/image-20230321155344-47pogki.png": "",
  "assets/image-20230321184243-hajxgr3.png": "我们看到的任何构建applicationContext的过程都是两步走:1, ieee2, WUE刷新容器的核心目的就是实例化我们的容器和容器内的bean，这是sprin8g最核心的地方，没有之一。容器几乎所有的工作都会在这个时间段完成，但是有一个前提就是就是此时所有的元数据搜集工作应该完成，相应的beanDefinition已经准备好了，保存在DefaultListableBeanFactory的map中:1 private final Map\u003cString, BeanDefinition\u003e beanDefinitionMap = new ConcurrentHashMap\u003c\u003e(256);刷新容器的核心能力保留在AbstractApplicationContext类中，子类也可以去扩|展，如spring mvc 、springboot等:ILlegalStateEx«Choose Implementa© ServlLetWebServerAppLicationContext我们可以看一下在servletWebserverApplicationContext中的扩展如下: 核心还是父类的刷新能力，仅仅在容器启动失败后，将web服务关闭:",
  "assets/image-20230321223950-wdpl456.png": "Q@overridepublic final void refresh() throws BeansException, IllegalStateException {try {super.refresh();了catch (RuntimeException ex) {WebServer webServer = this.webServer;if (webServer != null) {webServer.stop();}throw ex;",
  "assets/image-20230321224052-oayf5vv.png": "我们大致浏览一下这个方法的全狐:1 @Override2 public void refresh() throws BeansException, IllegalStateException {3 synchronized (this.startupShutdownMonitor) {4 //使用步骤检测应用程序标记启动。5 StartupStep contextRefresh = this.app1icationStartup.start(\"spring.context.refresh \");67 // 为刷新依准备，为当前的上下文记录状态，赋值等。8 prepareRefresh();910 // 保证获得一个新的工厂11 ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();1213 // 为bean工厂的启动做准备14 prepareBeanFactory(beanFactory) ;1516 try { I7 // 空方法，留给子类扩展，去修改工厂配置或新增bean定义都可18 // 和BeanFactoryPostProcessor类似19 postProcessBeanFactory(beanFactory) ;20 StartupStep beanPostProcess = this.applicationStartup.start(\"spring.context.beans.post-process\");21 // 调用上下文中注册为BeanFactoryPostProcessors的bean22 invokeBeanFactoryPostProcessors (beanFactory) ;23 // 注册bean的的后置处理器用于拦截bean的创建。《〈扩展点24 registerBeanPostProcessors (beanFactory) ;25 beanPostProcess.end();26 // 初始化Messagesource ，用于国际化i18n27 initMessageSource();28 // 初始化EventMu1ticaster ，用于广播事件",
  "assets/image-20230321224114-2vkvv9q.png": "initApplicationEventMulticaster();// 给子类预留的方法，子类可以独立实现，出事化一些特定的beanonRefresh();// 检测所有的1isteners bean并注册registerListeners();// 完成bean工厂的实例化，初始化所有的非同加载的单例beanfinishBeanFactoryInitialization(beanFactory) ;// 完成刷新，并发布相应的事件FinishRefresh();} catch (BeansException ex) {// 销毁已经创建的单例以避免浪费资源。destroyBeans ();// 重置\"active \"标志。cancelRefresh(ex) ;throw ex;} finally {// 重置Spring核心中的缓存，消除启动中所用的缓存资源，// 因为我们已经不需要哪些单例bean的元数据了.resetCommonCaches () ;contextRefresh.end();",
  "assets/image-20230321224128-4bvsq6f.png": "java不重要的小知识: IStartupStep是spring提供的步骤检测应用程序，核心容器及其基础结构组件可以使用ApplicationStartup在应记步骤，并收集关于执行上下文或其处理时间的数据，我们可以使用一个子类测试一下:证动期间标1 @Test2 public void testApplicationStartup() {3 BufferingApplicationStartup startup = new BufferingApp]icationStartup (32);4 StartupStep startupStep = startup.start(\"程序即将启动! \");5) startupStep. tag(\" \"XXXX\") 36 startupStep.tag(\"第二步\"， \"xxxx\");startupStep.endQ);9 StartupStep startupStep2 = startup.start(\"程序即将启动21 \");10 startupStep2.tag(\"第一步2\"，\"xXXXX\") ;11 startupStep2.tag(\"S 22\", \"xxxx\");12 startupStep2.end();13 了通过debug我们发现，该组件将每一个步骤部在内存中保存了起来。当然，我们可以定制开发，将记录的步骤保存在任何地方。",
  "assets/image-20230321224814-orlvbnv.png": "一、准备刷新| prepareRefresh()阶段1 protected void prepareRefresh() {2 // 记录了启动时间和容器当前状态《〈非关闭、活跃中)3 this.startupDate = System.currentTimemillis();4 this.closed.set (false);5 this.active.set (true);67 // 初始化我们定义的PropertySource8 initPropertySources ();910 // 验证所有标记为[必需]的属性都是[可解析] 的11 // 简单如: 通过this.getProperty(key) == nu11判断存在的key是否有可用的value12 getEnvironment ().validateRequiredProperties();43:14 // 初始化一些前置刷新的监听器，默认没有，子类可以实现15 // 刷新容器【可以是从未启动到启动〗,， 【也可以在启动中刷新】，当然像有的实现类只允许刷新一次16 // 这本质上是将监听器初始化17 if (this.earlyApplicationListeners == null) {18 this.earlyApplicationListeners = new LinkedHashSet\u003c\u003e(this.applicationListeners) ;19 }20 else {21 // 将本地应用程序监听器器重置为刷新前状态。22 // 清空原有的，新增早期的必须的监听器23 this.applicationListeners.clear();24 this. applicationListeners.addAl11(this.earlyApplicationListeners) ;25 }",
  "assets/image-20230322143903-q7fhljh.png": "下这个方法:1 @Overridepublic void preInstantiateSingletons() throws BeansException {if Clogger.isTraceEnabled()) {logger. trace(\"Pre-instantiating singletons in4 + this);5 3// 创建一个beanDefinition的副本，而非直接使用父类的原始数据8 List\u003cString\u003e beanNames = new ArrayList\u003c\u003e(this.beanDefinitionNames) ;10 // 触发所有非情性单例bean的初始化-11 for (String beanName : beanNames) {12 // 合并bean的定义13 RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName) ;14 // ABRA, BA), TEM ASK NAT Se HL15 if (!bd.isAbstract() \u0026\u0026 bd.isSingleton() \u0026\u0026 !bd.isLazyInitQ)) {16 // 如果是工厂bean需要加一个前缀才能获得17 // Sd MRES18 // 工厂bean会优先实例话自己，内部的getObject方法，不会在这里主动调用19 if (isFactoryBean(beanName)) {20 Object bean = getBean(FACTORY_BEAN_PREFIX + beanName);21 // smartFactoryBean提供了延迟加载的能22 if (bean instanceof SmartFactoryBean\u003c?\u003e smartFactoryBean \u0026\u0026smartFactoryBean.isEagerInitQ) {23 getBean(beanName) ;24 }25 }26 else {27 getBean (beanName) ;28 }29 }30 }eal32 // 触发所有适用bean的初始化后回调33 // 此过程和指定init方法不同，而是所有bean实例化后可以执行的操作，34 // SmartInitializingSingleton: 所有bean实例化后执行35 // init方法: 当前bean实例化后执行回调",
  "assets/image-20230322143942-yeczfjf.png": "一、整体流程在一切准备工作就绪之后(这些工作包括加载beanDefinition，准备bean工厂，初始配置等等) ，finishBeanFactorylnitialization方法将会发挥及其重要的作用，实例化所有的单例pean，以下是该方法的整体概览:注: 以下内容中，我们经常看到getBean方法，他比较核心，通过这个方法，我们就可以实例化一个bean，并注册到容器中,该方法比较复杂我们稍后做讲解。1 protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {2 // 初始化conversion service ，并注册到上下文，用于类型转化.〈conversionservice)3 // 这也就以为着我们需要注入一个Conversionservice，springboot有自动注入。4 if (beanFactory.containsBean (CONVERSION_SERVICE_BEAN_NAME) \u0026\u00265 beanFactory. isTypeMatch (CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) {6 // 此处的目的是为了实例化ConversionService7 beanFactory.setConversionService( I8 beanFactory.getBean (CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));9 31011 // StringvalueReso1ver适配器，用于针对Configurab1eBeanFactory解析占位符和表达式。12 // 这里主要用来解析注解上的占位符红. . .上13 if (!beanFactory.hasEmbeddedvalueResolver()) {14 beanFactory.addEmbeddedValueResolver(strval -\u003egetEnvironment().resolveP laceholders(strval));15 }1617 // 尽早初始化LoadTimewWeaverAware bean ，以便尽早注册它们的转换器。18 // ApplicationContext中实现了LoadTimeweaverAware接口的bean可以接收一个指向载入时织入实例的引用。19 String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeweaverAware.class, false,false);20 for (String weaverAwareName : weaverAwareNames) {21 getBean (weaverAwareName) ;22 }2324 // TempclassLoader来临时解析bean类名，如果需要的话。25 beanFactory.setTempClassLoaderCnul11);2627 // 清理元数据缓存，冻结配置，不允许beanDefinition进行修改28 beanFactory. freezeConfiguration();",
  "assets/image-20230322144015-92jelsp.png": "二、实例化prelnstantiateSingletons()方法是bean工厂实例提供的，我们的常用的默认实现就是DefaultListableBeanFactory，我们且看一",
  "assets/image-20230322144043-dyimcce.png": "30a// 核心: 实例化所有剩余的(非1jazy-init)单例。beanFactory.preInstantiatesingletons();",
  "assets/image-20230322144201-oy5dh3g.png": "第五章完成单例bean的初始化| finishBeanFacrtorylnitializarion(beanFactory)阶段",
  "assets/image-20230322144252-9uri3g7.png": "2、有删除内省缓存计算机科学中，内省是指计算机程序在运行时(Run time) 检查对象(Object) 类型的一种能力，通常也可以称人运行时类型ae, 相对于内省，反射更进一步，是指计算机程序在运行时(Run time) 可以访问、检测和修改它本身状态或行为的一种能力。1 protected void resetCommonCaches() {2 ReflectionuUtils.clearCache();3 AnnotationUtils.clearCache() ;4 ResolvableType.clearCache();5 CachedIntrospectionResults.clearclassLoader (getClassLoader());6 }8 public static void clearCcacheQ {9 declaredMethodsCache.clear();10 declaredFieldsCache.clearQ;11/}12 public static void clearcacheQ {13 AnnotationTypeMappings.clearCache();14 AnnotationsScanner.clearCache();15|}16 public static void clearcacheQ) {17 cache.clear();18 SerializableTypewrapper.cache.clear();",
  "assets/image-20230322144323-kgvyhwk.png": "synchronized (this.disposableBeans) {disposableBeanNames = StringUtils.toStringArray(this.disposableBeansxfor (int i = disposableBeanNames. length - 1; i \u003e= 0; i--) {destroySingleton(disposableBeanNames [i]);this.containedBeanMap.clear(Q;this. dependentBeanMap.clear();this.dependenciesForBeanMap.clear();clearSingletonCache();protected void clearSingletonCache() {synchronized (this .singletonobjegts) {this.singletonObjects.clear(Q);this.singletonFactories.clear();this.earlySingletonObjects.clear();this.registeredSingletons.clear();this.singletonsCurrentlyInDestruction = false;-keySetQ);",
  "assets/image-20230322144348-jdt9rb8.png": "1、销毁bean I1 public void destroySingletons() {2 if (logger.isTraceEnabled()) {3 logger. trace(\"Destroying singletons in \" + this);4}5 synchronized (this.singletonObjects) {6 this.singletonsCurrentlyInDestruction = true;7 }9 String[] disposableBeanNames ;",
  "assets/image-20230322144408-k12qrz0.png": "// 销毁已经创建的单例以避免悬空资源destroyBeans ();// 重置\"active \"标志。cance1Refresh(ex) ;// 向调用者传播异常。throw ex;ifinally {// 重置Spring核心中的公共内省缓存，因为我们可能再也不需要单例bean的元数据了-…resetCommonCaches () ;contextRefresh.end();",
  "assets/image-20230322144435-8q2jq1e.png": "三: 恢复现场123436catch (BeansException ex) {if (logger. iswarnEnabled()) {logger.warn(\"Exception encountered during context initialization -\"cancelling refresh attempt: \" + ex);}igh asesommasmeskeas °destroyBeans ();// 重置\"active \"标志。cancelRefresh(ex) ;// 向调用者传播异常。throw ex;}7 finally {// 重置Spring核心中的公共内省缓存，因为我们可能再也不需要单例bean的元数据了-…resetCommonCaches ();contextRefresh.end();+",
  "assets/image-20230322144500-apg926o.png": "十一、完成bean工厂的初始化| finishBeanFactorylnitialization(beanFactory)阶段此方法非常复杂，我们独立一个章节讲解，在这里会完成所有的单例bean的创建过程。二、完成刷新| finishRefresh()阶段I1 protected void finishRefreshQ {2 // 清除上下文级资源缓存(例如扫描AsM元数据) 。3 clearResourceCaches ();45 // 初始化一个生命周期处理器，并标志为running状态;6 initLifecycleProcessor(Q);getLifecycleProcessor().onRefresh();9 // 发布最终事件。10 pub1ishEvent(Cnew ContextRefreshedEvent(this));1IE|}上边的内容告诉我们，我们可以订阅ContextRefreshedEvent事件，在容器启动后完成一些初始化操作。",
  "assets/image-20230322144544-cyledj9.png": "protected void registerListeners() {getApplicationEventMulticaster() .addApplicationListener(listener) ;人名Evaluate xExpression|getApplicationlisteners()Result:v ooresult = {LinkedHashSet@5267} size = 130 =1",
  "assets/image-20230322144559-4tn16fv.png": "22|}protected void registerListeners() {// 首先注册静态指定的侦听器。比如用编程的方式加入:for (ApplicationListener\u003c?\u003e listener : getApplicationListeners()) {getApplicationEventMulticaster().addApplicationListener (listener);// 获得bean的名字String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, true, false);// 只需要加入名字即可，不要实例化，可以让容器去实例化，我们发布事件时会筛选和缓存for (String listenerBeanName : listenerBeanNames) {getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName) ;// 发布早期应用程序事件，一般也没有，也是可以拓展的Set\u003cApplicationEvent\u003e earlyEventsToProcess = this.earlyApplicationEvents;this.earlyApp]icationevents = null;if C!collectionUtils. isEmpty(earlyEventsToProcess)) {for (ApplicationEvent earlyEvent : earlyEventsToProcess) {getApp]icationEventMulticaster() .multicastEvent(earlyEvent) ;boot工程在启动时会定义并注册很多实现如下，boot在启动过程很多工作是依靠监听器完成的:",
  "assets/image-20230322144619-an0buud.png": "十、注册监听器| registerListeners()阶段",
  "assets/image-20230322144639-r8ovsil.png": "getApplicationStartup().start(\"spring.boot.webserver.create\");6 ServletWebServerFactory factory = getWebServerFactory();createWebServer.tag(\"factory\", factory.getClass().toString());8 this.webServer = factory.getwebserver(getSse1fInitializerO);9 createwebServer.end();10 getBeanFactory().registerSingleton(\"webServerGracefulShutdown\",11 new WebServerGracefulShutdownLifecycle(this.webServer));12 getBeanFactory().registerSingleton(\"webServerStartStop\",13 new WebServerStartStopLifecycle(this, this.webServer));14 }15; else if (servletContext != null) {16 try {17 getSelfInitializer().onStartup(servletContext) ;18 }19 catch (ServletException ex) {20 throw new ApplicationContextException(\"Cannot initialize servlet context\", ex);21 } I22 }23 initPropertySources();24 }更多的内容我们再学习web拓展的时候再深入。",
  "assets/image-20230322144658-rol7cku.png": "web环境下在此阶段会创建一个服务器:1 private void createWebServer() {2 WebServer webServer = this.webServer;3 ServletContext servletContext = getServletContext();4 if (webServer == null \u0026\u0026 servletcontext == null) {5 StartupStep createWebServer =getApplicationStartup().start(\"spring.boot.webserver.create\");6 ServletwebServerFactory factory = getWebServerFactory();7 createWebServer.tag(\"factory\", factory.getClass().toString());8 this.webServer = factory. getwebServer (getSelfInitializer());9 createwebServer.end();10 getBeanFactory().registerSingleton(\"webServerGracefulShutdown\",ii, new WebServerGracefulShutdownLifecycle(this.webServer)) ;12 getBeanFactory(). registerSingleton(\"webServerStartStop\",13 neul WebServerStartStopLifecycle(this, this.webServer));14 }15 else if (servletContext != null) {16 try {17 getSelfInitializer() .onStartup(servletContext) ;18 了19 catch (ServletException ex) {20 throw new ApplicationContextException(\"Cannot initialize servlet context\", ex);21 }22 }23 initPropertySources ();24 }更多的内容我们再学习web拓展的时候再深入。",
  "assets/image-20230322144734-zrlxoh1.png": "九、onRefresh()| onRefresh0阶段该方法在抽象类中也是空的，同样是留给子类进行扩展使用，此时一切的基本工作都已经储备好了:同样，我们还是看GenericWebApplicationContext中的实现:1 // 初始化主题功能，此功能已经废弃，我们不做学习。2 // 6.0以后Themesource相关的内容全部被禁用3 protected void onRefresh() {45}this. themeSource = UiApplicationContextUtils.initThemeSource(this);Iweb上线文的子类ServletWebSserverApplicationContext实现:123456protected void onRefresh() {super.onRefresh();// 此时启动try {// 这里会再次向容器注入servletContext和Serv1letConfig// 如果当前环境没有服务，提供一个this.createWebServer();} catch (Throwable var2) {throw new ApplicationContextException(\"Unable to start web server\", var2);t",
  "assets/image-20230322144747-o19q199.png": "八、初始化多播器| initApplicationEventMulticaster()阶段向容器注入一个多播器实例，默认为SimpleApplicationEventMulticaster的实现:1 protected void initApplicationEventMulticaster() {2 ConfigurableListalileBeanFactory beanFactory = getBeanFactory();3 if (beanFactory.containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME)) {4 this.applicationEventMulticaster =beanFactory.getBean (APPLICATION_EVENT_MULTICASTER_BEAN_NAME ,ApplicationEventMulticaster.class);6 if (logger. isTraceEnabled()) {lTogger.trace(\"Using ApplicationEventMulticaster [\" + this.applicationEventMulticaster +“IB8 了9 }10 else {11 /默认使用Simp]eApp1icationEventMu]ticaster进行广播事件，注册1istener12 this.applicationEventMulticaster = new SimpleApplicationEventMulticaster (beanFactory) ;13 beanFactory. registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME ,this. applicationEventMulticaster);14 if Clogger.isTraceEnabled()) {15 logger.trace(\"No '\" + APPLICATION_EVENT_MULTICASTER_BEAN_NAME + \"\" bean, using ”+16 \"[\" + this. applicationEventMulticaster.getClass().getSimpleName() + \"]\");17 }18 }19|}PMBRNWAABS Sit, AREER,",
  "assets/image-20230322144807-rddgny0.png": "相关类的知识我们已经学习过了，这里就不在整述，这里说一下springboot中相关的使用方法:配置文件:1 spring:2 messages:basename: i118n/messages4 encoding: UTF-8i18n相关的文件:messagkhelloe国际化文件在springboot或spring中，只需要注入这个bean直接使有1 @Autowired2 MessageSource messageSource;即可:",
  "assets/image-20230322144827-3l9m1fm.png": "七、初始化MessageSsource| initMessageSource()阶段容器启动时，如果容器中不人存在对应的Bean实例，则容器中默认创建一个DelegatingMessageSource的实例来实现国际化。DelegatingMessageSource实现的夏体功能需要向上委托，否则降级处理(处理成默认字符种或者抛出异常) :1 public String getMessage(String code，C@Nu]11able ObjectLocale locale) {] args, @Nullable String defaultMessage,2 if (this.parentMessageSource != null) {3 return this.parentMessageSource.getMessage(code, args, defaultMessage, locale);4 }5 else if (defaul tMFssage t= null) {6 return renderDefaultMessage(defaultMessage, args, locale);7 }8 else {9 return null;10 }11|1}SpringBoot中使用【ResourceBundleMessageSource】 §YSEH, SpringBootBki\\Ay|ResourceBundleMessageSource:动装配的MessageSource即就是",
  "assets/image-20230322144933-q4n284a.png": "我们看下，执和orderedPostProcessorName:nOrderedPostProcessorNamesorderedPostProcesssnOrderedPost",
  "assets/image-20230322144947-7pvhfyx.png": "this.singletonNames. remove (beanName) ;}return bean;// 一个bean在销毁前的回调，从多播器中移除@Overridepublic void postProcessBeforeDestruction(Object bean, String beanName) {if (bean instanceof ApplicationListener\u003c?\u003e applicationListener) {try {ApplicationEventMulticaster multicaster =this. applicationContekt. getapplicationEventmulticaster(;multicaster.removeApplicationListener (applicationListener) ;multicaster. removeApp1licationListenerBean(beanName) ;}catch (IllegalStateException ex) {// ApplicationEventMulticaster not initialized yet - no need to remove a listener",
  "assets/image-20230322145013-kptmqu2.png": "// BeanPostProcessorf Hig// 这里说明spring中的1istener必须是单例的才能生效@overridepublic Object postProcessAfterInitialization(Object bean, String beanName) {if (bean instanceof ApplicationListener\u003c?\u003e applicationListener) {// 判断是不是单例Boolean flag = this.singletonNames .get(beanName) ;if (Boolean. TRUE.equals(flag)) {// 单例bean(顶层或内部) : 动态注册this.app1icationContext.addApp1icationListener(app1icationListener);}else if (Boolean.FALSE.equals(flag)) {if Clogger.iswarnEnabled() \u0026\u0026 !this.applicationContext.containsBean(beanName)) {// inner bean with other scope - can't reliably process eventsJogger .warn(\"Inner bean '\" + beanName + implements ApplicationListenerinterface but is not reachable for event multicasting by its containing ApplicationContext becauseit does not have singleton scope. Only top-level listener beans are allowed to be of non-singletonscope.\"",
  "assets/image-20230322145100-1551yd9.png": "2、监听器探测器检测实现了ApplicationListener接口的bean的BeanPostProcessor。这将捕获getBeanNamesForType和仅针对顶级bean的相关操作不能可靠地检测到的bean。1 class ApplicationListenerDetector implements DestructionAwareBeanPostProcessor,MergedBeanDefinitionPostProcessor {A:3 private static final Log logger = LogFactory.getLog(ApplicationListenerDetector.class);45 private final transient AbstractApplicationContext applicationContext;private final 人Map\u003cString, Boolean\u003e singletonNames = new ConcurrentHashMap\u003c\u003e(256);9 public ApplicationListenerDetector (AbstractApplicationContext applicationContext) {10 this.applicationContext = applicationContext;11 }123 // 合并bean的定义前14 @override15 public void postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class\u003c?\u003ebeanType, String beanName) {16 if (ApplicationListener.class.isAssignableFrom(beanType)) {this.singletonNames.put(beanName, beanDefinition.isSingleton());18 }19 }2021 @Override22 public Object postProcessBeforeInitialization(Object bean, String beanName) {23 return bean;24 }",
  "assets/image-20230322145148-nok7l86.png": "1、合并beanDefinitionMergedBeanDefinition是spring获取bean流程中的一个重要处理过程，他将基础的BeanDefinition合并为一个新的BeanDefinition对象(RootBeanDefinition)，后续的处理过程都依赖这个新对象。在Spring 内部实际使用的BeanDefinition，其实都是合并后RootBeanDefinition对象，通过它进行对象的实例化，注入等。Spring也为这个关链节点提供了一个可供操作合并后RootBeanDefinition的扩展点(后填处理器) ，通过这个扩展点，可以实现对RootBeanDefinition的操作。我们可以和上节课讲解的BeariDefinitionRegistryPostProcessor作对比:扩展点用途BeanDefinitionRegistryPostProcessor 可以注册或更改原始BeanDefinitionMergedBeanDefinitionPostProcessor 可以更改RootBeanDefinition",
  "assets/image-20230322145202-4f3039z.png": "596162sortPostProcessors (orderedPostProcessors, beanFactory);registerBeanPostProcessors(beanFactory, orderedPostProcessors);// 现在，实例化并注册其他的BeanPostProcessors 。List\u003cBeanPostProcessor\u003e nonOrderedPostProcessors = new ArrayList\u003c\u003e(nonOrderedPostProcessorNames .size());for (String ppName : nonOrderedPostProcessorNames) {BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);nonOrderedPostProcessors.add(pp) ;// 这里也要筛选if (pp instanceof MergedBeanDefinitionPostProcessor) {internalPostProcessors.add(pp);}registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors) ;// 最后,注册所有的MergedBeanDefinitionPostProcessorsortPostProcessors(internalPostProcessors, beanFactory);registerBeanPostProcessors(beanFactory, internalPostProcessors);// ApplicationListener探测器beanFactory. addBeanPostProcessor(new App1icationListenerDetector(app1icationContext));",
  "assets/image-20230322145732-933nn3a.png": "六、注册bean的后置处理器| registerBeanPostProcessors(beanFactory)阶段该阶段的方法如下:1 protected void registerBeanPostProcessors(ConfigurableListableBeanFactory beanFactory) {2: PostProcessorRegistrationDelegate. registerBeanPostProcessors(beanFactory, this);3|}核心代码如下:1 public static void registerBeanPostProcessors(2 ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext) {34 // 获取所有实现了BeanPostProcessor接口的bean的名字5 String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class，true，false);68 // 记录BeanPostProcessor数量9 // getBeanpPostProcessorCount()编程的方式add进去的10 // 1 BeanPostProcessorChecker11 // postprocessorNames.1ength容器内没有初始化的12 int beanProcessorTargetCount = beanFactory.getBeanPostProcessorCount() + 1 +postProcessorNames. length;13 // 注册BeanPostProcessorChecker，14 beanFactory. addBeanPostProcessor(new BeanPostProcessorChecker(beanFactory，beanProcessorTargetCount));15167 // 有优先级要求的，实现了priorityordered接口18 List\u003cBeanPostProcessor\u003e priorityOrderedPostProcessors = new ArrayList\u003c\u003e();19 // 内部的BeanPostProcessor20 List\u003cBeanPostProcessor\u003e internalPostProcessors = new ArrayList\u003c\u003e();21 // 有顺序要求的，实现了0rdered接口22 List\u003cString\u003e orderedPostProcessorNames = new ArrayList\u003c\u003e();3 // 没有顺序要求的",
  "assets/image-20230322145848-fo06ab2.png": "List\u003cString\u003e nonOrderedPostProcessorNames = new ArrayList\u003c\u003e();// 循环分组for (String ppName : postProcessorNames) {if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) {BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);priorityOrderedPostProcessors.add (pp);// MergedBeanDefinitionPostProcessor也是一个后置处理器// 我们稍后看if (pp instanceof MergedBeanDefinitionPostProcessor) {internalPostProcessors.add(pp);}else if (beanFactory.isTypeMatch(ppName, Ordered.class)) {orderedPostProcessorNames . add(ppName) ;了else {nonOrderedPostProcessorNames . add (ppName) ;}// 首先，注册实现Priorityordered的BeanPostProcessors。sortPostProcessors (priorityOrderedPostProcessors, beanFactory);registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors) ;",
  "assets/image-20230322145904-1qzvq3b.png": "List\u003cString\u003e nonOrderedPostProcessorNames = new ArrayList\u003c\u003e();// 循环分组for (String ppName : postProcessorNames) {if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) {BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);priorityOrderedPostProcessors.add (pp);// MergedBeanDefinitionPostProcessor也是一个后置处理器// 我们稍后看if (pp instanceof MergedBeanDefinitionPostProcessor) {internalPostProcessors.add(pp);}else if (beanFactory.isTypeMatch(ppName, Ordered.class)) {orderedPostProcessorNames . add(ppName) ;了else {nonOrderedPostProcessorNames . add (ppName) ;}// 首先，注册实现Priorityordered的BeanPostProcessors。sortPostProcessors (priorityOrderedPostProcessors, beanFactory);registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors) ;",
  "assets/image-20230322145951-awlitbp.png": "4849505152535455565758// 接下来，实例化并注册实现Ordered接口的BeanPostProcessors。List\u003cBeanPostProcessor\u003e orderedPostProcessors = new ArrayList\u003c\u003e(orderedPostProcessorNames .size());for (String ppName : orderedPostProcessorNames) {BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);orderedPostProcessors.add(pp);// 这里也要筛选if (pp instanceof MergedBeanDefinitionPostProcessor) {internalPostProcessors.add(pp) ;",
  "assets/image-20230322170723-5kzzft7.png": "if (mbd == null || !mbd.isSynthetic()) {wrappedBean = applyBeanPostProcessorsBeforelInitialization(wrappedBean, beanName) ;Iptry {invokeInitMethods(beanName, wrappedBean, mbd);Ipcatch (Throwable ex) {throw new BeanCreationException((mbd != null ? mbd.getResourceDescription() : null), beanName, ex.getMessage(), ex);Ipif (mbd == null || !mbd.isSynthetic()) {",
  "assets/image-20230322171008-iw4o69w.png": "六、创建| createBean(beanName, mbd, args)阶段AbstractAutowireCapableBeanFactory中我们可以看到doCcreateBean的详细实现:protected Object doCreateBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)throws BeanCreationException {BeanWrapper instanceWrapper = null;if (mbd.isSingletonQ) {1234 // 使用BeanwWrapper包装，先处理一下缓存5)67 instanceWrapper = this. factoryBeanInstanceCache. remove(beanName) ;3// 缓存中没有就创建10 if Cinstancewrapper == null) {11 instanceWrapper = createBeanInstance(beanName, mbd, args);12 }13 // 直接获得14 Object bean = instanceWrapper.getwrappediInstance();15 Class\u003c?\u003e beanType = instanceWrapper.getWrappedClass();1617 // 人允许后置处理程序修改合并的bean定义。18 synchronized (mbd.postProcessingLock) {19 if (!mbd.postProcessed) {20 try {21 // 扩展点，此时还可以修改bean的定义22 applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName) ;23) }24 catch (Throwable ex) {}25 mbd.markAsPostProcessed() ;26 }27 32829 // 主动缓存单例对象以解析循环引用30 // 一个早期暴露的bean是这人么定义的: 正在创建，人允许循环引用，单例31 // A --\u003e B --\u003e A 此时将A放入ear1ySingletonExposure32 // 会给A一个工厂，这个工厂的作用是判断是否存在通知，如果有就生成代理，没有返回原始bean33 // 紧接着工厂产生的bean被存入二级缓存，称之为早期暴露的bean34 boolean earlySingletonExposure = (mbd.isSingleton() \u0026\u0026 this.allowCircularReferences\u0026\u0026isSingletonCurrentlyInCreation(beanName) ) ;35 if (earlySingletonExposure) {",
  "assets/image-20230322171049-kj8mx47.png": "36 // 急切地缓存单例，以便能够解析循环引用，即使是在由BeanFactoryAware等生命周期接口触发时。37 // 如果是早期暴露的bean ，给三级钥存加一个工厂38 addSingletonFactory(beanName, () -\u003e getEarlyBeanReference(beanName, mbd, bean));39 }404142 // 以下内容需要考虑循环引用的问题43 // 真正实例化进个bean44 Object exposedObject = bean;45 try {46 // 填充属性47 populateBean(beanName, mbd, instanceWrapper) ;48 // 初始化方法，init和后置处理器的调用49 exposedobject = initializeBean(beanName, exposedObject, mbd);50 }51 catch (Throwable ex) {}52535455 // 如果是早期暴露的bean ，说明存在循环引用56 // getsingleton第二个参数boolean allowEarlyReference57 if (earlySingletonExposure) {58 // 先去一级和二级中找,第二个是boolean值，表示是否支持循环引用59 Object earlySingletonReference = getSingleton(beanName, false);60 // 找不到61 if (earlySingletonReference != null) {62 // 说明没有代理，经过initializeBean后bean的地址没有变化63 if (exposedobject == bean) {64 // 暴露的bean ，就等于找到的bean65 exposedobject = earlySingletonReference;66 // 说明存在代理67 } else if (!this.allowRawInjectionDespitewrapping \u0026\u0026 hasDependentBean(beanName) )",
  "assets/image-20230322171137-i5fhtio.png": "68 String[] dependentBeans = getDependentBeans (beanName) ;Set\u003cString\u003e actualDependentBeans = new LinkedHashSet\u003c\u003e(dependentBeans. length);到for (String dependentBean : dependentBeans) {// 如果不是仅为根据Type检查创建，则删除单例73 if (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) {74 actualDependentBeans . add(dependentBean) ;75 i }76 }77 378 }79 18081 // 将bean注册为一次性的。82 try {83 registerDisposableBeanIfNecessary(beanName, bean, mbd);84 }85 catch (BeanDefinitionValidationException ex) {}8687 return exposedObject;",
  "assets/image-20230322171150-he2u3nf.png": "protected Object getEarlyBeanReference(String beanName, RootBeanDefinition mbd, Object bean) {Object exposedObject = bean;if C!mbd.isSyntheticQ) \u0026\u0026 hasInstantiationAwareBeanPostProcessors()) {for (SmartInstantiationAwareBeanPostProcessor bp :getBeanPostProcessorCache().smartInstantiationAware) {exposedObject = bp.getEarlyBeanReference(exposedObject, beanName);ireturn exposedObject;",
  "assets/image-20230322171206-0srpwna.png": "protected Object wrapIfNecessary(Object bean, String beanName, Object cachekey) {// 以下情况不需要处理，缓存原始beanif (Stringttils.hasLength(beanName) \u0026\u0026 this.targetSourcedBeans.contains(beanName)) {return bean;3if (Boolean. FALSE.equals(this.advisedBeans.get(cacheKey))) {return bean;}if CisInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {this.advisedBeans.put(cacheKey, Boolean.FALSE);return bean;// 如果我们有advice，创建代理。Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null);if (specificInterceptors != DO_NOT_PROXY) {this.advisedBeans .put(cacheKey, Boolean. TRUE);// 创建代理的地方Object proxy = createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean));this.proxyTypes .put(cacheKey, proxy.getClass());return proxy;this.advisedBeans.put(cacheKkey, Boolean.FALSE);return bean;",
  "assets/image-20230322171244-xota9hs.png": "七、属性填充实例化成功一个bean之后，紧接着就是完成属性填充的工作，当然我们也将它称之为依赖注入:。 String: bean的名字e RootBeanDefinition: bean的定义。 BeanWrapper: bean的包装protected void populateBean(String beanName, RootBeanDefinition mbd, G@Nullable Beanwrapper bw) {// 这也是一个扩展点《修改属性之前的调用) ，在bean实例化后我们可以完成一些扩展// 很多的扩展点我们可以不用，但是框架不能没有if (!mbd.issyntheticO \u0026\u0026 hasInstantiationAwareBeanPostProcessors()) {for (InstantiationAwareBeanPostProcessor bp : getBeanPostProcessorCache().instantiationAware) {if (!bp.postProcessAfterInstantiation(bw.getwrappedInstance(), beanName)) {return;",
  "assets/image-20230322171345-ler6fpw.png": "七、属性填充实例化成功一个bean之后，紧接着就是完成属性填充的工作，当然我们也将它称之为依肪注入:。 String: bean的名字。 RootBeanDefinition: bean的定义。 BeanWrapper: bean的包装protected void populateBean(String beanName, RootBeanDefinition mbd, @Nullable BeanWrapper bw) 工=723 // 这也是一个扩展点《修改属性之前的调用) ，在bean实例化后我们可以完成一些扩展4 // 很多的扩展点我们可以不用，但是框架不能没有5 if (!mbd.isSynthetic() \u0026\u0026 hasInstantiationAwareBeanPostProcessors()) {6 for (InstantiationAwareBeanPostProcessor bp :getBeanPostProcessorCache().instantiationAware) {7 if (!bp.postProcessAfterInstantiation (bw. getWrappedInstance(), beanName)) {8 return;9 了",
  "assets/image-20230322171413-7eibb2n.png": "七、属性填充实例化成功一个bean之后，紧接着就是完成属性填充的工作，当然我们也将它称之为依肪注入:。 String: bean的名字。 RootBeanDefinition: bean的定义。 BeanWrapper: bean的包装protected void populateBean(String beanName, RootBeanDefinition mbd, @Nullable BeanWrapper bw) 工=723 // 这也是一个扩展点《修改属性之前的调用) ，在bean实例化后我们可以完成一些扩展4 // 很多的扩展点我们可以不用，但是框架不能没有5 if (!mbd.isSynthetic() \u0026\u0026 hasInstantiationAwareBeanPostProcessors()) {6 for (InstantiationAwareBeanPostProcessor bp :getBeanPostProcessorCache().instantiationAware) {7 if (!bp.postProcessAfterInstantiation (bw. getWrappedInstance(), beanName)) {8 return;9 了",
  "assets/image-20230322171533-5n6jpzw.png": "protected Object getEarlyBeanReference(String beanName, RootBeanDefinition mbd, Object bean) {Object exposedObject = bean;if (!mbd.isSyntheticQ) \u0026\u0026 hasInstantiationAwareBeanPostProcessors()) {for (SmartInstantiationAwareBeanPostProcessor bp :getBeanPostProcessorCache().smartInstantiationAware) {exposedObject = bp.getEarlyBeanReference(exposedObject, beanName);ireturn exposedObject;",
  "assets/image-20230322171554-d8eqg5e.png": "uwprotected Object getEarlyBeanReference(String beanName, RootBeanDefinition mbd, Object bean) {Object exposedObject = bean;if (!mbd.isSyntheticQ) \u0026\u0026 hasInstantiationAwareBeanPostProcessors()) {for (SmartInstantiationAwareBeanPostProcessor bp :getBeanPostProcessorCache().smartInstantiationAware) {exposedObject = bp.getEarlyBeanReference(exposedObject, beanName) ;}return exposedObject;",
  "assets/image-20230322171642-9g3ohv0.png": "// /beanpefi nition PRR tk MmPropertyValues pvs = (mbd.hasPropertyValues() ? mbd.getPropertyValues() : null);// 使用特定的自动注入类型寻找依赖的bean ，实例化后将其存入newPvsint resolvedAutowireMode = mbd.getResolvedAutowi reMode() ;if (resolvedAutowireMode == AUTOWIRE_BY_NAME || resolvedAutowireMode == AUTOWIRE_BY_TYPE) {MutablePropertyValues newPvs = new MutablePropertyValues (pvs) ;if CresolvedAutowireMode == AUTOWIRE_BY_NAME) {autowireByName(beanName, mbd, bw, newPvs);}if CresolvedAutowireMode == AUTOWIRE_BY_TYPE) {autowireByType(beanName, mbd, bw, newPvs);}pvs = newPvs;// InstantiationAwareBeanPostProcessor扩展点，属性填充之前，给个机会修改if (hasInstantiationAwareBeanPostProcessors()) {if (pvs == null) {pvs = mbd.getPropertyValues();}for (InstantiationAwareBeanPostProcessor bp :getBeanPostProcessorCache().instantiationAware) {PropertyValues pvsToUse = bp.postProcessProperties(pvs, bw.getwrappedInstance(),beanName) ;",
  "assets/image-20230322171702-q8q1nv0.png": "if (pvsTouse == null) {return;}pvs = pvsTouse;boolean needsDepCheck = (mbd.getDependencyCheck() !=AbstractBeanDefinition.DEPENDENCY_CHECK_NONE) ;if (meedsDepCheck) {PropertyDescriptor[] filteredPds = filterPropertyDescriptorsForDependencyCheck (bw,mbd.allowCaching) ;checkDependencies(beanName, mbd, filteredPds, pvs);// 实际的填充if (pvs != nul1)_{f有mbd, bw, pvs);",
  "assets/image-20230322171729-ufdondn.png": "1 protected void autowireByName(String beanName, AbstractBeanDefinition mbd，Beanwrapper bw,MutablePropertyValues pvs) {2 // propertyNames里边保存了未填充的非简单属性3 String[] propertyNames = unsatisfiedNonSimpleProperties(mbd, bw);4 //5 for (String propertyName : propertyNames) {6 // 判断容器中是否有这个属性的bean7 if (containsBean(propertyName)) {// 通过属性名称实例化所需的bean9 Object bean = getBean(propertyName) ;10 pvs.add(propertyName, bean);il // 将其注册为可以被依赖的bean12 registerDependentBean (propertyName，beanName) ;13 if Clogger.isTraceEnabled()) {14 logger.trace(\"Added autowiring by name from bean name '\" + beanName +\"'property '\" + propertyName + \"' to bean named '\" + propertyName + \"'\");15 】16 }17 else {via",
  "assets/image-20230322171755-qcltpjz.png": "// 打个日志，记录失败",
  "assets/image-20230322171828-539nedz.png": "1 protected void autowireByType(2 String beanName, AbstractBeanDefinition mbd, BeanwWrapper bw, MutablePropertyValues pvs)334 TypeConverter converter = getCustomTypeConverter();5) if (converter == null) {6 converter = bw;了89 Set\u003cString\u003e autowiredBeanNames = new LinkedHashSet\u003c\u003e(4);10 String[] propertyNames = unsatisfiedNonSimpleProperties(mbd, bw);11 for (String propertyName : propertyNames) {12 try {13 PropertyDescriptor pd = bw. getPropertyDescriptor (propertyName) ;14 // 不要尝试通过类型自动装配对象类型:从来没有意义，15 // 即使它在技术上是一个不满足的、不简单的属性。16 if (Object.class != pd.getPropertyTypeQ) {17 MethodParameter methodParam = BeanUtils.getwriteMethodParameter (pd) ;18 /在优先级后处理器的情况下，不允许进行类型匹配的eager inite19 boolean eager = !(bw.getWrappedInstance() instanceof PriorityOrdered);20 DependencyDescriptor desc = new AutowireByTypeDependencyDescriptor (methodParam,eager);",
  "assets/image-20230322171844-4yiuifi.png": "Object autowiredArgument = resolveDependency(desc, beanName,autowiredBeanNames, converter):if (autowiredArgument != null) {pvs.add(propertyName, autowiredArgument) ;3for (String autowiredBeanName : autowiredBeanNames) {registerDependentBean(autowiredBeanName, beanName) ;if Clogger.isTraceEnabled()) {logger. trace(\"Autowiring by type from bean name” to bean named '\" + autowiredBeanName + ;+ beanName + viaproperty '\" +propertyName +33autowi redBeanNames .clear ();}catch (BeansException ex) {throw new UnsatisfiedDependencyException(mbd. getResourceDescription(), beanName,propertyName, ex);了",
  "assets/image-20230322171904-k10uwbb.png": "apublic Object resolveDependency(DependencyDescriptor descriptor, @Nullable StringrequestingBeanName,@Nullable Set\u003cString\u003e autowiredBeanNames, GNullable TypeConvertertypeConverter) throws BeansException {Lawdescriptor. initParameterNameDiscovery(getParameterNameDiscoverer());if (Optional.class == descriptor.getDependencyTypeQ)) {return createOptionalDependency(descriptor, requestingBeanName) ;3else if (ObjectFactory.class == descriptor. getDependencyType() ||ObjectProvider.class == descriptor.getDependencyType()) {return new DependencyObjectProvider(descriptor, requestingBeanName) ;3else if (javaxInjectProviderClass == descriptor.getDependencyType()) {return new Jsr330Factory().createDependencyProvider(descriptor, requestingBeanName) ;}else {Object result = getAutowireCandidateResolver ().getLazyResolutionProxyIfNecessary(descriptor, requestingBeanName) ;if (result null) {result = doResolveDependency(descriptor, requestingBeanName, autowiredBeanNames ,typeConverter);3return result;}",
  "assets/image-20230322171916-hrwsn2e.png": "1 @Override2 public Object getEariyneannererenceConject bean, String beanName) {3 Object cacheKey = getCacheKey(bean.getClass(), beanName);4 this.earlyProxyReferences.put(cacheKey, bean);5 return wrapIfNecessary(bean, beanName, cacheKey);6",
  "assets/image-20230322171920-2o14tmb.png": "1 Object proxy = createProxy(bean.getClass(), beanName, specificInterceptors, newSingletonTargetSource(bean));",
  "assets/image-20230322171940-kjvozpz.png": "Nrypublic Object doResolyeDependency(DependencyDescriptor descriptor, @Nullable String beanName,@NuT lable set\u003cstring\u003e autowiredBeanNames, @Nullable TypeConverter typeConverter) throwsBeansException {InjectionPoint previousInjectionPoint =ConstructorResolver.setCurrentInjectionPoint (descriptor) ;try {2122nNwObject shortcut = descriptor. resolveShortcut(this);if (shortcut != null) {return shortcut;Class\u003c?\u003e type = descriptor. getDependencyType():Object value = getAutowireCandidateResolver () . getSuggestedValue(descriptor);if (value != null) {if (value instanceof String strValue) {String resolvedvalue = resolveEmbeddedValue(strvalue) ;BeanDefinition bd = (beanName != null \u0026\u0026 containsBean(beanName) ?getMergedBeanDefinition(beanName) : null);value = evaluateBeanDefinitionString(resolvedvalue, bd);了TypeConverter converter = (typeConverter != null ? typeConverter :getTypeConverter());try {return converter.convertIfNecessary(value, type,descriptor. getTypeDescriptor());}",
  "assets/image-20230322172002-0qvhztt.png": "catch (UnsupportedOperationException ex) {// A custom TypeConverter which does not support TypeDescriptor resolution...return (descriptor.getField() != null ?converter. convertIfNecessary(value, type, descriptor.getField()) :converter.convertIfNecessary(value, type,Idescriptor. getMethodParameter()));}Object multipleBeans = resolveMultipleBeans(descriptor, beanName, autowiredBeanNames ,typeConverter);if (multipleBeans != null) {return multipleBeans;Map\u003cString, Object\u003e matchingBeans = findAutowireCandidates(beanName, type, descriptor);if (matchingBeans.isEmpty()) {if CisRequired(descriptor)) {raiseNoMatchingBeanFound(type, descriptor.getResolvableType(), descriptor);}return null;String autowiredBeanName;Object instanceCandidate;if (matchingBeans.size() \u003e 1) {autowiredBeanName = determineAutowireCandidate(matchingBeans, descriptor);if (autowiredBeanName == null) {",
  "assets/image-20230322172058-hbrndd0.png": "if CisRequired(descriptor) || !indicatesMultipleBeans(type)) {return descriptor. resolveNotUnique(descriptor.getResolvableType(),matchingBeans) ;3else {// In case of an optional Collection/Map, silently ignore a non-uniquecase:// possibly it was meant to be an empty collection of multiple regularbeans// (before 4.3 in particular when we didn't even look for collectionbeans).return null;3了instanceCandidate = matchingBeans. get (autowiredBeanName) ;}else {// We have exactly one match.Map.Entry\u003cString, Object\u003e entry = matchingBeans.entrySet().iteratorQ .nextQ;autowiredBeanName = entry.getKey();instanceCandidate = entry.getValue();}",
  "assets/image-20230322172130-rd4r2qr.png": "if (autowiredBeanNames != null) {autowiredBeanNames . add(autowi redBeanName) ;telif CinstanceCandidate instanceof Class) {instanceCandidate = descriptor. resolveCandidate(autowiredBeanName, type, this);}Object result = instanceCandidate;if (result instanceof NullBean) {if CisRequired(descriptor)) {raiseNoMatchingBeanFound(type, descriptor. getResolvableType(), descriptor);}result = null;}if (!Classutils.isAssignableValue(type, result)) {throw new BeanNotOfRequiredTypeException(autowiredBeanName, type,instanceCandidate. getClass();}return result;}finally {ConstructorResolver.setCurrentInjectionPoint(previousInjectionPoint);}",
  "assets/image-20230322172152-kfwxcpm.png": "属性境苑”工1 protected void applyPropertyValues(String beanName，BeanDefinition mbd，Beanwrapper bw,PropertyValues pvs) {if (pvs.isemptyQ) {return;MutablePropertyValues mpvs = null;List\u003cPropertyValue\u003e original;YOuUuRWNrc9 if (pvs instanceof MutablepropertyValues) {10 mpvs = (MutablePropertyValues) pvs;11 // 如果已经转化过12 if (mpvs.isConverted()) {13 // 快捷方式:按原样使用预先转换的值。14 try {15 bw. setPropertyValues (mpvs);16 return;17 }18 catch (BeansException ex) {1920 }7k }22 original = mpvs.getPropertyValueList();23 } else {24 original = Arrays.asList(pvs.getPropertyValues());25 }",
  "assets/image-20230322172218-bhuxrdy.png": "// 获得转换器TypeConverter converter = getCustomTypeConverter();if (converter == null) {converter = bw;了BeanDefinitionValueResolver valueResolver = new BeanDefinitionValueResolver(this, beanName,mbd, converter);// 创建一个副本，解析值的任何引用List\u003cPropertyValue\u003e deepCopy = new ArrayList\u003c\u003e(original.sizeQ);boolean resolveNecessary = false;for (PropertyValue pv : original) {// 转换过的添加进去if (pv.isConvertedQ) {deepCopy.add(pv);// 尚未进行转化的} else {String propertyName = pv.getName();Object originalValue = pv.getValue();Object resolvedValue = valueResolver.resolveValueIfNecessary(pv, originalValue);",
  "assets/image-20230322172234-4lhmfwy.png": "converter);Object convertedvalue = resolvedvalue;// 判断是否可以转换boolean convertible = bw.iswritableProperty(propertyName) \u0026\u0026!PropertyAccessoruti Is. isNestedOrIndexedProperty(propertyName) ;// 如果可以，则进行转化if (convertible) {// “1\"-\u003e1convertedValue = convertForProperty(resolvedValue, propertyName, bw,了// 可能在合并bean定义中存储转换后的值，// 以避免为每个创建的bean实例重新转换。if (resolvedvalue == originalValue) {if (convertible) {pv.setConvertedvalue(convertedvValue) ;3deepCopy. add(pv);// 这里会处理Typedstringvalue} else if (convertible \u0026\u0026 originalValue instanceof TypedStringValuetypedStringValue \u0026\u0026!typedStringValue.isDynamic() \u0026\u0026!(convertedvalue instanceof CollectionObjectUtils.isArray(convertedvalue))) {pv.setConvertedvalue(convertedvalue) ;deepCopy.add(pv);} else {",
  "assets/image-20230322172254-08nymsk.png": "resolveNecessary = true;deepCopy.add(new PropertyValue(pv, convertedValue));}了}// 数据全部转换完成if (mpvs != null \u0026\u0026 !resolveNecessary) {mpvs.setConverted() ;}// 设置我们的(可能是按摩过的7深度拷贝。try {bw. setPropertyValues (new MutablePropertyValues (deepCopy));}catch (BeansException ex) {throw new BeanCreationException(mbd.getResourceDescription(), beanName,ex.getMessage(), ex);}",
  "assets/image-20230322172410-matff37.png": "N\\. Wyattnull), beanName, ex.getMessage(),属性填充以后的初始化方法:1 protected Object initializeBean(String beanName, Object bean, GNullable RootBeanDefinition mbd) {2 // 如果实现了AwareMethods 则调用3 invokeAwareMethods (beanName, bean);45 Object wrappedBean = bean;6 if (mbd == null || !mbd.issyntheticQ)) {7 // 调用后置处理器的初始化前的方法8 wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName) ;9 了101i try {12 // 调用初始化的方法13 invokeInitMethods (beanName, wrappedBean, mbd);14 }15 catch (Throwable ex) {16 throw new BeanCreationException(Ly (mbd != null ? mbd.getResourceDescription() :ex);18 }",
  "assets/image-20230322172430-u5kc4nr.png": "if (mbd == null || !mbd.isSyntheticQ) {// 调用后置处理器的初始化后的方法wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName) ;return wrappedBean;",
  "assets/image-20230322172443-9hdz3kd.png": "九、循环引用1、产生的问题如果我们在写代码的时候发现如下场景:1 @Component2 public class A {3 private B b;4 @Autowired5 public ACB b) {6 this.b = b;7 }8 }和1 @Component2 public class B {3 private A al4 @Autowired5 public B(A a) {6 this.a = a;7 38 }启动工程会振以下的错误，这个错误很好理解，A构造时需要B，B构造时需要A，这不就死循环了，就像下图一样;gia nh -",
  "assets/image-20230322174002-ete283l.png": "1 The dependencies of some of the beans in the application context form a cycle:2了Fr4 | a defined in file [E:N\\project\\spring-source-study\\targetNclassesNcomNvyd1cl1ass\\A.class]5/T 16 | b defined in file [E:\\project\\spring-source-study\\target\\classes\\com\\yd1class\\B.class]7 fo) 19 Action:1011 Relying upon circular references is discouraged and they are prohibited by default. Update yourapplication to remove the dependency cycle between beans. As a last resort, it may be possible tobreak the cycle automatically by setting spring.main.allow-circular-references to true.他提示我们可以配置一个属性spring.main.allow-circular-references，下个小节我们接着看。",
  "assets/image-20230322175437-01a1aaf.png": "2、解决方案我们可以涯试在yml中设置如下的参数:1 spring.main.allow-circular-references=true实时上他还是会出错:Description:和a defined in file [E:NprojectNspring-source-studyN\\target\\NclassesNCom\\yd1classNA.c1ass]al23 The dependencies of some of the beans in the application context form a cycle:456 |7\\1 118 b defined in file [E:\\project\\spring-source-study\\target\\classes\\com\\yd1class\\B.class]9 eH101112 Action: I14 Despite circular references being allowed, the dependency cycle between beans could not be broken.Update your application to remove the dependency cycle.事实上，使用构造器产生的循环依赖是无解的:1 Aa2 8B bnew A(b);new B(a);我们当然不能在其未构造时而使用其引用，但是我们可以采用如下的解决方案:Aa =new AQ;B b = new BQ;a.setB(b):b.setA(a):上w N改为setter注入后:",
  "assets/image-20230322175452-i9r8aym.png": "@Componentpublic class A {private B bi@Autowiredpublic void setB(B b) {this.b = b;3}@Componentpublic class B {private A a;@Autowiredpublic void setA(A a) {this.a = a;",
  "assets/image-20230322175508-yrxovh8.png": "发现确实可以成功启动这个问题看似简单，但是spring本身功能及其强大，还可以使用aop为bean生成代理。这其中的循环依束不仅仅是两个普通bean之间的关系，还有可能是bean和代理bean，代理bean和代理bean的循环依赖，处理起来相当麻烦，接下来我们就深入分析一下:3、过程分析我们可以配置spring的日志级别，让工程打印更多的日志，从日志中分析A和8的创建过程:1 logging. level. root=trace我们剥离出来一些核心日志如下:",
  "assets/image-20230322211813-mj2q7c3.png": "A-bean 提交一个工厂到三级缓存，提早将实例暴露1» A-bean Singleton Factory 一早期暴露的条件: 单例、创建中、人允许循环引用实例化a-bean B-bean Singleton Factory '未填充属性-----------fa Seo a1 |是否需要| 将B也提前暴露SuSE 是否需要代理pope aera 实例化b-bean 是否需要填充属性\u003e 需要B \u003e ”未填充属性一一早期暴露$ DSpopulateBean 4 创建B成功;__—___继续属性| 放入一级缓存一* + 是否有代理«| POPumepean 4临时保存intializeBean 创建B代理a原来的bean 初始化放入一级缓存\u003e | = :| + initializeBean populateBean | a |— T ean-是否有代理初始化《 继续填充一| \\ | 这里要注意8所依赖的bean可能已经变成一个代理/ \\ 并不是我们暴圳出去的原始bean | 一/ \\ fue tbeen laced —\u003e 二级缓存| \\ 一| PT| —T\\ |/一\\ -thar une 最终返回的a-bean= mary 创建成功存入一级缓存+去二级缓存获取bean 清理二三级缓存初始化阶段，并未改变bean的地址，没有执行如代理等操作",
  "assets/image-20230322224226-hw3tpf6.png": "第一章AOP面向切面编程本质上就是通过为【目标类】织入【切面】的方式，实现对目标类功能的增强。根据织入的时间点不同我们可以选择以下时机进行织入:1. 编译期织入: 使用特殊的编译器在编译期将切面织入目标类，这种比较少见,因为需要特殊的编译器的支持。2. 类加载期织入: 通过字节码编辑技术在类加载期将切面织入目标类中。它的核心思想是:在目标类的class文件被VM加载前，通过自定义类加载器或者类文件转换器将横切逻辑织入到目标类的class文件中，然后将修改后class文件交给VM加载。这种织入方式可以简称为LTW (LoadTimeWeaving) 。3. 运行期织入: 这是最常见的，比如在运行期通过为目标类生成动态代理的方式实现AOP就属于运行期织入，这也是Spring AOP中的默认实现，并且提供了两种创建动态代理的方式，jDK自带的针对接口的动态代理和使用CGLib动态创建子类的方式创建动AMEE, Aspect] 5 并不支持。我们可以使用Aspectj给大家演示编译区织入和加载时织入，spring官网也明确指出了，spring的aop并不和aspectj竞争，而是一种互补的关系，这一点也得到了证实:一、编译期和加载期织入本小节的内容作为了解即可:1、编译期织入编译期织入的本质就是使用特殊的编译期将两个类融合，我们需要添加如下依赖，并定义一个Aspect|编译器插件(ajc编译器) :1 \u003cdependencies\u003e2 \u003cdependency\u003e3 \u003cgroupId\u003eorg. aspectj\u003c/groupId\u003e4 \u003cartifactId\u003easpectjweaver\u003c/artifactId\u003e5 \u003c/dependency\u003e6\u003cdependency\u003e\u003cgroupId\u003eorg. aspectj\u003c/groupId\u003e\u003cartifactId\u003easpectjrt\u003c/artifactId\u003e10 \u003c/dependency\u003e11 \u003c/dependencies\u003e© ©",
  "assets/image-20230322224804-r0atyi9.png": "121314151617181920212223242526272829303132333435363738394041424344\u003c!-- Aspect]编译器配置--\u003e\u003cbuild\u003e\u003cplugins\u003e\u003cplugin\u003e\u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e\u003cartifactId\u003espring-boot-maven-plugin\u003c/artifactId\u003e\u003c/plugin\u003e\u003cplugin\u003e I\u003cgroupId\u003eorg. codehaus .mojo\u003c/groupId\u003e\u003cartifactId\u003easpectj-maven-plugin\u003c/artifactId\u003e\u003cversion\u003e1.14.0\u003c/version\u003e\u003cconfiguration\u003e\u003ccomp]ianceLevel\u003e16.0\u003c/complianceLevel\u003e\u003csource\u003e16\u003c/source\u003e\u003ctarget\u003e16\u003c/target\u003e\u003cshowweaveInfo\u003etrue\u003c/showweaveInfo\u003e\u003cverbose\u003etrue\u003c/verbose\u003e\u003cXlint\u003eignore\u003c/xXlint\u003e\u003cencoding\u003eUTF-8\u003c/encoding\u003e\u003c/configuration\u003e\u003cexecutions\u003e\u003cexecution\u003e\u003cgoals\u003e\u003c!-- use this goal to weave all your main classes --\u003e\u003cgoal\u003ecompi le\u003c/goal\u003e\u003c!-- use this goal to weave all your test classes --\u003e\u003cgoal\u003etest-compi le\u003c/goal\u003e\u003c/goals\u003e\u003c/execution\u003e\u003c/executions\u003e\u003c/plugin\u003e\u003c/plugins\u003e",
  "assets/image-20230322224836-g2gkhq1.png": "45 \u003c/bui1d\u003e",
  "assets/image-20230322224850-qp40704.png": "编写如下的类，这种类我们很常见，一个service类一个切面类:public class MyService {public void service1() {System.out.printIn(\"service...\");wm 上wN",
  "assets/image-20230322224916-cmoyozv.png": "1 @Aspect2 public class MyAspect {3 @Before(\"execution(* com.ydIclass.aspecjstudy.MyService.service())\")4 public void before() {5 System.out.printIn(\"before service...6 }一定要注意，此时一定要使用maven命令进行编译，idea的启动命令还是会javac编译。",
  "assets/image-20230322225318-7wcetx7.png": "public class MyService {public MySefvice() {下public static void service() {System.out.println(\"service...\");",
  "assets/image-20230322225409-b7tatzb.png": "public class MyService {public MyService() {此public void service() {System.out.println(\"service...\");",
  "assets/image-20230322225716-fpkc1zf.png": "我们先在target中查看编译后java回com.ydlclass.aspecjstudyMyService {了target MyService()classescomydlclassaspecjstudy 2 service() {Client P| MyAspect.aspectOf() .before();MyAspect ‘MyService System. .printLn(META-INF再点击运行，织入成功:1 before service...2 sefvicel...target 本— service() {com MyAspect.aspectOf().before();ydiclass System. .printin(aspecjstudyClientMyAspectMyService我们在晚上还可能看到【后编译期】依旧可以被织入，所谓的后编译期就是目标类可能已经被打成了一个ar包，",
  "assets/image-20230322225742-vw7u14a.png": "2、如载期织入(Load-Time Weaving，简称|ltw)，可以使用DK的代理功能让代理器访问到VM的底层组件〈这也是我们俗称的探针) ，借此向的字节码进行转换。具体而言，java.lang.instrument包下定义了ClassFileTransformer接口，该接口的作用如下面的注释所描述:JVM注册类文件转换器，在类加载时对类文件|to transform class files.上mw N我们可以实现该接口，并重写如下抽象方法自代理提供了该接口的实现，用以转换类文件。转换发生在这个类被jvm定义之前An agent provides an implementation of this interface in orderThe transformation occurs before the class is defined by the Jw.定义类文件转换规则，当然我们很少有机会做这样的事情:1 byte[] transform(ClassLoader loader,String className,Class\u003c?\u003e classBeingRedefined,2 ProtectionDomain rotectionDomain,byte[] classfileBuffer)classfileBuffer是原始类文件对应的字节数组，返而java.lang.instrument包下的Instrumentation接口则可以将我们|public interface Instrumentation{回的byte[]为转化后的字节码数组，如果返回null|，则表示不进行字节码处理。定义的ClassTransFormer向|VM内部的组件进行注册:void addTransformer (ClassFileTransformer transformer);boolean removeTransformer (ClassFileTransformer transformer) ;工23 void addTransformer (ClassFileTransformer transformer, boolean canRetransform);456}在实际使用中，可以通过VM的-javaagent代参数在|中, JVM在加载Class文件时，会先调用这个CI启动时获取IVM内部组件的引assTransformer的transform()方法对中定义的横切逻辑，实现AOP功能。整个过程可以入下所示:，将ClassFileTransformer实例注册到VMClass文件的字节码进行转换，比如织入切面",
  "assets/image-20230322230205-oy8ifz6.png": "JVM \u0026Instrument© 字节码转换classO BMAX 一下字节码数据ClassLoader器as© 生成类最终字节码oaclass文件",
  "assets/image-20230322230246-v6lc0zv.png": "在使用-javaagent这个jvm参数时，需要将-Premain-Class #eI, 并调用其中的pre-main方法:我们引入的aspectweaner.jar本身就具备探针的能力:th External LibrariesB\u003c17\u003e© Maven: org.aspectj:aspectjrt:1.9.19\u0026 Maven: org.aspectj:aspectjweaver:1.9.19aspectjweaver-1.9.19,jarD dj.org.objectweb.asm© META-INFMANIFEST.MEDorgaspectj一个jar包作为探针加者MANIFEST.MF SCF, PAARorg.aspectj.weaver. loadtime. Agentorg.aspectj.weavertrueorg.aspectj.weaver. loadtime. Agentorg/aspectj/weaver/Agentipremainaz, Bae ImainAjzZ Ae Ainstrumentationaljvm tA TFClassPreProcessorAgentAdapterFR+ fii",
  "assets/image-20230322230454-8cbeha9.png": "1 public class Agent {2 private static Instrumentation s_instrumentation;3 private static ClassFileTransformer s_transformer = new ClassPreProcessorAgentAdapter () ;45 public static void premain(String options, Instrumentation instrumentation) {6 if (s_instrumentation == null) {7 s_instrumentation = instrumentation;8 s_instrumentation. addTransformer (s_transformer) ;9 }10 }LTDClassPreProcessorAgentAdapter类中的transform会完成织入的相关工作:1 public class ClassPreProcessorAgentAdapter implements ClassFileTransformer {2 private static ClassPreProcessor classPreProcessor;34 public ClassPreProcessorAgentAdapter() {[5 }67 public byte[] transform(ClassLoader loader, String className, Class\u003c?\u003e classBeingRedefined,ProtectionDomain protectionDomain, byte[] bytes) throws IllegalClassFormatException {8 if (classBeingRedefined != null) {9 System.err.printIn(\"INFO: (Enh120375): AspectJ attempting reweave of '\" + className +10 classPreProcessor.prepareForRedefinition(loader, className);II }1213 return classPreProcessor.preProcess(className, bytes, loader, protectionDomain);14 }",
  "assets/image-20230322230520-ocs0jls.png": "我们可以编写如下的例子:LTW织入器在工作时，首先会查找类路径下META-INF/aop.xml的配置文件，并根据配置文件的设置进行织入的操作。C2 resources外META-INFaop.xmlaop.xml文件如下:1 \u003c?xml version=\"1.0”encoding=\"UTF-8\"?\u003e2 \u003c!DOCTYPE aspectj PUBLIC \"-//Aspect)//DTD//EN\u003e3 \u003caspectj\u003e4 \u003cweaver\u003e5 \u003c!-- 设置哪些类需要织入--\u003e6 \u003cinclude execution=\"* com.ydlclass.aspecjstudy.MyService.servicelQ)\" /\u003e7 \u003c/weaver\u003e8 \u003caspects\u003e9 \u003c!-- 织入的切面类--\u003e10 \u003caspect name=\"com.yd1class.aspecjstudy.MyAspect”/\u003e11 \u003c/aspects\u003e12 \u003c/aspectj\u003eHaase DSMivm ans, SERS:",
  "assets/image-20230322230618-mg74sf2.png": "| -javaagent:C:\\Users\\itnanls.m2\\repository\\org\\aspectj\\aspectjweaver\\1.9.19\\aspectjweaver-1.9.19.jarBuild and runjava 17-javaagent Users\\itnanls\\.m2\\repository\\org\\aspectj\\asnec这个探针就是我们引入的jar包，我直接复制了maven仓库的jar包的地址。\u003cdependency\u003e\u003cgroupId\u003eorg.aspectj\u003c/groupId\u003e\u003cartifactId\u003easpectjweaver\u003c/artifactId\u003e\u003cversion\u003e1.9.19\u003c/version\u003e\u003c/dependency\u003e结果依然可以，由此我么也发现了aspectj的强大。",
  "assets/image-20230322231227-3g118ch.png": "1 before service...2 service is running...",
  "assets/image-20230322231336-sr6jt1b.png": "二、spring中对aop的支持1, ItwSpring中默认通过【运行期生成动态代理】的方式实现切面的织入，实现AOP功能，但是Spring也可以使用LTW技术来实现AOP，并且提供了细粒度的控制，支持在单个ClassLoader范国内实施类文件转换。Spring中的org.springframeworkjnstrument.classloading.LoadTimeWeaver接口定义了为类加载器添加ClassFileTransfomer的FBR:1 public interface LoadTimeweaver {23 // 增加一个ClassFileTransformer4 void addTransformer (ClassFileTransformer transformer);56 // 返回一个ClassLoader，通过基于用户定义的classfiletransformer的aspectj风格的加载时编织来支持插装。7 // 可以是当前的ClassLoader ，也可以是由LoadTimewWeaver实例创建的ClassLoader 。8 ClassLoader getInstrumentableClassLoader ();910 // 返回一个丢弃的ClassLoader ，人允许在不影响父ClassLoader的情况下加载和检查类。11 // 不应该返回从调用getInstrumentab1eCc1assLoader()返回的相同的ClassLoader实例。12 ClassLoader getThrowawayC lassLoader ();Spring的LTW支持Aspecdj定义的切面，既可以是直接使用Aspecdj语法定义的切面，也可以是使用@Aspecd注解，通过java类定义ADE. Spring LTW通过读取classpath下META-INF/aop.xml文件，获取切面类和要被切面织入的目标类的相关信息，通过LoadTimeWeaver在ClassLoaderjp载类文件时将切面织入目标类中，其工作原理如下所示",
  "assets/image-20230322231545-06fnkz6.png": "Spring LTW工作原理人@ 注册类文件转换器ClassLoaderClassFileTransformer© 读入Aspectj配置文件了加更改类字节码，织入切面5 ， casera Oo\"META-INF/aop.xml 本—_+@ 加载到vM中\u0026描述切面及目标类Bean的类文件",
  "assets/image-20230322232703-941fzc8.png": "三、常规aop织入时机I在springboot中我们要开启自动代理的功能需要在配置类添加如下的注解:1 @Import(AspectJAutoProxyRegistrar.class)2 public Ginterface EnableAspectJAutoProxy {34 [**5) * Indicate whether subclass-based (CGLIB) proxies are to be created as opposed6 * to standard Java interface-based proxies. The default is {@code false}.7 * 指示是否创建基于子类(CGLIB)的代理，而不是创建基于标准]ava接口的代理。默认值是false8 VY9 boolean proxyTargetClass() default false;1011 /**12 * Phan fh ie BAoPHER EA {@code ThreadLoca1}公开，以便通过{fQlink3 * org.springframework.aop.framework.AopContext}类进行检索。14 * 默认false15 * @since 4.3.116 正大17 boolean exposeProxy() default false;1819 了该注解的核心时引入以下的bean:",
  "assets/image-20230322232808-y4kqvi5.png": "Q0verridepublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry) ;AnnotationAttributes enableAspectJAutoProxy =AnnotationConfigUtils.attributesFor(importingClassMetadata, EnableAspectJAutoProxy.class);if (enableAspectJAutoProxy != null) {if (enableAspectJAutoProxy.getBoolean( attributeName: \"proxyTargetClass\")) {AopConfigUtils. forceAutoProxyCreatorToUseClassProxying(registry) ;Iif (enableAspectJAutoProxy.getBoolean( attributeName: “exposeProxy\")) {人EU . forceAutoProxyCreatorToExposeProxy(registry) ;",
  "assets/image-20230323092909-hxj31sp.png": "3、实例化前我们从源码出发，先看AbstractAutowiireCapableBeanFactory的createBean方法，实例化前会优先兰试看看是否需要生成一个代=测1 // 让BeanPostProcessors有机会返回一个代理MEA beans fil.2 Object bean = resolveBeforeInstantiation(beanName, mbdToUse) ;3 if (bean != null) {4 return bean;3|}方法的核心代码如下，在该方法中会在bean实例化前执行相关的后填处理工作，拦截干预bean的创建过程:任该方法中我们定义这个bean的一个targetType，也就意味着我们需要强制将bean实例化成一个目标类型，不在执行原始的实例化和初始化过程:1 protected Object resolveBeforeInstantiation(String beanName, RootBeanDefinition mbd) {2 Object bean = null;3) if (!Boolean.FALSE.equals(mbd.beforeInstantiationResolved)) {4 // MRL et beans hy LCR 。5 // hasInstantiationAwareBeanPostProcessors6 // isSyntheticQ 判断他是否是人工制造的bean7 if (!mbd.isSyntheticQ \u0026\u0026 hasInstantiationAwareBeanPostProcessors()) {8 // 找到目标类型9 Class\u003c?\u003e targetType = determineTargetType(beanName, mbd);10 if (targetType != null) {11 // 调用实例化前的后置处理器12 bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName) ;13 if (bean != null) {14 // 如果生成了代理，就省略实例化、数据填充等过程，但是要对初始化后的回调调用一下15 bean = applyBeanPostProcessorsAfteriInitialization(bean, beanName) ;16 }",
  "assets/image-20230323093024-l84zebh.png": "3、实例化前我们从源码出发，先看AbstractAutowireCapableBeanFactory的createBean方法，实例化前会优先兰试看看是否需要生成一个代理:1 // 让BeanPostProcessors有机会返回一个代理，而不是目标bean文例。2 Object bean = resolveBeforeInstantiation(beanName, mbdToUse);3 if (bean != null) {4 return bean;5}java方法的核心代码如下，在该方法中会在bean实例化前执行相关的后填处理工作，拦截干预bean的创建过程:在该方法中我们定义这个bean的一个targetType，也就意味着我们需要强制将bean实例化成一个目标类型，不在执行原始的实例化和初始化过程:1 protected Object resolveBeforeInstantiation(String beanName, RootBeanDefinition mbd) {iz Object bean = null;3 if (!Boolean.FALSE.equals(mbd.beforeInstantiationResolved)) {4 // 确保此时bean类交际上已被解析。5 // hasInstantiationAwareBeanPostProcessors6 // issynthetic() 判断他是天是人工制造的bean7 if (!mbd.isSynthetic() \u0026\u0026 hasInstantiationAwareBeanPostProcessors()) {8 // 找到目标类型9 Class\u003c?\u003e targetType = determineTargetType(beanName, mbd);10 if (targetType != null) {11 // 调用实例化前的后置处理器12 bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);13 if (bean != null) {14 // 如果生成了代理，就省略实例化、数据填充等过程，但是要对初始化后的回调调用一下15 bean = applyBeanPostProcessorsAfteriInitialization(bean, beanName) ;",
  "assets/image-20230323101011-cx15nsa.png": "1819202122}mbd.beforeInstantiationResolved = (bean != null);}return bean;",
  "assets/image-20230323101030-mhau3gl.png": "循环调用满足条件的后置处理器:1 protected Object applyBeanPostProcessorsBeforeInstantiation(Class\u003c?\u003e beanClass, String beanName) {2 for (InstantiationAwareBeanPostProcessor bp : getBeanPostProcessorCache().instantiationAware) {34 Object result = bp.postProcessBeforeInstantiation(beanClass, beanName);5 if (result != null) {6 return result;7 }8 +9 return null;",
  "assets/image-20230323101052-aph2yao.png": "现在走到AbstractAutoProxyCreator类的postProcessBeforejnstantiation中:I @Override2 public Object postProcessBeforeInstantiation(Class\u003c?\u003e beanClass, String beanName) {3 Object cacheKkey = getCacheKey(beanClass, beanName);45 if (!StringUtils.hasLength(beanName) || !this.targetSourcedBeans.contains(beanName)) {6 if (this.advisedBeans.containsKey(cacheKey)) {z return null;8 }9 if CisInfrastructureClass(beanClass) || shouldSkip(beanClass, beanName)) {16 this.advisedBeans. put (cacheKey, Boolean.FALSE);uu return null;12 }3 }1415 // 如果我们有一个自定义的TargetSource，在这里亨建代理。16 // 抑制目标bean不必要的默认实例化:17 // Targetsource和将以自定义方式处理目标实例。18 TargetSource targetSource = getCustomTargetSource(beanClass, beanName) ;19 if (targetSource 1= null) {20 if (StringUtils.hasLength(beanName)) {this. targetSou: rcedBEans add (beanName) ;33 // 获得通知和增强器24 Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(beanClass, beanName,targetSource);25 {/ 生成代理返回26 Object proxy = createProxy(beanClass, beanName, specificInterceptors, targetSource);2? V/ 将代理缓存28 this.proxyTypes.put(cacheKkey, proxy.getClass());2a return proxy;30 }3132 return null;",
  "assets/image-20230323101116-c6oepbk.png": "我们简单的分析了整个过程，如果要实现上述的代理:问题一: 定义一个TargetSource，想办法让getCustomTargetSource能返回一个TargetSource即可:1 @Nullable2 protected TargetSource getCustomTargetSource(Class\u003c?\u003e beanClass, String beanName) {34 // PRA BRE HS OT Rol e—-MEB MBM \u003e5 /é 这里告诉我们，我们需要一组TargetSourceCreator才可以J6 if (this. customTargetSourckcreators != null \u0026\u00267 this.beanFactory != nul] \u0026\u0026 this.beanFactory.containsBean(beanName)) {8 for (TargetSourceCreator tsc : this.customTargetSourceCreators) {9 TargetSource ts = tsc.getTargetSource(beanClass, beanName);16 if (ts != null) {1112 if Cloagger.isTraceEnabledQ)) {13 logger . trace(\"TargetSourcecreator [\" + tsc + \"] found custom TargetSource forbean with name '\" + beanName + \"'\"):14 }15 return ts;16 }",
  "assets/image-20230323101219-406f2ta.png": "1920 // No custom TargetSource found.it return null;22\\}",
  "assets/image-20230323101240-797iv6p.png": "TargetSource ts = tsc.getTargetSource(beanClass, beanName);123456public final TargetSource getTargetSource(Class\u003c?\u003e beanClass, String beanName) {AbstractBeanFactoryBasedTargetSource targetSource =createBeanFactoryBasedTargetSource(beanClass, beanName);if (targetSource == null) {return null;if Clogger.isDebugEnabled()) {logger .debug(\"Configuring AbstractBeanFactoryBasedTargetSource:+ targetSource);DefaultListableBeanFactory internalBeanFactory = getInternalBeanFactoryForBean(beanName) ;// We need to override just this bean definition, as it may reference other beans// and we're happy to take the parent's definition for those.// Always use prototype scope if demanded.//我们需要重写这个bean定义，因为它可能引用其他bean//我们很乐意接受父类的定义。//如果需要，总是使用原型范围BeanDefinition bd = this.beanFactory.getMergedBeanDefinition(beanName);GenericBeanDefinition bdCopy = new GenericBeanDefinition(bd);if CisPrototypeBased()) {",
  "assets/image-20230323101302-vswsarg.png": "23 bdcopy.setScope(BeanDefinition.SCOPE_PROTOTYPE);24 }25 internalBeanFactory.registerBeanDefinition(beanName, bdCopy) ;2627 // 完成PrototypeTargetSource的配置。28 targetSource. setTargetBeanName(beanName) ;29 targetSource. setBeanFactory(internalBeanFactory) ;3031 return targetSource;32/}我们兰试写一个例子:1、想方设法给AbstractAutoProxyCreator中添加customTargetSourceCreators，我们可以使用我们认为合理的后置处理器干预这个bean的创建过程:1 @Component2 public class MyBeanPostProcessor implements BeanPostProcessor, PriorityOrdered {34private BeanFactory factory;6 G@overridepublic Object postProcessAfterInitializationLObject bean, String beanName) throwsBeansException {8 if (bean instanceof AbstractAutoProxyCreator) {9 System.out.printinC”postPracessAfteriInitialjzation----------\u003ebeanname=\"-beanNname) ;10 AbstractAutoProxyCreator creator = (AbstractAutoProxyCreator) bean;了R // 此外我们可以剖建自己的cus comTarge tSourcecreator13 // E718 ocxCustomTargetSourceCreator7z A abs tractautoProxyt reator14 creator. setCustomTargetSourcecreators (xxxCus tomTargetSourcecreator) ;15 }167 return bean;19 }",
  "assets/image-20230323101318-dcfhbvc.png": "// 保证这个优先级最高Q@overridepublic int getorder() {return -1000;",
  "assets/image-20230323151720-cap7ekj.png": "下第二章事务首先、我们在学习spring中的事务管理时，需要了解一些基本概念:1、隔离级别2、传播行为3、线程绑定隔离级别我们在学习数据库时应该很清楚了，这里就不在整述。在学习spring相关的事务时， 我们要清基点， 单体应用的事务本身并不复杂，但是一旦进入工程后便会产生很多复杂的化学反应，比如说事务的同步机制。当有多个事务产生传递行为时，复杂度会立马上升。一、事务的同步管理事务1 {事务2 {当同一个线程中需要处理多个事务资源时，我们必须明确乡个事务的执行顺序，此时就需要明确，哪些事务需要执行，哪些事务需要暂停挂起，哪些挂起的事务需要优先恢复执行等，为了解决这些问题，sprin8g给我们提供了一个事务同步的解决方案:",
  "assets/image-20230323151900-36ecsc2.png": "1、概述当我们遇到如下的代码，在一个service中调用了另一个service的方法，此时bservice的事务被传播到了asService中，这样就产生了事务的传播:1 @Service J2 public class AService {34 @Autowired5 private BService bService;67 public void orderQ){8 yyyyyyO;9 bservice. xxxx();10 zzzzzQ);11 }12 |}java因为两个service都存在事务，那么生成的的sql语句可能如下:1 BEGIN;2 update yyyy;3 SSM eo4 begin;5 update xxxx;6 commit;8 update zzz;9 commit;在这里很明显是存在问题的，当第二个begin执行时，会降式的将第一个事务直接提交了，从而导致A5ervice的部分事务失效。所以当【B事务】传播到【A事务】中时【8事务】需要做一下微调，微调的结果不外拉以下几种情部:",
  "assets/image-20230323151937-ul5khky.png": "(1) 当Aservice有事务第一种情况: 融入A事务(干掉8的事务) 形成的sql如下，这种场景是最多的:1 BEGIN;2 update yyyy;3 SN i a eg4 update xxxx;56update zzz;commit;第二种情况: 挂起A事务，让B事务独立于A事务运行。当两个事务需要各自独立维护自身事务，单个事务则无法独立完成，B事务启动时可以暂时将A事务挂起，就是阻塞住，不给他继续发送sql，让他无法提交，B开启一个新的事务，B执行完成后A继续。",
  "assets/image-20230323155750-di132kn.png": "事务2提交事务1继续执行",
  "assets/image-20230323160954-kw8yvkc.png": "(2) 当Aservice无事务第一种情况: 8可务以事务方式运行1 select yyyy;2 -- 5) FiH-------------------3 begin;4 update xxxx;5 commit;6 9 we een nnn - eee ===select zzz;",
  "assets/image-20230323161156-0ppa5lw.png": "第二种情况: B事务以无事务方式运行I1 select yyyy;2 -- 两个事务的分界线--一--一--一一一一-2 select XXXX;4) 25 Ge eerie eee.5 select zzz;(3) REBS通过设置保存点，将内部的事务转化为通过保存点和回滚至保存点，实现类似两个事务的操作。伪代码如下:1 begin;2 update mystudent set score = 100 where id =1;3 SAVEPOINT a;4 update mystudent set score = 100 where id =3;5 update mystudent set score = 100 where id =4;6 -- 以上的代码有问题则会回滚至保存点7 ROLLBACK to a;8 -- 后边的事务不会受到影响9 update mystudent set score = 100 where id =2;10 commit;",
  "assets/image-20230323161238-49mwpae.png": "RENEE:1、内部SAVEPOINT a后的代码如果有问题则直接回滚至保存点。2、整个事务的提交也不受内部【伪事务】的影响。",
  "assets/image-20230323161328-ert41ru.png": "2、传播行为结合上述我们考虑的情况，以及java中的异常，spring为我们提供了以下传播行为:。 PROPAGATION REQUIRED: 表示当前方法必须运行在事务中。如果当前事务存在，方法将会在该事务中运行。否则，会启动一个新的事务。REQUIRED就是需要，意思就是8事务无论如何要有事务。PROPAGATION | SUPPORTS: 表示当前方法不需要事务上下文，但是如果存在当前事务的话，那么该方法会在这个事务中运。SUPPORTS表示支持，就是B事务会支持A事务。PROPAGATION_MANDATORY: (强制性的) 表示该方法必须在事务中运行，如果当前事务不存在，则会抛出一个异PROPAGATION_REQUIRED_NEW: (需要个新的) 表示当前方法必须运行在它自己的事务中。一个新的事务将被启动。如果存在当前事务，在该方法执行期间，当前事务会被挂起。PROPAGATION_NOT_SUPPORTED: (不支持事务) 表示该方法不应该运行在事务中。如果存在当前事务，在该方法运行期间，当前事务将被挂起。PROPAGATION_NEVER: (不会运行在有事务的环境) 表示当前方法不应该运行在事务上下文中。如果当前正有一个事务在运行，则会抛出异常。PROPAGATION_NESTED: (#285) 表示如果当前已经存在一个事务，那么该方法将会在嵌套事务中运行。包套的事务可以独立于当前事务进行单独地提交或回滚。如果当前事务不存在，那么其行为与REQUIRED一样。注意各厂商对这种传播行为的支持是有所差异的。可以参考资源管理器的文档来确认它们是否支持谋套事务。",
  "assets/image-20230323161446-f0mip80.png": "五、 在编程式和声明式事务管理之间进行选择只有在有少量事务操作的情况下，编程式事务管理通常是一个好主意。 例如，如果我们有一个web应用程序，它只需要为某些更新操作使用事务，那么我们可能不希望Spring或任何其他技术来设置事务代理。 在这种情况下，使用TransactionTemp]ate可能是一种很好的方法。 只有使用事务管理的编程方法才能显式地设置事务名称。另一方面，如果应用程序有许多事务操作，则声明式事务管理通常是值得的。 它使事务管理远离业务逻辑，并且不难配置。 当使用Spring框架而不是出B CMT时，声明性事务管理的配置成本大大降低了。",
  "assets/image-20230323162456-okh1j2c.png": "一、事务的同步管理事务1 {、事务2 |当同一个线程中需要处理多个事务资源时，我们必须明确乡个事务的执行顺序，此时就需要明确，哪些事务需要执行，哪些事务需要暂停挂起，哪些挂起的事务需要优先恢复执行等，为了解决这些问题，sprin8给我们提供了一个事务同步的解决方案:",
  "assets/image-20230323162519-m40df3d.png": "开启事务二开启事务一\u003e 挂起事务一，并记录事务一的资源句柄wean 事务二提交\u003e开启事务三挂起事务二，并记录事务二的资源句柄",
  "assets/image-20230323162537-5rymkqj.png": "下面的接口维护了一个事务同步状态:1 public interface TransactionSynchronization extends Ordered, Flushable {2 工3 // 事务提交状态4 int STATUS_COMMITTED = 0;56 // 事务回滚状态7 int STATUS_ROLLED_BACK = 1;89 // 事务状态未知10 int STATUS_UNKNOWN = 2;111213 // 返回此事务同步的执行顺序。14 Goverride15 default int getOrder() {16 return Ordered.LOWEST_PRECEDENCE;17 }1819 // 暂停当前事务，用于挂起线程，本质是将当前的线程与当前事务解绑20 default void suspend() {}2122 //恢复当前事务，将已经暂停的事务与当前的线程重新绑定23 default void resume() {}2425 // 如果适用，将底层会话刷新到数据存储:26 G@override27 default void flush() {28 }",
  "assets/image-20230323162609-sgkvjqo.png": "// 在事务提交之前调用(在\"beforeComp1etion\"之前) 。// 此回调并不意味着事务将实际提交。在调用此方法之后，仍然可以发生回滚决策。// 此回调是为了执行仅在提交仍有机会发生时才相关的工作，例如将SQL语句刷新到数据库。default void beforeCommit(boolean readOnly) {}// 在事务提交/回滚之前调用。可以在事务完成之前执行资源清理。default void beforeCompletion® {了// 事务提交后调用。可以在主事务成功提交后立即执行进一步的操作。// 例如，在主事务成功提交后，可以提交进一步的操作，如确认消息或电子邮件。default void afterCommit() {3// 在事务提交/回滚后调用。可以在事务完成后执行资源清理。default void afterCompletion(int status) { }",
  "assets/image-20230323162703-r29yzvv.png": "TransactionSynchronizationManager事务同步管理器为我们管理当前线程的同步状态:1 public abstract class TransactionSynchronizationManager {2 // 本地线程中保存了当前的连接资源，key(datasource)--\u003e value(connection)3 private static final ThreadLocal\u003cMap\u003cObject, Object\u003e\u003e resources =4 new NamedThreadLocal\u003c\u003e(\"Transactional resources\");5 // 保存了当前线程的事务同步器6 private static final ThreadLocal\u003cSet\u003cTransactionSynchronization\u003e\u003e synchronizations =7 new NamedThreadLocal\u003c\u003e(\"Transaction synchronizations\");",
  "assets/image-20230323162830-bfhm67z.png": "// 保存了当前线程的事务名称private static final ThreadLocal\u003cString\u003e currentTransactionName =new NamedThreadLocal\u003c\u003e(\"Current transaction name”);// 保存了当前线程的事务是否只读private static final ThreadLocal\u003cBoolean\u003e currentTransactionReadOnly =new NamedThreadLocal\u003c\u003e(\"Current transaction read-only status\");// 保存了当前线程的事务隔高级别private static final ThreadLocal\u003cInteger\u003e currentTransactionIsolationLevel =new NamedThreadLocal\u003c\u003e(\"Current transaction isolation level\");// 保存了当前线程的事务的活路状态private static final ThreadLocal\u003cBoolean\u003e actualTransactionActive =I new NamedThreadLocal\u003c\u003e(\"Actual transaction active\");// 管理与事务相关的资源句柄=// 返回绑定到当前线程的所有资源。public static Map\u003cObject, Object\u003e getResourceMap() {Map\u003cObject, Object\u003e map = resources.get();return (map != null ? Collections.unmodifiableMap(map) : Collections.emptyMap());// GBZGAPEMAAAENRERNAK.",
  "assets/image-20230323162901-3fkiwgc.png": "55public static boolean hasResource(Object key) {// 省略实现}// 获取资源I@Nul lablepublic static Object getResource(Object key) {Object actualKey = TransactionSynchronizationUti ls .unwrapResourcel fNecessary(key) ;return doGetResource(actualKey) ;// 通过给定的key(datasource)] ，查找资源// 此方法可能返回一个线程绑定的资源，这个在处理事务传播时很有用G@Nu11ableprivate static Object doGetResource(Object actualKey) {Map\u003cObject, Object\u003e map = resources.get();// 说明当前线程没有绑定的资源〈事务) ，直接返回if (map == null) {return null;i// 20R RR TTObject value = map.get(actualKey);// 如果这个资源被标记为无限，从线程中删除if (value instanceof ResourceHolder \u0026\u0026 ((ResourceHolder) value).isVoidQ) {map. remove (actualKey) ;if (map.isemptyQO) {resources. remove();}value = null;}return value;Error in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/image-20230323162952-kj47ziw.png": "// 将给定键的给定资源绑定到当前线程。public static void bindResource (object key, Object value) throws IllegalStateException {Object actualKey = TransactionSynchronizationUti Is .unwrapResourcel fNecessary(key) ;Assert.notNul]l(value, \"Value must not be null\");Map\u003cObject, Object\u003e map = resources.get();// 如果没有找到，则设置ThreadLocal Mapif (map == null) {map = new HashMap\u003c\u003e();resources .set(map);}// 绑定当前的资源，如果原来有老的资源，将原有资源返回，没有返回nu11Object oldValue = map.put(actualKey, value);// 将老资源标记无效if (oldValue instanceof ResourceHolder \u0026\u0026 ((ResourceHolder) oldValue).isVoidQ)) {oldvalue = null;}// 如果老资源依然有效，则抛出异常if (oldvalue != null) {throw new I]legalStateException(\"Already value [\" + oldValue + \"] for key [\" + actualKey + \"] bound tothread\");}// 从当前线程解除给定键的资源绑定。public static Object unbindResource(Object key) throws IllegalStateException {Object actualKey = TransactionSynchronizationuUti Is.unwrapResourcelfNecessary(key) ;",
  "assets/image-20230323163034-cjc3ajw.png": "Object value = doUnbindResource(actualKey) ;if (value == null) {throw new IllegalStateException(\"No value for key [\" + actualKey + \"] bound tothread\");}return value;}@Nul lablepublic static Object unbindResourcelfPossible(Object key) { }// FHL MRS EAE A A@Nul lableprivate static Object doUnbindResource(Object actualKey) {Map\u003cObject, Object\u003e map = resources.get();if (map == null) {return null;}Object value = map.remove(actualKey) ;// Remove entire ThreadLocal if empty...if (map.isEmptyQ) {",
  "assets/image-20230323163053-v2rspw4.png": "resources .remove() ;}// 标记无效的资源if (value instanceof ResourceHolder \u0026\u0026 ((ResourceHolder) value).isVoid()) {value = null;‘ I// 将解绑的资源返回return value;// 如果当前线程的事务同步是活动的，则返回。可以在注册前调用，以避免不必要的实例创建。public static boolean isSynchronizationActive() {return (synchronizations.get() != null);}// 激活当前线程的事务同步。由事务管理器在事务开始时调用。public static void initSynchronization() throws IllegalStateException {if CisSynchronizationactiveQ)) {throw new IllegalStateException(\"Cannot activate transaction synchronization - alreadyactive\");",
  "assets/image-20230323163157-wxyjxqe.png": "3synchronizations.set(new LinkedHashSet\u003c\u003e());",
  "assets/image-20230323163215-02ufp7q.png": "二、编程式事务传统的编程式事务书写方式1 @Override2 public void transfer(String from, String to, Integer money) {4 // 默认的事务配置5 DefaultTransactionDefinition definition = new DefaultTransactionDefinition();6 // 使用事务管理器进行事务管理TransactionStatus jransacti on = transactionManager.getTransaction(definition);9 try{10 // 转账其实是两个语句11 String moneyFrom = “update account set money = money - ? where username =12 String moneyTo = “update account set money = money + ? where username = ?13 J/ 从转账的人处扣钱14 jdbcTemplate.update(moneyFrom,money, from) ;15 int i = 1/0;16 jdbcTemplate.update(moneyTo, money, to) ;17 }catch (RuntimeException exception) {18 exception. printStackTrace();19 // BR20 transactionManager. rol lback(transaction) ;2 }22 // 提交23 transactionManager .commit(transaction) ;24/}",
  "assets/image-20230323165732-u2qtv52.png": "二、编程式事务传统的编程式事务书写方式;1 @Override2 public void transfer(String from, String to, Integer money) {4 // 默认的事务配置5 DefaultTransactionDefinition definition = new DefaultTransactionDefinition(;6 // 使用事务管理器进行事务管理TransactionStatus transaction = transactionManager.getTransaction(definition);89 try{10 // 转账其实是两个语句11 String moneyFrom = “update account set money = money - ? where username =12 String moneyTo = “update account set money = money + ? where username = ?13 // 从转账的人处扣钱14 jdbcTemplate.update(moneyFrom,money, from) ;15 int i = 1/0;16 jdbcTemplate.update(moneyTo, money, to);17 }catch (RuntimeException exception) {18 exception. printStackTrace();19 // WR20 transactionManager.rollback(transaction) ;]21 }22 // BR3 transactionManager.commit(transaction) ;24 3",
  "assets/image-20230323173313-9t9hi7k.png": "我们先从编程式事务的角度仔细的分析一下源码，其核心接口为PlatformTransactionManager，我们常用的实现是DataSourceTransactionManager:public interface PlatformTransactionManager extends TransactionManager {throws TransactionException;二23 TransactionStatus getTransaction(@Nullable TransactionDefinition definition)456 void commit(TransactionStatus status) throws TransactionException;8 void rollback(TransactionStatus status) throws TransactionException;",
  "assets/image-20230323173324-ki6myz6.png": "MANDATORY抛异常REQUIRED, = 1 waned ) © aSReSEenRm获取事务REQUIRES TUE) © 恢复连接状态并归还这个新事务的连接—\u003e \u003e Sheinscgatnt tbe! —\u003e NESTED — 一如: autocommit=true从当前线程获取开启一个新事务从数据源拿一个连接© 如果持有暂停挂起的| autocommit=false __, 回滚事务_| 资源，则恢复该资源rollback()当前线程已经绑定事务全= NEVER,SUPPORTS人外部存在事务\u003e 以非事务方式运行从数据源拿一个连接| autocommit=true|| J | J |NOT_SUPPORTED REQUIRES_NEW REQUIRED,SUPPORTS,挂起外部事务挂起外部事务rae MANDATORY独立以非事务运行开启新事务融入外部事务NEVER直接抛异党",
  "assets/image-20230323231041-s2d5uni.png": "1、获取事务对象抽象类AbstractPlatformTransactionManager的核心方法实现:123// 核心的方法: 获取事务对象Q@overridepublic final TransactionStatus getTransaction(@Nu11able TransactionDefinition definition) throwsTransactionException {// 如果给定的事务配置， 使用默计的事务配置《隔离级别，传播行为等)TransactionDefinition def = (definition != null ? definition :TransactionDefinition.withDefaults());// 获取一个事务，创建一个心的事务，但事务中的连接资源是从当前线程的绑定资源中查找// 主要是看当前有无事务Object transaction = doGetTransaction();boolean debugEnabled = logger. isDebugEnabled();// 现有事务被发现if (isExistingTransaction(transaction)) {// 检查传播行为，根据传播行为创建内部事务// 如: REQUIRES_NEW 就会挂起外部事务，开启新事物返return hand1eExistingTransaction(def，transaction，debugEnab1led) ;回// 检查新事务的定义设置。if (def.getTimeout() \u003c TransactionDefinition.TIMEOUT_DEFAULT) {throw new InvalidTimeoutException(\"Invalid transaction timeout\", def.getTimeout());// 没有发现现有事务-\u003e检查传播行为，继续执行// PROPAGATION_MANDATORY该方法必须在事务中运行，如果当前事务不存在，则会抛出一个异if (def.getPropagationBehavior() == TransactionDefinition.PROPAGATION_MANDATORY) {throw new I1legalTransactionStateException(\"No existing transaction found for transactionmarked with propagation 'mandatory'\");",
  "assets/image-20230323231104-9ygx3bw.png": "3// NESTED, REQUIRED , REQUIRES_NEW 就会开启事务else if (def.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRED| |\\def. getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEWdef. getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) {SuspendedResourcesHolder suspendedResources = suspend(nul1);if (debugEnabled) {logger.debug(\"Creating new transaction with name [\" + def.getName() + \"]: ”+ def);try {// 直接启动事务return startTransaction(def, transaction, debugEnabled, suspendedResources);catch (RuntimeException | Error ex) {resume(null, suspendedResources) ;throw ex;}else {// 剩下的传播行为// SUPPORTS NOT_SUPPORTED NEVER",
  "assets/image-20230323231126-p5yfkgd.png": "49 // 创建\"空\"事务:没有实际事务〈不会将connection的autocommitted设置为false)50 if (def.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT \u0026\u0026logger. isWarnEnabled()) {51 logger.warn(\"Custom isolation level specified but no actual transaction initiated; ”+“jsolation level will effectively be ignored: \" + def);52 }53 boolean newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS) ;54 return prepareTransactionStatus (def, null, true, newSynchronization, debugEnabled, null);55 }56 |}ARMS S SSSA SSSA, FREES:",
  "assets/image-20230323231138-oireuwh.png": "@Overrideprotected boolean isExistingTransaction(Object transaction) {DataSourceTransactionObject txObject = (DataSourceTransactionObject) transaction;return (txObject.hasConnectionHolder() \u0026\u0026 txObject.getConnectionHolder().isTransactionActive());",
  "assets/image-20230323234430-43rknci.png": "a123}456当外部存在事务时的状态:private TransactionStatus handleExistingTransaction(TransactionDefinition definition, Object transaction, boolean debugEnabled)throws TransactionException {// 如果是never，因为存在外界事务所以直接抛异常if (definition. getPropagationBehavior 0 == TransactionDefinition.PROPAGATION_NEVER) {throw new I]1legalTransactionStateException(“Existing transaction found for transaction marked with propagation 'never'\");3// NOT_sUPPORTED表示该方法不应该运行在事务中。如果存在当前事务，在该方法运行期间，当前事务将被挂起if (definition. getPropagationBehavior() == TransactionDefinition.PROPAGATION_NOT_SUPPORTED) {if (debugEnabled) {logger. debug(\"Suspending current transaction\");了// 挂起外部事务Object suspendedResources = suspend(transaction);// 设置同步器boolean newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS) ;// 该方法不会真实的创建事务// 新创建的TransactionSstatus会持有已经挂起的连接资源return prepareTransactionStatus (definition, null, false, newSynchronization, debugEnabled, suspendedResources);",
  "assets/image-20230323234540-1bnbg9l.png": "2425262728293031323334353637383940414243444546ie48// REQUIRES_NEWchr (definition. getProgagationBehavior () == TransactionDefinition.PROPAGATION_REQUIRES_NEW) {if (debugEnabled) {logger. debug(\"Suspending current transaction, creating new transaction with name [\" +definition.getName() + \"]\");}SuspendedResourcesHolder suspendedResources = suspend(transaction) ;try {// 挂起外部事务，开启新的事务，新的事务中也会持有已经挂起的连接资源return startTransaction(definition, transaction, debugEnabled, suspendedResources);}catch (RuntimeException | Error beginEx) {resumeAfterBeginException(transaction, suspendedResources, beginEx);throw beginEx;}//NESTED REBSif (definition. getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) {if (lisNestedTransactionAllowed()) {throw new NestedTransactionNotSupportedeException(“Transaction manager does not allow nested transactions by default -*nestedTransactionAllowed’ property with value ‘true'\");}if (debugEnabled) {logger .debug(\"Creating nested transaction with name [\" + definition.getName() + \"]\");+ \"specify",
  "assets/image-20230323234606-ipnjtbe.png": "// 通过使用savepoint来生成谋喜事务(mysq1)if (usesavepointForNestedTransaction()) {DefaultTransactionStatus status =prepareTransactionStatus (definition, transaction, false, false, debugEnabled,null);// 创建保存点status .createAndHoldSavepoint();return status;} else {return startTransaction(definition, transaction, debugEnabled, null);了】 I// 其他REQUIRED，SUPPORTS，MANDATORY，融入事务，不存在事务同步// 因为外界有事务，此次开一个空事务即可boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER) ;return prepareTransactionStatus (definition, transaction, false, newSynchronization,debugEnabled, null);}",
  "assets/image-20230323234620-tfff6zh.png": "接下来我们看看开启事务，和准备事务的区别:1 private TransactionStatus startTransaction(TransactionDefinition definition, Objecttransaction,boolean debugEnabled, GNullable SuspendedResourcesHolder suspendedResources) {23 boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER) ;4 DefaultTransactionStatus status = newTransactionStatus(5 definition, transaction, true, newSynchronization, debugEnabled, suspendedResources) ;6 doBegin(transaction, definition);7 prepareSynchronization(status, definition);8 return status;9|}1011 protected final DefaultTransactionStatus prepareTransactionStatus(12 TransactionDefinition definition, @Nullable Object transaction, boolean newTransaction,13 boolean newSynchronization, boolean debug, @Nullable Object suspendedResources) {1415 DefaultTransactionStatus status = newTransactionStatus(16 definition, transaction, newTransaction, newSynchronization, debug, suspendedResources) ;17 prepareSynchronization(status, definition);18 return status;19 }",
  "assets/image-20230323234653-o95w19p.png": "Oe thats我们可以很明显的发现这两个方法的核心区别就是doBegin(transaction, definition):1 @Override2 protected void doBegin(Object transaction, TransactionDefinition definition) {3 DataSourceTransactionObject txObject = (DataSourceTransactionObject) transaction;4 Connection coh = null;56 try {a if (!txObject.hasConnectionHolder() ||8 txObject.getConnectionHolder().isSynchronizedwithTransaction()) {9 // 从datasource获取一个新的连接10 Connection newCon = obtainDataSource().getConnection();11 if Clogger.isDebugEnabled()) {12 logger. debug(\"Acquired Connection [\" + newCon + \"] for JDBC transaction\");ibs} }14 txObject.setConnectionHolder(new ConnectionHolder(newCon), true);15 }1617 txObject.getConnectionHolder() .setSynchronizedwithTransaction(true) ;18 con = txObject.getConnectionHolder().getConnection();1920 // 设置隔高级别21 Integer previousIsolationLevel = DataSourceUti1s.prepareConnectionForTransaction(con,definition);22 txObject.setPreviousIsolationLevel (previousIsolationLevel);23 // 是理是只读事务24 txObject.setReadon1y(definition.isReadon1yO));2526 // 将自动提交修改为false，这是开启事务的本质27 if (con.getAutoCommit()) {28 txObject.setMustRestoreAutoCommit(true) ;29 if Clogger.isDebugEnabled()) {30 logger. debug(\"Switching JDBC Connection [\" + con + \"] to manual commit\");",
  "assets/image-20230323234822-8az4qd5.png": "395758// 将自动提交关闭con.setAutoCommit(false);prepareTransactionalConnection(con, definition);// 将事务设置为活跃状态txObject.getConnectionHolder() .setTransactionActive(true) ;int timeout = determineTimeout (definition) ;if (timeout != TransactionDefinition.TIMEOUT_DEFAULT) {Se// SEAM NERA RES ANif (txObject.isNewConnectionHolder()) {TransactionSynchronizationManager .bindResource(obtainDataSource(),txObject.getConnectionHolder());了catch (Throwable ex) {if (txObject.isNewConnectionHolder()) {DataSourceUtils.releaseConnection(con, obtainDataSource());txObject.setConnectionHolder(null, false);了throw new CannotCreateTransactionException(\"Could not open JDBC Connection fortransaction\", ex);}",
  "assets/image-20230324002032-hmukump.png": "2、提交事务工boverride2 public final void commit(TransactionStatus status) throws TransactionException {3 if (status.isCompleted(Q)) {4 throw new I]legalTransactionStateException(5 “Transaction is already completed - do not call commit or rollback more than once pertransaction\");6 }DefaultTransactionStatus defStatus = (DefaultTransactionStatus) status;// 如果应用程序在此TransactionStatus对象上调用setRo11backon1y，则只返回\"true”。10 if (defstatus.isLocalRollbackOnly()) {11 if (defStatus.isDebugQ) {12 // 事务代码已请求回滚13 1ogger .debug(\"Transactional code has requested rollback\");14 }15 processRol Iback(defStatus, false);16 return;17 318 // 标志了全局仅回滚19 if (!shouldCommitonGlobalRollbackonly() \u0026\u0026 defStatus.isGlobalRollbackOnly()) {20 if (defstatus.isDebug()) {21 logger .debug(\"Global transaction is marked as rollback-only but transactional coderequested commit\");22 }23 processRol Iback(defStatus, true);24 return;25) }2627 processCommit(defStatus) ;28 |}核心的提交方法:",
  "assets/image-20230324004114-01950u0.png": "2、处理连接资源1 protected void doCleanupAfterCompletion(Object transaction) {2 DataSourceTransactionObject txObject = (DataSourceTransactionObject) transaction;3 if (txObject.isNewConnectionHolder()) {4 TransactionSynchronizationManager.unbindResource(this.obtainDataSource());5 367 Connection con = txObject.getConnectionHolder().getConnection();89 try {10 if (txObject. isMustRestoreAutoCommit()) {11 con.setAutoCommit(Ctrue) ;12 }ale}14 DataSourceUti 1s. resetConnectionAfterTransaction(con, txObject.getPreviousIsolationLevel(),txObject.isReadonly());15 } catch (Throwable var5) {16 this. logger.debug(\"Could not reset JDBC Connection after transaction\", var5);17 }1819 if (txObject.isNewConnectionHolder()) {20 if (this. logger. isDebugEnabled()) {21 this. logger.debug(\"Releasing JDBC Connection [\" + con + \"] after transaction\");22 }2324 DataSourceUtils.releaseConnection(con, this.dataSource) ;25 }2627 txObject.getConnectionHolder().clear();",
  "assets/image-20230324004143-spvk4so.png": "cleanupAfterCompletion中的两个步骤:1、清理本地线程的资源1 public static void clearQ {2 synchronizations. remove();3 currentTransactionName. remove();4 currentTransactionReadonly. remove();5 currentTransactionIsolationLevel. remove();6 actualTransactionActive. remove();",
  "assets/image-20230324004156-ispblwn.png": "其他的回调我们不一一查看，主要看看在commit之后的现场恢复的内容:1 @Override2 public void afterCompletion(int status) {3 if (shouldunbindAtcompletionQ) {4 boolean releaseNecessary = false;5 if (this.holderactive) {6 // The thread-bound resource holder might not be available anymore,7 // since afterCompletion might get called from a different thread.8 this.holderActive = false;9 TransactionSynchronizationManager . unbindResourcelIfPossible(this. resourceKey) ;10 this. resourceHolder.unbound() ;11 releaseNecessary = true;12 }13 else {14 releaseNecessary = shouldReleaseAfterCompletion(this.resourceHolder);15 }16 if (releaseNecessary) {17 leas Ses our ce s.resourceHolder, this.resourceKey) ;18 }19 }20 else {21 // Probably a pre-bound resource...22 cleanupResource(this.resourceHolder, this.resourceKey, (status == STATUS_COMMITTED));23 }24 this. resourceHolder.reset();25/3}",
  "assets/image-20230324004215-vqau45x.png": "3、恢复挂起的资源1 if (status.getSuspendedResources() != null) {if (status.isDebug()) {logger.debug(\"Resuming suspended transaction after completion of inner transaction\");Object transaction = (status.hasTransaction() ? status.getTransaction() : null);234 326 resume(transaction, (SuspendedResourcesHolder) status .getSuspendedResources());",
  "assets/image-20230324004235-njuexf9.png": "3、oo10@Overridepublic final void rollback(TransactionStatus status) throws TransactionException {if (status. isCompletedQ)) {throw new I]legalTransactionStateException(“Transaction is already completed - do not call commit or rollback more than once pertransaction\");}DefaultTransactionStatus defStatus = (DefaultTransactionStatus) status;processRol lback(defStatus, false);",
  "assets/image-20230324004337-m9qz2vf.png": "SM: .1 private void processRollback(DefaultTransactionStatus status, boolean unexpected) {2 try {2) boolean unexpectedRollback = unexpected;45 try {6 triggerBeforeCompletion(status) ;8 if (status.hasSavepoint()) {9 if (status.isDebugQ) {10 logger.debug(\"Rolling back transaction to savepoint\");11 }12 status .rol lbackToHeldSavepoint() ;13 }14 else if (status.isNewTransactionQ)) {15 if (status.isDebugQ) {16 logger.debug(\"Initiating transaction rollback\");",
  "assets/image-20230324004356-e3b60t3.png": "17 }18 doRol Iback(status) ;19 }20 //.. .中间省略pal }22 }23 finally {24 cleanupAfterCompletion(status) ;25 }26 } I具体实现:1 @Override2 protected void doRollback(DefaultTransactionStatus status) {3 DataSourceTransactionObject txObject = (DataSourceTransactionObject) status.getTransaction();4 Connection con = txObject.getConnectionHolder().getConnection();5 if (status.isDebugQ) {6 lTogger.debug(\"Rolling back JDBC transaction on Connection [\" + con + \"]\");7 }8 try {9 con.rollbackQ);10 }11 catch (SQLException ex) {12 throw translateException(\"JDBC rollback\", ex);13 }",
  "assets/image-20230324004418-o3rtuwk.png": "代理模式通常情况下，我们使用代理模式的事务会更多， sieeve ogre 这两种实现的方式本质其实是一至的，我们目前使用的最多的可能就是注解的形式了，我们也以此为例，给大家介绍一开启注解式事务需要在配置类添加注解: @EnableTransactionManagement1、该注解如下，会导入TransactionManagementConfigurationSelector中定义的bean:1 @Import(TransactionManagementConfigurationSelector.class)2 public Ginterface EnableTransactionManagement {}2、该bean的核心是注入ProxyTransactionManagementConfiguration配置类:1 public class TransactionManagementConfigurationSelector extendsAdviceModeImportSelector\u003cEnableTransactionManagement\u003e {23 Goverride4 protected String[] selectImports(AdviceMode adviceMode) {5 switch (adviceMode) {6 case PROXY:7 return new String[] {AutoProxyRegistrar.class.getName(),8 ProxyTransactionManagementConfiguration.class.getName()};9 case ASPECT):10 return new String[] {determineTransactionAspectClass()};11 default:12 return null;13 }14 }3, ProxyTransactionManagementConfiguration PEA S =bean:¢ AnnotationTransactionAttributeSource用于解析Transactiona|注解。。 transactionAdvisor实际用来做增强的增强器，包含了切点，通知等。。 具体方法增强的bean是transactionlnterceptor，这是一个环绕通知:",
  "assets/image-20230324110627-tn3q8n3.png": "@Bean@Role(BeanDefinition. ROLE_INFRASTRUCTURE)public TransactionInterceptor transactionInterceptor(TransactionAttributeSourcetransactionAttributeSource) {TransactionInterceptor interceptor = new TransactionInterceptor();interceptor.setTransactionAttributeSource(transactionAttributeSource) ;if (this.txManager != null) {interceptor.setTransactionManager (this. txManager) ;}return interceptor",
  "assets/image-20230324111024-hsaaqyl.png": "对于springmvc而言，他是基于sprin8g的#f 展的第二广框杂，很多的功能都是基于容器实现的，当然于此同时，找们还需要确定spring的上下文，是在tomcat启动中哪一个节点引导启动的。以下是一个典型的web.xml文件，其中配置了springmvc相关的内容:1 \u003c?xml version=\"1.0”encoding=\"UTF-8\"?\u003e2 \u003cweb-app xmIns=\"http://xmIns.jcp.org/xml/ns/javaee\"3 xmIns:xsi=\"http: //www.w3.org/2001/XMLSchema-instance”4 xsi:schemaLocation=\"http://xmIns.jcp.org/xm1/ns/javaeehttp: //xmIns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"5 version=\"4.0\"\u003e67 \u003c!--配置一个ContextLoaderListener ，他会在serv]et容器初始化后帮有我们初始化spring容器--\u003e8 \u003clistener\u003e9 \u003clistener-class\u003e10 org. springframework.web.context.ContextLoaderListener11 \u003c/listener-class\u003e12 \u003c/listener\u003e1314 \u003c!--指定启动spring容器的配置文件--\u003e15 \u003cContext-param\u003e16 \u003cparam-name\u003econtextConfigLocation\u003c/param-name\u003e17 \u003cparam-value\u003e/WEB-INF/app-context. xm1\u003c/param-value\u003e18 \u003c/context-param\u003e1920 \u003c!--注册Dispatcherservlet，这是springmvc的核心--\u003e21 \u003cservlet\u003e22 \u003cservlet-name\u003espringmvc\u003c/servlet-name\u003e23 \u003cservlet-class\u003eorg.springframework.web.servlet.DispatcherServlet\u003c/servlet-class\u003e24 \u003cinit-param\u003e25 \u003cparam-name\u003econtextConfigLocation\u003c/param-name\u003e26 \u003cparam-value\u003eWEB-INF/app-context. xml\u003c/param-value\u003e27 \u003c/init-param\u003e28 \u003c!--加载时先启动--\u003e29 \u003cload-on-startup\u003e1\u003c/load-on-startup\u003e30 \u003c/servlet\u003e31 \u003c!--/ 匹配所有的请求; (HAIR. jsp) --\u003e32 \u003c!--/* 匹配所有的请求; 〈和包括.jsp》 --\u003e",
  "assets/image-20230324111136-4hw7dsl.png": "\u003cservlet-mapping\u003e\u003cservlet-name\u003espringmvc\u003c/servlet-name\u003e\u003curl-pattern\u003e/\u003c/url-pattern\u003e\u003c/servlet-mapping\u003e\u003c/web-app\u003e",
  "assets/image-20230324111506-68gfr8s.png": "xml事实上我们的mvc工程通常会启动两个spring容器，一个是管理spring本身的bean (@Component，@ServiC-一一mx一rrr-的上下文，一个是管理mvc的相关的bean (@Controller等) 和环境的上下文。启动tomcat —_\u003e 初始化servlet容器广一人。 加载Dispatchservlet| ||监听到容器初始化事件生命周期init()方法初始化spring的上下文初始化springmvc上下文接下来我们分别看看这两个上下文是何时被创建的:一、listenerpublic class ContextLoaderListener extends ContextLoader implements ServletContextListener {123 // 该方法会在容器初始化后调用4 @Override5 public void contextInitialized(ServletContextEvent event) {6 initwebApplicationContext (event. getServletContext());7 }8 }",
  "assets/image-20230324142404-gmv2aof.png": "2、run方法123456public ConfigurableApplicationContext run(String... args) {long startTime = System.nanoTime();// 创建一个启动上下文，该上下文不是spring的上下文// 指示在boot工程启动时的临时上下文，内置多播器DefaultBootstrapContext bootstrapContext E createBootstrapContext();ConfigurableApplicationContext context = null;// 根据系统变量java.awt.head1ess的值来设置]ava headless mode，缺省值是true，// 在系统可能缺少显示设备、键盘或鼠标这些外设的情况下可以使用雇模式。// 默认为true，因为大部分的boot项目都不需要外设交互，一旦启动成功就不需要操作。configureHeadlessProperty();// 获得所有继承于SpringApp1icationRunListener的1istenerSpringApplicationRunListeners listeners = getRunListeners(args);// 发布ApplicationStartingEvent 事件listeners.starting(bootstrapContext, this.mainApplicationClass);try {// 获取命令行参数ApplicationArguments applicationArguments = new DefaultApplicationArguments (args) ;// 准备环境ConfigurableEnvironment environment = prepareEnvironment(listeners, bootstrapContext,applicationArguments) ;// 打印bannerBanner printedBanner = printBanner(Cenvironment);// 创建一个spring上下文，不执行(refresh) 方法//context = createApplicationContext();context. setApplicationStartup(this.applicationStartup) ;// 这里会将一些早期事件注册给多播器，并发布一个事件",
  "assets/image-20230324143222-qwy8thj.png": "36prepareContext(bootstrapContext, context, environment, listeners, applicationArguments,printedBanner) ;// 刷新容器refreshContext(Context) ;// 刷新后处理afterRefresh(context, applicationArguments);Duration timeTakenToStartup = Duration.ofNanos(System.nanoTime() - startTime);if i ae {new StartupInfoLogger (this .mainApplicationClass) . logStarted(getApplicationLog() ,timeTakenToStartup) ;}}// 广播启动完成事件listeners.started(context, timeTakenToStartup) ;// 执行所有runnercallRunners(context, applicationArguments) ;return context;",
  "assets/image-20230325104232-58rl3es.png": "java Math.class",
  "assets/image-20230325104730-4x1xxoi.png": "Math.class00011100011001101010111100..",
  "assets/image-20230325132318-ee1aewi.png": "Python-夏天biibili",
  "assets/image-20230325132539-9wlhezp.png": "加载支撑JVM运行的位于JRE的lib目录下的核心类库，比如rtjar、charsets.jar等加载支撑JVM运行的位于JRE的lib目录下的ext扩展目录中的JAR类包加载ClassPath路径下的类包，主要就是加载你自己写的那些类加载用户自定义路径下的类包",
  "assets/image-20230325133437-l6monxn.png": "",
  "assets/image-20230325134136-2hbonrc.png": "",
  "assets/image-20230325140532-k0jt5sj.png": "是否配置担保参数;\u003cXX:-HandlePromotionFailureOOM",
  "assets/image-20230325161751-kh7a4c0.png": "1、标记-清除算法回收前未使用",
  "assets/image-20230325161836-gaia6qj.png": "2、标记-整理算法回收前里地HK",
  "assets/image-20230325161906-78lwt13.png": "效率高，没碎片，适合朝生夕死的内存区域!3、复制算法回收前未使用未使用",
  "assets/image-20230325161943-9x97gdg.png": "老年代/元数据区标记-清除/整理",
  "assets/image-20230325162046-zi3fv38.png": "Python-夏天bilibili新生代老年代/元数据区复制算法标记-清除/整理",
  "assets/image-20230325162556-c74k89m.png": "ST RUD SR et如果说收集算法是内存回收的方法论，垃圾收集器就是内存回收的具体实现。Young generation Parallel OldSerial Old(MSC)Tenured generation",
  "assets/image-20230325162811-2osuqom.png": "Serial收集器用户线程1cpu 0用户线程cpu 1GC线程ome : 老年代条取标记一整理算法cpu 3 暂停所有用户户线程线程SafePoint SafePointSerial/Serial Old 收集器运行示音图新生代采用复制算法，老年代采用标记-整理算法",
  "assets/image-20230325163015-mz6i3iy.png": "PeBe \u0026—_ SeSerial/Serial Old 收集器运行示音图FA:1、在JDK1.5以及以前版本中与Parallel Scavenge收集器搭配使用2、作为CMS收集器的后备方案",
  "assets/image-20230325163209-hfz87n0.png": "Python-夏天(ilibil-XX:ParallelGCThreads 指定线程收集数",
  "assets/image-20230325163533-hmsj4w0.png": "Parallel Scavenge收集器是Server模式下的默认收集器Re cpu 0 Gc线程1 Gc线程1cpu 1cpu 2SafePoint SafePointParallel Scavenge/Parallel Old 收集器运行示音图新生代采用复制算法，老年代采用标记-整理算法",
  "assets/image-20230326000241-vo5p92i.png": "// 单例池private final Map\u003cString, Object\u003e singletonObjects = new ConcurrentHashMap\u003c\u003e( initialCapacity: 256) ;/xx Cache of singleton factories: bean name to ObjectFactory. x/ 三private final Map\u003cString, ObjectFactory\u003c?\u003e\u003e singletonFactories = new HashMap\u003c\u003e( initialCapacity: 16) ;/xx Cache of early singleton objects: bean name to bean instance. */private final Map\u003cString, Object\u003e earlySingletonObjects = new ConcurrentHashMap\u003c\u003e( initialCapacity: 16)",
  "assets/image-20230326001332-kmfjmfg.png": "Object o = new Object();applicationContext.getBeanFactory().registerSingleton( beanName: \"xxx\", 0);",
  "assets/image-20230326134133-p6gbolj.png": "@Componentpublic class UserService implements InitializingBean {@Autowiredprivate OrderService orderService;public void test() {System. out.println(orderService) ;+ 7@Overridepublic void afterPropertiesSet() throws Exception {System.out.printin(\"xxx\");",
  "assets/image-20230326141727-sov8ipd.png": "人File Edit View Navigate Code Refactor Build Run fools Git Window Helpspring-framework-5.3.10 — tuling com zhouyu ) service ) @ UserServiceWF Project9 CommitWM Bookmarks i» Structuresrc main) javaSpring - Userservic 二JJweet ain}\u003e \u0026GG-~?me Gt vA bik~,[i Project wv @rttexe*- @ Userservice java @ ZhouyuAspect.java = (8) AbstractAutowireCapableBeanFactory,java © InstantiationStrategy.java » esl2:点就睡的林同学: he]\u003e IME spring-websocket\u003e 有src\u003e 有tomcat.8080Y Bi tuling\u003e Mm build\u003e MoutY Bisrc\u003e BEresources@ build.gradle\u003e By tuling-boot\u003e By tuling-vip-demo\u003e By tuling-web次editorconfig gitattributes@ gitignore站.mailmap@ build.gradleRun: © Testly15private OrderService orderService;public UserService() {System.out.printLn(9) ;public UserService(OrderService orderService) {this.orderService = orderService;System.out.printin(1);public UserService(OrderService orderService,a\u003e» £ \"C:\\Program Files\\Java\\jdk1.8.0_301\\bin\\java.exe\" ...|) ”本|vafe vl» \u003e»P Git » Run @®Debug TODO @ ProblemsProcess finished with exit code 0Terminal @ Profiler “\\ Build © Services站Vu Endpoints \u0026 Dependenciesthis.orderService = orderService;@ SpringOrderService orderServicel) {w.4 IC Iceo TI SeOoAaavii?.. 2 242",
  "assets/image-20230326141756-js9gyyw.png": "[J Eile Eait View Navigate Code Refactor Build Run Tools Git Window Help Spring - serseVE- Ss ainspring-framework-5.3.10 tuling src main java zhouyu ) service ) @ UserService ) @ UserService% Bi Project v @zttzte%*- @ Userservice java) © ZhouyuAspect.java (8) AbstractAutowireCapableBeanFactory.java © InstantiationStrategy java\u0026 \u003e By spring-websocket 局得\u003e 有srcEH Be tomcat.8080 H14 private OrderService orderService;E » Bj tuling\u0026 \u003e Rebuild 15| eimant 16 public UserService() {Y Bisrc a By main 17 System.out.printLn(9) ;v Bajava¥ Be com.zhouyu 18 }Y Bmaspect 19@ ZhouyuAspect .v Baservice 20 @Autowired@ OrderService _ _ . . 本@ Userservice 21 public UserService(OrderService orderService) {i= 2 this.orderService = orderService;\u003e Bresources 3 System. out.printin(1);@ build.gradle am\u003e By tuling-boot oe } it\u003e By tuling-vip-demo 25\u003e By tuling-web\u0026 .editorconfigG gitattributes =@ gitignore f自.mailmap this.orderService = orderService;# build.gradle和Structure2B BookmarksRun: © TestBe\u003e\u0026GOG-public UserService(OrderService orderService, OrderService orderServicei1) {~ . . 。 ，- ww、\\\u003e» £ \"C:\\Program Files\\Java\\jdk1.8.0_301\\bin\\java.exe\" ...-+com. zhouyu. service. OrderService@68f7aae2Oo\u003e Process finished with exit code 0» \u003e»P Git Run @®Debug TODO @ ProblemsPe ey Se eS eae国Terminal G Profiler “Build Services Y\\Endpoints Dependencies Springee a eee ReeGt ££ Y Aesdl2点就睡的林同学iibimc ICr imco TI ff ， \u0026",
  "assets/image-20230326154817-dl6eiab.png": "@Componentpublic class UserService {private OrderServicepublic UserService(OrderService xxx) { // byType--\u003ebyName| Map\u003cbeanName, Beanxt %\u003ethis.orderService = Xxx; ISystem.out.printin(1) ;nuhlie voaid test) £jailable: expected single matching bean but found 3: orderService, orderService1, orderService2",
  "assets/image-20230326155015-ok1sblz.png": "\u003c Batuling 9 */\u003e Mibui\u003e Mion 10 eY 有srcvm ‘lal @Component|a 12 public class UserService {314 private OrderService orderService;a86 public UserService(OrderService orderService2) { // byType--\u003ebyName Map\u003cbeanName, Beanxt %\u003e17 this.orderService = orderService2;wm bui 18 System.out.printin(1) ;\u003e Btuling 下\u003e》号tuling - 9 }\u003e Bytuling .次.editol 20= @ aitatt 21 nuhlic void tect) {n: (© Test =4 \"C:\\Program Files\\Java\\jdk1.8.0_301\\bin\\java.exe\" ...*com.zhouyu.service. OrderService@2db0f6éb2BucseProcess finished with exit code 0Error in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/image-20230326173105-lspt06x.png": "@Componentpublic class UserService {G@Autowiredprivate JdbcTemplate jdbcTemplate;@Transactionalpublic void test() {throw new NullLPointerException();",
  "assets/image-20230326173126-2g7yjfp.png": "UserService PE = (UserService) applicationContext.getBean( name: \"userSeuserService.test();",
  "assets/image-20230326173618-y2axrzw.png": "class UserSerivceProxy extends UserService {UserService target;public void test(){// 执行事务切面逻辑// 开局事务// 事务管理器新建一个数据库连接conn// target.test() // UserService普通对象.test() 执行sql1 sq I",
  "assets/image-20230326173920-aya0l09.png": "class UserSerivceProxy extends UserService {UserService target;public void test(){// 执行事务切面逻辑// FEBS// 事务管理器新建一个数据库连接conn// conn.autocommit=false// target.test() // Userservice普通对象.test() 执行sq11 sql2// conn. commit) ;|// conn.rollback();",
  "assets/image-20230326175622-plivfpr.png": "class UserSerivceProxy extends UserService {UserService target;public void test(){// 执行事务切面逻辑// 开司事务// 事务管理器新建一个数据库连接conn ThreadLocal// conn.autocommit=false// target.test() // UserService普通对象.test() jdbcTemplate执行sq11 sql2// conn.commit();// conn. rollback () ;| 入",
  "assets/image-20230326180133-6ecmud0.png": ";PUBLic CLaSss userservice +@Autowiredprivate JdbcTemplate jdbcTemplate;@Transactional: public void test() {aQ; | 1@Transactional(propagation = Propagation.NEVER)- public void a(){jdbcTemplate.execute( sql: \"insert ante) #1 Values(2,2/2)2)121)\");",
  "assets/image-20230326180606-evhqfe4.png": "@Componentpublic class UserService {@Autowiredprivate JdbcTemplate jdbcTemplate;@Autowiredprivate UserSerlviceBase userServiceBase;@Transactionalpublic void test() {userServiceBase.a();",
  "assets/image-20230326180726-v5coh3p.png": "@Componentpublic class UserServiceBase {@Autowiredprivate JdbcTemplate jdbcTemplate;| I@Transactional(propagation = Propagation.NEVER)public void a() { jdbcTemplate.execute( sql: \"5",
  "assets/image-20230326193141-dvldhue.png": "@Componentpublic class UserService {@Autowiredprivate JdbcTemplate jdbcTemplate;@Autowiredprivate UserService userService|;市@Transactionalpublic void test() {jdbcTemplate.execute( sql: \"insert into) tt valves(1)1)1)1/1!)\");userServiceBase.a();",
  "assets/image-20230326193245-wp1zzjh.png": "@Componentpublic class UserService {@Autowiredprivate JdbcTemplate jdbcTemplate;G@Autowiredprivate UserService userService;@Transactionalpublic void test() {jdbcTemptate.execute( sq: “insert ante t1|vatves()1/1)4)99\")\") ;userService|.a(); I",
  "assets/image-20230326224902-twtrgfk.png": "CMS收集器CMS ( Conrrurent Mark Sweep )\u003ecpu 0cpulcpu2cpu 3用户线程1 用户线程1 用户线程1用户线程2 用户线程2并发清理用户线程4 用户线程3Concurrent Mark Sweep收集器运行示意图以获取最短回收停顿时间为目标HotSpot虚拟机第一款真正意义上的并发收集器",
  "assets/image-20230326225302-7ffcus3.png": "G1收集器G1 ( Garbage-First )be EdenSurvivorOldHumongous一款面向服务器的垃圾收集器主要针对配备多颗处理器及大容量内存的机器以及高概率满足GC停顿时间要求的同时，还具备高吞吐量性能特征",
  "assets/image-20230327012432-ufd23di.png": "@Overridepublic Object postProcessAfterInitialization(@Nullable Object bean, String beanName)if (bean != null) {Object cacheKey = getCacheKey(bean.getClass(), beanName) ;bch (this. earlyProxvReferences. remove (cacheKey) != bean) {return wrapIfNecessary (bean, beanName, cacheKey);上IFreturn bean;// 提前进行AOP@Overridepublic Object getEarlyBeanReference(Object bean, String beanName) {Object cacheKey = getCacheKey(bean.getClass(), beanName) ;this.earlyProxyReferences.put(cacheKey, bean);return wrapIfNecessary(bean, beanName, cacheKey);",
  "assets/image-20230327012633-7iz58av.png": "三级缓存，三个MapsingletonObjects: 第一级缓存: 存储最终Bean对象(经过所有步骤之后的对和象)earlySingletonObjects: 第二级缓存”保证单例singletonFactories ; 第三级缓存”打破循环earlyProxyReferencescreatingset| I",
  "assets/image-20230327175854-c2g51m6.png": "实例化填充属性单例BeanDefinition cnet 遍历beanDefinitionMap 合并BeanDefinition 实例化前填充属性初始化前加载类推断构造方法生成BeanDefinition 季选出单例BeanDefinitionbeanDefinitionMap\u003cbeanName, BeanDefinition\u003ey遍历单例BeanDefinition 实例化实例化初始化后| mm |Tawv",
  "assets/image-20230329121357-ryjr91x.png": "执行阶段注册阶段负责转化各种配置来源信息为BeanDefnition执行顺序(调用栈)各种BeanDefinitionReader读取配置数据转化为BeanDefinitionDefaultListableBeanFactory#registerBeanDefinition 注册到容器中合并阶段将存在父子依赖关系的BeanDefinition转化为RootBeanDefinitionAbstractBeanFactory#doGetBean_AbstractBeanFactory#getMergedL ocalBeanDefinition 合并获得RootBeanDefinition实例化阶段将BeanDefinition中的Bean进行实例化并放在包装类BeanWrapper中AbstractAutowireCapableBeanFactorytfcreateBean 进入实例化阶段AbstractAutowireCapableBeanFactoryfresolveBeanClass 基于ClassLoader加载beanClassAbstractAutowireCapableBeanFactorytfresolveBeforeInstantiation 进入实例化前阶段，‘5 nstantiation AwareBeanPostProcessor##postProcessBeforelnstantiationAbstractAutowireCapableBeanFactory#doCreateBeanAbstractAutowireCapableBeanFactoryfcreateBeanInstance 实例化Bean并返回包装类BeanWrapperAbstractAutowireCapableBeanFactory#populateBean 进入实例化后阶段，处理属性冉值EMBED)初始化阶段在返回Bean(对应Spring源码中变量exposedObject)之前做一些处理1. nstantiationAwareBeanPostProcessorfpostProcessAfierlnstantiation，决定是否对属性进行赋值2 InstantiationAwareBeanPostProcessorifpostProcessPropertyValues, TL修改属性赋值的值3. AbstractAutowireCapableBeanFactoryfapplyPropertyValues 实际进行属性赋值(包括依赖注入)AbstractAutowireCapableBeanFactory#initializeBean 进入初始化阶段AbstractAutowireCapableBeanFactoryfinvokeAwareMethods 处理BeanAware接口回调AbstractAutowireCapableBeanFactoryfapplyBeanPostProcessorsBeforeInitialization进入初始化前阶段，处理BeanPostProcessor#fpostProcessBeforcInirialization当然分BeanPostProcessor是处理一些BeanAware接口回调的，这些BeanPostProcessor是由Spring容器启动(efresh)的时候注入的AbstractAutowireCapableBeanFactoryfinvokelnitMethods 进入初始化，处理TitializingBeanfkaferProperticsSet和自定义的initmethod方法AbstractAutowireCapableBeanFactoryfapplyBeanPostProcessorsAfterInitialization进入初始化后阶段，处理BeanPostProcessor#postProcessAfterInitializationApplicationContextyfnishBeanFactorylnitialization 进入初始化完成阶段，基于Smartlnitialixingsingleton接口实现，这个接口在Spring 41+ 版本进行提供销毁阶段在bean销毁的时候做一些处理AbstractA pplication Contextclose 进入销如阶段AbstractApplicationContextfdoCloseAbstractApplicationContextfdestroyBeansDisposableBeanAdapterfdestroy1. @PreDestroy注解，主要通过DestmuctionAwareBeanPostProcessor实现2. 实现DispossbleBean接口，主要通过DisposableBeanfdestroy0实现3. 自定义销毁方法DisposableBeanAdapterfinvokeCustomDestroyMethod0)实现",
  "assets/image-20230401105522-f9d6zz0.png": "接线想了解更多连接资料，请按遥控器上的帮助来参阅帮助指南。aa 加录像机/ 视频游戏设备/ee | et -ee DD 播放各/便捧式提ia=一耳机数码相机/ 便抄式摄CS (RAL /USB 存储媒介Hom| 团anDk -dmD一to ii天线-4m ET有线/ 路由器带光学音频输HOM! 带HDMI 数码相机/ 便入的音响系统设备eARC/ 设备的式摄像机/ARC 的USB 存储媒介",
  "assets/image-20230404142923-oq16e7l.png": "Y = metadata = {InjectionMetadata@2098}* @ targetClass = {Class@1895} \"class com.bobo.selfAutowired.annotation.Person\"Y ® injectedElements = {ArrayList@2099} size = 1Y = 0={AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement@2103} \"AutowiredFieldElement for private com.bobo.selfAutowired.annotation.Pet8 required = true@ cached = false@ cachedFieldValue = null\u003e © thisSo = (AutowiredAnnotationBeanPostProcessor@1782}Navigate‘@isField = true® pd=null@ skip = null\u003e @checkedElements = {LinkedHashSet@2100} size=1https://blog.csdn.net/u013277209,",
  "assets/java-basic-generic-4-20230329173703-89m4vad.png": "** 泛型方法* @param \u003cT\u003e 声明一个泛型T* @param c 用来创建泛型对象***作用是指明谤型T的具体类型throws InstantiationException, IllegalAccessException{ARAB WTRAWAOM",
  "assets/java-basic-generic-5-20230329173709-2hiwyiz.png": "Generic generic = new Generic();//调用泛型方法= generic.getobJject(|1ass.forName(\"com.cnblogs.test.User”\"|利用class. forName指定泛型的具体类型|此时obj就是User类的实例",
  "assets/jingdong-20230404012138-y3ymz15.png": "",
  "assets/lock-20230404012245-x05jgle.png": "",
  "assets/net-img-1679220173791-d23b4e93-e0dd-451c-b835-cf3d75f3c819-20230321111820-lvk5c4d.png": "第一章bean的元数据一、回顾bean的注入方式1, xml1 \u003cbean id=\"user\" class=\"com.ydlclass.User\" scope=\"prototype” autowire=\"byType\" init-method=\"init\"depends-on=\"a,b\" \u003e2 \u003cproperty name=\"name\" value=\"jerry\"/\u003e\u003cproperty name=\"age\" value=\"18\"/\u003e4 \u003c/bean\u003exm2、注解1 @Controller2 public class UserService {}1 @Service2 @DependsOn(value = {\"xxx\", \"yyyy\"})public class UserService {}@Repositorypublic class UserDao {}N@Compoment@DependsOn(value = {\"xxx\", \"yyyy\"})public class RedisTemplate {}w_ N",
  "assets/net-img-1679220204295-999f5b86-982f-4c75-ac95-aaa5f1f1f9a9-20230321111820-v94mc0g.png": "3、配置类1 |pconFiguration!2 public class Userconfiguration {3 egeanCuser{public User userOt5 User user =6 user. setnaneC7 user. setage(20);8 return user;310}4、import注解1 public class wyselector inplements Iaportselector {2) @override2, public string() selectrmports (amotationetadata importingclassNetadata) {4 return new String[]{\"con. ydlclass.Userservice\", \"com.ydlcTass.UserDa0\"}:5 了18 @ConFigurationrmport(yselector.class)10 public class Userconfiguration ()",
  "assets/net-img-1679223702869-36c67154-04b8-4566-9dc3-d4eb1cc66ffe-20230321111820-q8c5gxy.png": "spring在构造bean时，不可能像我们主动构造那样，随心所欲的new，赋值、已经完成方法调用。他需要将千差万别的class概括成为一种【统一的措述性】语言，spring提供了一个接口BeanDefintion为我们统一了这种描述bean的元数据。bean的元数据通常是我们使用xml或者注解进行配置的数据，我们的spring容器启动之间第一步就是加载配置数据，这些元数据会被加载到内存以一个个beanDefinition的形式保存在一个map中。一个BeanDefiniiton大概保存了以下信息:1. 定义了id、别名与Bean的对应关系(BeanDefinitionHolder)2. 具体的工厂方法(Class类型) ，包括工厂方法的返回类型，工厂方法的Method对象3. 构造函数、构造函数形参类型4, Bean的class对象5. 作用范围、是否懒加载等等以下是BeanDefiniiton的类的结构图，这里没有用类图，我觉得这里用这样的图好看一些:",
  "assets/net-img-1679223821449-8dc7fdbc-c29f-4957-b438-e445991b1d46-20230321111820-cdfk43a.png": "BeanDefinition接口该接口提供了检索、修改Bean的元数据的能力，并定义了一些基础数据VvAnnotatedBeanDefinition##0该接口拥有访问特定注解元数据的能力，不需要加载类就能访问，直接解析类文件(ASM)抽象类|GenericBeanDefinition类Spring2.5以后提供的通用BeanDefinition实现，该类通过parenetName属性来灵活(动态) 设置parent bean definition可AbsractBeanDefinition抽象类提供了基本的方法实现，定义了一系列属性vps charg#8BeanDefinition,ChildBeanDefinition配合构建父子关系的bean可ConfigurationClassBeanDefinition类负责将@Bean注解的方法转换为对应的ConfigurationClassBeanDefinition类vvScannedGenericBeanDefinition#基于ASM扫描宝的类文件加载Bean的定义存储@Cconpoment、@sSservice、@Controller等注解注释的类| |AnnotatedGenericBeanDefinition在基于注解驱动的Spring应用着，它使用的非常多|ChildBeanDefinitionChildBeanDefinition@—#bean definition，它可以继承它父类的设置，对RootBeanDwtfinition有一定的依赖关系Mt: 自Spring2.5以来，以编程方式注册bean定义的首选方法是GenericBeanDefinition类，它允许通过GenericBeanDefinition动态定义依赖项。setparentName方法。对于大多数用例，这有效的取代了childBeanDefinition类。",
  "assets/net-img-1679236554503-b8c0494c-6eea-4b47-9e8b-35ed317ef69d-20230321111820-2nkz8sl.png": "GenericBeanDefinition在很多场景可以车换以上的内容，但是由于历史等原因，RootBeanDefinition依旧存在而且很重要，后期T的归一处理还是要糙不同的BeanDefinition转换或合并至一个RootBeanDefinition :RootBeanDefinition与AbstractBeanDefinition是互补关系，RootBeanDefinition在AbstractBeanDefinition的基础上定义了更多属性。RootBeanDefinition不能有父BeanDefinition，可以和ChildBeanDefinition配合使用构建父子关系(bean是可以继承的) 。目前最常用的BeanDefinition是GenericBeanDefinition及其子类的实现，GenericBeanDefinition很强大，也可以很轻松的独立的构建父子关系。有时为了统一调用，不同的BeanDefinition可以合并、拷贝等。1 // 转换的2 GenericBeanDefinition definition = new GenericBeanDefinition(teddy) ;3 // 合并的4 definition. overrideFrom(dog) ;",
  "assets/net-img-1679236644604-b2904706-3d41-428e-87b0-f863169e76ee-20230321111820-8sfwnja.png": "1 @Test2 public void testRootBeanDefinition() throws ClassNotFoundException, NoSuchMethodException,InvocationTargetException, InstantiationException, I]llegalAccessException {3 RootBeanDefinition dog = new RootBeanDefinition();4 dog.setBeanClassName(\"com.yd1class.Dog\");5 BeanMetadataAttribute color = new BeanMetadataAttribute(\"color\", “white\");6 BeanMetadataAttribute age = new BeanMetadataAttribute(\"age\",\"3\");7 dog. addMetadataAttribute(color);8 dog. addMetadataAttribute(age) ;10 // 子Definition的创建需要依赖父Definition11 ChildBeanDefinition teddy = new ChildBeanDefinition(\"dog\");12 teddy. setBeanC lassName(\"com. ydIclass.TeddyDog\") ;13 BeanMetadataAttribute name = new BeanMetadataAttribute(\"name\", “doudou\");14 teddy. addMetadataAttribute(name) ;15 了",
  "assets/net-img-1679236680842-5fa68152-2acf-47db-be63-dcbe0836be73-20230321111821-mqfkw10.png": "有了统一标准的元数据之后，我们就可以统一管个容器去存储，当然我们可以使用map这样的集合类，当然spring差不多也是这样做的，他为我们提供了一个接口BeanDefinitignRegistry。只要实现了这个接口，就会盾有注册beanDefinition的能力。",
  "assets/net-img-1679236740877-01562681-23d5-40e0-ba7c-45d7ad3e7b7b-20230321111821-7vi09f3.png": "BeanDefinitionRegistry接口如下:1 public interface BeanDefinitionRegistry extends AliasRegistry {23 // 注册一个BeanDefinition4 void registerBeanDefinition(String beanName, BeanDefinition beanDefinition)56throws BeanDefinitionStoreException;void removeBeanDefinition(String beanName) throws NoSuchBeanDefinitionException;9 BeanDefinition getBeanDefinition(String beanName) throws NoSuchBeanDefinitionException;1011 boolean containsBeanDefinition(String beanName) ;1213 String[] getBeanDefinitionNames();14 IL15 int getBeanDefinitionCount();1617 boolean isBeanNameInUse(String beanName) ;1819|}一个bean可以有一个d，和多个名字或别名，AliasRegistry为我们提供了注册别名的能力: 一1 public interface AliasRegistry {2 void registerAlias(String name, String alias);3 void removeAlias(String alias);4 boolean isAlias(String name);5 String[] getAliases (String name);6 }",
  "assets/net-img-1679238637663-5dbd8fa3-33e4-4894-bdeb-8aae984594d7-20230321111821-r62jqgp.png": "四、加载BeanDefinition当然我们不可能为每一个类手动编写与之对应的BeanDefinition，元数据还是要从xml或注解或配置类中获取，spring也为我们提供了对应的工具。1、读取xml配置文件该类通过解析xml完成BeanDefinition的读取，并且将它解析的BeanDefinition注册到一个注册器中:1 @Test2 public void téstRegistryByxm]O{34 // 定义一个注册器，用来注册和管理BeanDefinition5 BeanDefinitionRegistry registry = new SimpleBeanDefinitionRegistryQ;67 // 通过xm]文件加载8 Xm1BeanDefinitionReader xmlReader = new Xm1BeanDefinitionReader(Cregistry);9 xmlReader. loadBeanDefinitions(\"classpath: spring. xml\");1011 logger. info(Arrays. toString(registry. getBeanDefinitionNames()));12 }java",
  "assets/net-img-1679238699003-cd8ecc96-f282-406c-833f-07646dcc032c-20230321111820-5py8p0p.png": "xml可b必0下定义:1 \u003cbean id=\"dog”class=\"com.ydlclass.Dog\"\u003e2 \u003cproperty name=\"color\" value=\"white\"/\u003e3 \u003cproperty name=\"age\" value=\"3\"/\u003e4 \u003c/bean\u003e56 \u003cbean id=\"teddyDog\" class=\"com.ydlclass.TeddyDog\" parent=\"dog\"\u003e7 \u003cproperty name=\"name\" value=\"“)2L\"/\u003e8 \u003c/bean\u003e如果是手动定义如下:",
  "assets/net-img-1679238719964-9973bce2-4985-4baa-b6bb-23e00534994b-20230321111820-umso8u8.png": "我们再测试一种具有继承关系的bean:public class Dog {private String color;12zl private Integer age;41056public class TeddyDog extends Dog{private String name;©ww",
  "assets/net-img-1679238818018-db52233f-aa16-45bd-9964-8ddc6dba12d1-20230321111821-cw0xke5.png": "spring给我们提供了一个超级简单的实现SimpleBeanDefinitionRegistry，如下:1 public class SimpleBeanDefinitionRegistry extends SimpleAliasRegistry implementsBeanDefinitionRegistry {23 // 维持一个map用来保存beanDefinition ，就这么简单4 private final Map\u003cString, BeanDefinition\u003e beanDefinitionMap = new ConcurrentHashMap\u003c\u003e(64);56 // 对beanDefinition的增删查改7 @Override Ipublic void registerBeanDefinition(String beanName, BeanDefinition beanDefinition)9 throws BeanDefinitionStoreException {10 Assert. hasText(beanName, \"'beanName' must not be empty\");11 Assert.notNull(beanDefinition, “BeanDefinition must not be null\");12 this. beanDefinitionMap. put(beanName, beanDefinition) ;",
  "assets/net-img-1679238872932-ee38eae7-8254-4f61-beff-31682ce08725-20230321111821-aq5smsa.png": "上// 定义一个注册器，用来注册和管理BeanDefinitionBeanDefinitionRegistry registry = new SimpleBeanDefinitionRegistry(Q);// 代码方式创建GenericBeanDefinition beanDefinition = new GenericBeanDefinition();beanDefinition.setBeanClassName(\"com.ydlclass.User\");MutablePropertyValues propertyValues = new MutablePropertyValues();propertyValues.addPropertyValue(\"name\",\"lily\");propertyValues.addPropertyValue(\"age\",12);beanDefinition.setPropertyValues (propertyValues) ;// 进行注册registry.registerBeanDefinition(\"user\" ,beanDefinition);1ogger.info(C\"The beanClassName is {}.\",beanDefinition. getBeanClassName());",
  "assets/net-img-1679238917924-9e693269-5388-4438-8680-d99da3013f39-20230321111821-4v8cnu7.png": "2、加载带注解的bean1 @Test2 public void testRegistryByAnnotation(){24 // 定义一个注册器, 用来注册和管理BeanDefinition5 BeanDefinitionReyistry registry = new SimpleBeanDefinitionRegistryQ;67 // 通过配置文件加载8 AnnotatedBeanDefinitionReader annoReader = new AnnotatedBeanDefinitionReader (registry);9 annoReader. register(User.class);10 logger. info(Arrays. toString(registry. getBeanDefinitionNames()));ih |p3、读取配置类ConfigurationClassBeanDefinitionReader可以读取配置类，只是这个类不让我们使用，该类审供了如下方法:1 private void loadBeanDefinitionsForConfigurationClass2 private void registerBeanDefinitionForImportedconfigurationClass3 private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod)他会将读取的元数据封装成为: ConfigurationClassBeanDefinition。",
  "assets/net-img-1679239470463-98ce2a69-4253-44c4-a20f-0720c952ab24-20230321111821-tbwu5zu.png": "4、类路径扫描1 @Test2 public void testRegistryByScanner(){34 // 定义一个注册器，用来注册和管理BeanDefinition5 BeanDefinitionRegistry registry = new SimpleBeanDefinitionRegistry();67 // 通过扫描包的方式8 ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner (registry);9 scanner.scan(\"com.ydiclass\");10 logger. info(Arrays.toString(registry. getBeanDefinitionNames()));11 了java",
  "assets/net-img-1679239688573-c0acc7cb-94d8-45c1-88ec-2f3bea86ea52-20230321111821-85ehyf7.png": "5、包扫描的过程无台是扫包还是其他方式，我们我们解析一个类无非有几种方式:。 加载一个类到内存，获取Class对象，通过反射获取元数据。 再而证(class) ，读取字节码内的元数据毫无疑问sprin8选择了第二种，。 首先: 第二种性能要优于第一种其次: 第一种会将扫描的类全部加载到堆内存，无疑会浪费空间，增加gc次数，第二种可以根据元数据按需加载我们以包扫描的doScan方法为例(ClassPathBeanDefinitionScanner类) :",
  "assets/net-img-1679239712766-3287c891-785f-4cee-bb98-dd8cef4c0474-20230321111822-cw87lor.png": "// 首先从注解中获取bean的名字，如果没有// 使用beanName生成器beanNameGenerator来生成beanName// 在注解中的bean的默认名称和xm]1中是不一致的// 注解中如果没有指定名字本质是通过ClassuUti1 的getshortName 方法获取的String beanName = this.beanNameGenerator .generateBeanName(candidate，this.registry);// 将进一步设置应用于给定的BeanDefinition ，使用AbstractBeanDefinition的一些默认属性值//设置autowireCandidate属性，即XML的autowire-candidate属性，IoC学习的时候就见过该属性，默认为true，表示该bean支持成为自动注入候选beanif (candidate instanceof AbstractBeanDefinition) {postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName);}// 如果bean定义是AnnotatedBeanDefinition类型，ScannedGenericBeanDefinition同样属于AnnotatedBeanDefinition类型if (candidate instanceof AnnotatedBeanDefinition) {// 4 处理类上的其他通用注解: GLazy, @Primary, @DependsOn, GRole, @DescriptionAnnotationConfigUti 1s. processCommonDefinitionAnnotations ((AnnotatedBeanDefinition)candidate);}// 检查给定的beanName ，确定相应的bean 定义是否需要注册或与现有bean定义兼容if (checkCandidate(beanName, candidate)) {BearpefinitionHolder definitionHolder = new BeanDefinitionHolder (candidate,beanName) ;// 根据proxyMode属性的值，判断是否需要创建scope代理，一般都是不需要的definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata,definitionHolder, this.registry);beanDefinitions.add(definitionHolder);registerBeanDefinition(definitionHolder, this.registry);return beanDefinitions;",
  "assets/net-img-1679239734021-714a9006-a539-4f79-a718-ca70e8d126f1-20230321111821-cclalzq.png": "1人34567加oo1011i1314protected Set\u003cBeanDefinitionHolder\u003e doScan(String... basePackages) {// BeanDefinitionHolder### BeanDefinition实例和名字以及别名Set\u003cBeanDefinitionHolder\u003e beanDefinitions = new LinkedHashSet\u003c\u003e();for (String basePackage : basePackages) {// 这里是具体的扫描过程，找出全部符合过滤器要求的BeanDefinition// 返回的BeanDefinition的实际类型为ScannedGenericBeanDefinitionSet\u003cBeanDefinition\u003e candidates = findCandidateComponents (basePackage) ;// 根据不同的bean类型做统一处理，如附默认值等// 因为有些数据我们并没有配置，需要这里做默认处理for (BeanDefinition candidate : candidates) {// 如果存在，则解析@scope注解，为候选bean设置代理的方式ScopedProxyMode，XML属性也能配置:scope-resolver、scoped-proxy，可以指定代理方式jdk或者cg1ibScopeMetadata scopeMetadata =this.scopeMetadataResolver. resol veScopeMetadata(candidate) ;candidate. setScope(scopeMetadata. getScopeName());",
  "assets/net-img-1679241255629-20403828-735b-42be-8913-2deb63482ef4-20230321111822-tmlswjs.png": "我们可以紧接着看看其中很重要的一个方法:1java1 public Set\u003cBeanDefinition\u003e findCcandidateComponents (String basePackage) {2 if (this.componentsIndex != null \u0026\u0026JindexSupportsIncludeFiltersQ) {3 // SpringS#4ett, HM \"META-INF/spring. components \"Aft RSl tH MeAaREH Mbean, Bl aw描，用于提升启动速度4 // Spring5升级的其中一个重点就提升了注解驱动的启动性能，\"META-INF/spring.components\"这个文件类似于一个\"组件素引\"文件，我们将需要加载的组件《beean定义) 预先的以键值对的样式配置到该文件中，当项目中存在\"META-INFVspring.components \"文件并且文件中配置了属性时，spring不会进行包扫描，而是直接读取\"META-INF/spring.components\"中组件的定义并直接加载，从而达到提升性能的目的。5 return addCandidateComponentsFromIndex(this.componentsIndex, basePackage) ;6 37 else {return scanCandidateComponents (basePackage) ;30 |}我们可以添加如下的依赖，自动生成部分索引:工2345\u003cdependency\u003e\u003cgroupId\u003eorg.springframework\u003c/groupId\u003e\u003cartifactId\u003espring-context-indexer\u003c/artifactId\u003e\u003cversion\u003e6.0.3\u003c/version\u003e\u003c/dependency\u003e",
  "assets/net-img-1679274597419-1f4cf6ed-a666-44c0-976f-7578fce50eed-20230321111822-5kodwxp.png": "上边的源码中我们看到读取类文件的真实的实例是simpleMetadataReader，spring选用了【read+visitor】的方式来读取字节码，read负责景露接口，visitor负责真正的读取工作:1 final class SimpleMetadataRedder implements MetadataReader 工23 SimpleMetadataReader (Resource resource, GNullable ClassLoader classLoader) throws IOException {4 SimpleAnnotationMetadataReadingVisitor visitor = newSimp] eAnnotationMetadataReadingVisitor(classLoader) ;// 这里是核心，一个reader需要结合一个vjsitorgetClassReader(resource) .accept(visitor，PARSING_O0PTIONS) ;this.resource = resource;8 // 元数据都是visitor的能力，典型的访问者设计模式9 this.annotationMetadata = visitor.getMetadata();10 }1112 // 通过资源获取一个ClassReader13 private static ClassReader getClassReader(Resource resource) throws IOException {14 try (InputStream is = resource.getInputStream()) {15 try {16 return new ClassReader (is);17 }18 }19 }",
  "assets/net-img-1679274657083-9cf14b40-ce68-46f2-aeab-27cac3af3ba5-20230321111822-wq98zac.png": "当然我们更加关注的是scanCandidateComponents方法:12)3456private Set\u003cBeanDefinition\u003e scanCandidateComponents (String basePackage) {进来Set\u003cBeanDefinition\u003e candidates = new LinkedHashSet\u003c\u003e();try {// 生成完整的资源解析路径// com.ydiclass -\u003e classpath*:com/yd1class/**/*.class// 关于资源解析的内容会在后边的课程单独讲String packageSearchPath = ResourcePatternReso1ver.CLASSPATH_ALL_URL_PREFIX +resolveBasePackage(basePackage) + '/' + this.resourcePattern;// MEARABET HAR, HISRAAE\"classpath*\", AMMA RMA jar AP ABST ARS RO// Spring会将每一个定义的字节码文件加载成为一个Resource资源〈包括内部类都是一个Resource资源)// 此处是以资源) 的方式加载〈普通文件》 ，而不是将一个类使用类加载器加载到jvm中。Resource[] resources = getResourcePatternResolver() .getResources (packageSearchPath) ;boolean traceEnabled = logger. isTraceEnabled();boolean debugEnabled = logger. isDebugEnabled();// 遍历所有的资源文件for (Resource resource : resources) {String filename = resource. getFilename();// 此处忽略CGLIB生成的代理类文件，这个应该不陌生if (filename != null \u0026\u0026 filename.contains(C1assUti1s.CGLIB_CLASS_SEPARATOR)) {continue;}if (traceEnabled) {logger. trace(\"Scanning \"+ resource);}try {// getMetadataReader方法会生成一个元数据读取器// 我们的例子中是Simp1eMetadataReaderMetadataReader metadataReader =getMetadataReaderFactory() . getMetadataReader (resource) ;",
  "assets/net-img-1679274818118-d3014a27-8e4f-409a-bbfa-a1c4bccefc16-20230321111822-da7at62.png": "// 检查读取到的类是否可以作为候选组件，即是否符合TypeFi1ter类型过滤器的要求// 使用IncludeFi1ter。就算目标类上没有GComponent注解，它也会被扫描成为一个Bean// 使用ExcludeFi1ter，就算目标类上面有GCComponent注解也不会成为Beanif CisCandidateComponent(metadataReader)) {// 构建一个ScannedGenericBeanDefinitionScannedGenericBeangefinition sbd = newScannedGenericBeanDefinition(metadataReader) ;sbd.setSource(resource) ;if CisCandidateComponent(sbd)) {if (debugEnabled) {logger .debug(\"Identified candidate component class: ”3candidates .add(sbd) ;+ resource);java",
  "assets/net-img-1679279718744-9c5628d3-0a78-4f8c-95b5-1c0c456dd96b-20230321111822-u20ioeb.png": "// 提供了通用能力Goverridepublic ClassMetadata getClassMetadata() {return this.annotationMetadata;3@overridepublic AnnotationMetadata getAnnotationMetadata() {return this. annotationMetadata;",
  "assets/net-img-1679279747577-8c2aeeee-a107-4a5f-9bd1-5dd229c58a07-20230321111822-iewoae0.png": "SimpleAnnotationMetadataReadingVisitor类使用了大量asm的内容，class文件的内容，而非加载后通过反射获取，我们列举其中的个别属性和方法，大致能宽探一二:25import org.import org.import org.import org.import org.springframework. asmspringframework. asmspringfrajework. asmspringframework. asmspringframework. asm.AnnotationVisitor;.ClassVisitor;.MethodVisitor;.Opcodes;.SpringAsmInfo;此可见spring在读取元数据的时候，是直接读取final class SimpleAnnotationMetadataReadingVisitor extends ClassVisitor {//.-//.-// 访问一个内部类的方法Goverridepublic void visitInnerClass(String name, @Nullable String outerName, String innerName, intaccess) {//..-省略// 访问注解的方法Goverride@Nullablepublic AnnotationVisitor visitAnnotation(String descriptor, boolean visible) {-省略// 访问方法的方法Goverride@Nullablepublic MethodVisitor visitMethod(.省略",
  "assets/net-img-1679279842069-4447ef81-3b65-43cf-b8c0-5007dc717ebf-20230321111822-m0o4x1j.png": "java",
  "assets/net-img-1679279861265-1e82e9ef-fa02-471b-90ee-5b7be20f7225-20230321111823-q6a9tj2.png": "这其中还是用了一些类如下: Ea这些类都是对注解和类的元数据进行了封装，提供更简单的访问方式，很简单。我们写一个简单的小例子，来看看:1 @Test2 public void testAsm() throws IOException {3 Resource resource = new ClassPathResource(\"com/ydlclass/User.class\");4 ClassReader classReader = new ClassReader (resource. getInputStream());5 logger. info(classReader. getClassName());6 // 缺少visitor的reader能力优先，我们只做几个简单的实现7 // visitor实现相对复杂，我们没有必要去学习8 // classReader .acCept(xxxVijsitor) ;910 // 返回的对应的常量池的偏移量+111 // 0-3 cafebaba 4-7 主次版本号8-9 第一个是10+1",
  "assets/net-img-1679279876053-0decff12-4cd8-4a4d-b767-1666df23e7c7-20230321111823-a8xtgkz.png": "12 // 二进制可以使用bined插件查看13 logger.info(\"The first item is {}.\",classReader.getItem(1));14 logger.info(\"The first item is {}.\",classReader.getItem(2));15 // 00 3A 这是字节码文件看到的，16 // 常量池的计数是1-57 0表示不引用任何一个常量池项目17 logger.info(\"The first item is {}.\",classReader.getItemCount());1819 // 通过javap -v .NUser.class class文件访问标志20 // flags: (0x0021) ACC_PUBLIC，ACC_SUPER 十进制就是3321 // ACC_SUPER 0x00 20 是否允许使用invokespecial字节码指令的新语义.22 // ACC_PUBLIC 0x00 01 是否为Pub1ic类型23 1ogger.info(\"classReaderJgetAccess() is {}\",classReader.getAccess());2425 | }",
  "assets/net-img-1679279893172-349b8bc1-a1a5-428b-91f0-82d941ad1994-20230321111823-9oxltwa.png": "下同的扫描方式形成了不同的Definition子类如下:XmlBeanDefinitionReader读取BeanDefinitionRegistryxml中定义的bean \u003e GenericBeanDefinitionClassPathBeanDefinitionScanner\u003e ScannedGenericBeanDefinition@Compoment, @Service,@Respository等注解注释的类AnnotatedBeanDefinitionReader\u003e AnnotatedGenericBeanDefinitionConfigurationClassBeanSito =@Configuration相关的配置类ConfigurationClassBeanDefinitionReader",
  "assets/net-img-1679280152500-ce90e8ea-eeec-4c38-8df4-9deba26d8c96-20230321112825-v6szmjb.png": "第二章基础工具一、内省api1、什么是内省内省(IntroSpector)是java 语言针对Bean类属性、事件的一种缺省处理方法，spring的源码中也会经常出现相关的api，所以我们有必要了解一下。JavaBean是一种特殊的类，主要用于传递数据信息，这种类中的方法主要用于访问私有的字段，且方法名符合某种命名规则。事实上，内省机制也是通过反射来实现的。相对于内省，反射则更加强大，他能在运行状态把java类中的各种成分映射成相应的java类，可以动态的获取所有的属性以及动态调用任意一个方法，强调的是运行状态。内省和反射的常用api如下:内省使用, 反射(Beaninfo) (Class)| |t i 1 j i \"EEE ES Eee ES Ee ES@lavaNat, BANSAbHEHALNE",
  "assets/net-img-1679280352960-9c350d0f-a2fd-406b-a9b5-3198244acc69-20230321112826-in8o3ca.png": "和ava内省中，用到的基本上就是上述几个类。内省api的一般的做法是通过类Introspector 的getBeanlnfo方法来获取某个对象的Beanlnfo 信息，然后通过Beanlnfo 来获取属性的描述器(PropertyDescriptor)，通过这个属性描述器就可以获取某个属性对应的取信/赋值方法，然后我们就可[通过反射机制来调用这些方法，这就是内省机制。ii12 import java.beans.Beaninfo;3 import java.beans.Introspector;4 import java.beans.PropertyDescriptor;5 import java. lang.reflect.Method;67 @Test8 public void testIntrospect1() throws Exception {9 BeanInfo info = Introspector.getBeanInfo(User.class, Object.class);// 不自省从父类继承的属性10 PropertyDescriptor[] pds = info.getPropertyDescriptors();// 取得属性描述器11 for (PropertyDescriptor pd : pds) {12 logger. info(\"pd. getName()--\u003e{}\", pd. getName()) ;13 logger. info(\"pd. getReadMethod() --\u003e{}\" ,pd. getReadMethod());14 logger. info(\"pd. getwriteMethod()--\u003e{}\", pd. getWriteMethod());15 logger. info(\"pd. getPropertyType()--\u003e{}\" ,pd. getPropertyType());16 logger. info(\"pd. getShortDescription() --\u003e{}\",pd.getShortDescription());17 318 }",
  "assets/net-img-1679280370660-fef875e7-1db9-4699-ad7c-077c2e155551-20230321112826-2tsosoo.png": "23 User user = new User();24 PropertyDescriptor pd = new PropertyDescriptor(\"age\", User.class);25 // 得到属性的写方法，为属性赋值26 Method method = pd.getWriteMethod();27 method. invoke(user, 24);28 // 获取属性的值29 method = pd.getReadMethod() ;30 System. out.printIn(method. invoke(user, nul1));31] }AZ SN BeanUtils 5]. NSS HEA Fbean :1 @Test2 public void testBeanUtil() throws Exception {3 User user = new User();4 // 赋值5 BeanUtils.setProperty(user, name\" ，tom'\") ;6 BeanUti1ls.setProperty(Cuser，\"age\" ,10);a logger. info(\"user-\u003e{}\",user);8 // BRE9 logger. info(\"the user's name is -\u003e{}.\",BeanUtils.getProperty(user, \"name\"));",
  "assets/net-img-1679281537599-bdb2b66a-4754-4ab4-9fb8-fae76d8ffb70-20230321112826-a8d56xw.png": "二、更强的反射工具在spring中，我们除了能看到内省相关的api，看到的更多的可能是反射pi了，当然针对原生api的复杂性，spring同样进行了封装，让其使用起来更简单。spri ngieSO ERT SBARISCRY TR BeanW ea pper，下边的例子展示了该类如何配合BeanDefinition对其进行了实例化:1、bean的创建1 @Test2 public void testCreate() throws ClassNotFoundException, NoSuchMethodException,InvocationTargetException, InstantiationException, IllegalAccessException {3 // 1、通过任意形式捕获beanDefinition4 GenericBeanDefinition beanDefinition = new GenericBeanDefinition();5 beanDefinition.setBeanClassName(\"com.ydiclass.User\");6 MutablePropertyValues propertyValues = new MutablePropertyValues();7 propertyValues.addPropertyValue(\"name\",\"lily\");8 propertyValues .addPropertyValue(\"age\",12);9 beanDefinition.setPropertyValues (propertyValues) ;1011 // 2、通过权限定名称获得Class12 Class\u003c?\u003e aClass = Class. forName(beanDefinition. getBeanC lassName());1314 // 3、使用Beanwrapper包于实例，使其更方便使用反射方法15 BeanWrapper beanwrapper = new BeanWrapperImp](aClass);16 beanwWrapper.setPropertyValues (beanDefinition. getPropertyValues());17 Object bean = beanwrapper.getwrappediInstance();18 logger.info(\"The bean is [{}]\",bean);19 }我们可以看到BeanWrapperlmpl仅仅需要一个Class就能十分友好的结合beanDefinition进行构建和赋值，而不需要通过复杂的反射获取构造器进行实例化，获取字段对象进行赋值，当然这仅仅是api寺装的功劳，原理还是那些东西。",
  "assets/net-img-1679282342230-4b8a5441-3bd2-4d5c-9b0e-9070dfda9ea9-20230321112826-ak57nsk.png": "2. ihetais我们可以使用如下的方法进行批量构造1 @Test2 pliblic void testBatchCreate() throws ClassNotFoundException, NoSuchMethodexception,InvocationTargetException, InstantiationException, I]llegalAccessException {3 // 1、通过任意形式捕获beanDefinition4 BeanDefinitionRegistry registry = new SimpleBeanDefinitionRegistryQ;5 Xm1BeanDefinitionReader xmlReader = new XmlBeanDefinitionReader(registry) ;6 xmlReader. loadBeanDefinitions(\"classpath: spring. xml\");89 // 2、通过反射实例化10 String[] definitionNames = registry.getBeanDefinitionNames();11 for (String definitionName : definitionNames) {12 BeanDefinition beanDefinition = registry. getBeanDefinition(definitionName) ;3 String beanClassName = beanDefinition.getBeanClassName() ;14 Class\u003c?\u003e aClass = Class. forName(beanClassName) ;15 Constructor\u003c?\u003e constructor = aClass.getConstructor();16 Object bean = constructor.newInstance();1718 // 3、使用BeanwWrapper包裹实例，使其更方便使用反射方法19 Beanwrapper beanWrapper = new BeanWrapperImp] (bean);20 beanwrapper .setPropertyValues (beanDefinition.getPropertyValues());21 bean = beanwrapper.getWrappediInstance();22 System. out.printIn(bean) ;23 }",
  "assets/net-img-1679282504446-c0eef76f-4917-42c5-ad2a-314e5e42ae8f-20230321112826-161zl1p.png": "貌似事与愿违，此时抛出一个异常，是说无法将一个TypedStringValue类型的数据转化为一个Integer，没有合适的转化器:1 org.springframework.beans.TypeMismatchException: Failed to convert property value of type‘org.springframework. beans. factory. config. TypedStringValue’ to required type ‘java.lang.Integer' forproperty ‘age’;这个问题，我们先按下不表，后边再解释，接着我们看几个常用的类:3, ResolvableType !该类可以封狗ava类型，提供对超类类型、接口和泛型参数的访问，以及最终解析为类的能力，这是非常常见的一个类，他能及其方便的简化对反射api的调用，该类在spring中的使用率非常高。ResolvableType可以从字段、方法参数、方法返回类型或类中获得。这个类上的大多数方法本身都会返|以便于链式调用。官方的案例如下:回一个ResolvableType，1 private HashMap\u003cInteger, List\u003cString\u003e\u003e myMap;2 public void exampleQ {3 ResolvableType t = ResolvableType. forField(getClass().getDeclaredField(\"myMap\"));4 t.getSuperType(); // AbstractMap\u003cInteger, List\u003cString\u003e\u003e5 t.asMap(); // Map\u003cInteger, List\u003cString\u003e\u003e6 t.getGeneric(0).resolveQ); // Integer // 获取泛型7 t.getGeneric(1).resolveQ); // List8 t.getGeneric(1); // List\u003cString\u003e9 //第二个泛型,里面的泛型,即List\u003cSstring\u003e里面的String10 t.resolveGeneric(1, 0); // String11|}我们也可以写测试用例测试一下，光看不练是记不牢的:1 @Test2 public void testTypeResolvableType() throws NoSuchFieldException {3 ResolvableType type =ResolvableType. forField(DefaultSingletonBeanRegistry.class.getDeclaredField(\"singletonObjects\"));4 // 获取类型5 logger. info(type. getTypeQ . getTypeName());6 // BRAD",
  "assets/net-img-1679282530679-c21ef624-2495-4c42-9aa6-637a7166b645-20230321112826-xn47jez.png": "logger. info(Arrays.toString(type. getGenerics()));8 logger. info(Arrays . toString(type. getInterfaces()));9 logger. info(Arrays. toString(type. resolveGenerics()));10 // 获取来源11 Class\u003c?\u003e resolve = type.resolve();12 logger. info(type. getRawClass().getName());13/}Resolvable: 可解析的，可分解的。spring中经常出现这个单词。如ResolvableAttribute，ResolvableType，registerResolvableDependency，后期遇到戌们再学习。",
  "assets/net-img-1679282911645-fd68e2db-14b8-4d95-aa7e-e328c6ff7a67-20230321112826-a6fobqa.png": "二、类型转化我们从xml里搜集到的所有数据者是【字符串】，但是实际的类中的成员变量可能是数字，数组，集合，或者是复杂的引用郑型，所以spring给我们提供了强大的转换服务(conversionService接口) 。1、转换服务ConversionService接口很简单，可以根据源类型和目标类型进行判断是否可以转换，并执行转换:1 public interface ConversionService {23 boolean canConvert(@Nullable Class\u003c?\u003e sourceType, Class\u003c?\u003e targetType);45 boolean canConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType);67 @Nul lable8 \u003cT\u003e T convert(@Nullable Object source, Class\u003cT\u003e targetType);910 // 将给定的{ecode source} MABE MH {@code targetType}-11 Object convert(@Nullable Object source, @Nullable TypeDescriptor sourceType, TypeDescriptortargetType);1213 }我们不妨看看DefaultConversionService的源码，更多核心的功能是在器父类中实现的，在构造实例时，他会默认传入大量可化器:public class DefaultConversionService extends GenericConversionService {123 @Nullable4 private static volatile DefaultConversionService sharedInstance;56",
  "assets/net-img-1679283265594-ad22223f-3705-441c-a9fb-6d5c6f3bdd80-20230321112827-7ozxn19.png": "public DefaultConversionService() {// 添加大量的默认的转换器addDefau1tConverters (this);了// 类似单例的获取方式public static ConversionService getSharedInstance() {DefaultConversionService cs = sharedInstance;if (cs == null) {synchronized (DefaultConversionService.class) {cs = sharedInstance;if (cs == null) {cs = new DefaultConversionService();sharedInstance = cs;}return cs;",
  "assets/net-img-1679283451195-6de4d509-6bcd-499f-a325-e7d53214fb94-20230321112827-2yyv46r.png": "// 添加适合大多数环境的转换器public static void addDefau1tConverters (ConverterRegistry converterRegistry) {addscalarConverters (converterRegistry) ;addCollectionConverters (converterRegistry) ;converterRegistry.addCconverter(new ByteBufferConverter ((ConversionService)converterRegistry));converterRegistry.addConverter(new StringToTimeZoneConverter ());converterRegistry.addConverter (new ZoneIdToTimeZoneConverter ());converterRegistry.addConverter(new ZonedDateTimeToCalendarConverter ());//.. BAYS",
  "assets/net-img-1679284447748-8b792843-7880-418e-bc73-ac3dea3059c0-20230321112827-p956m88.png": "// 增加通用的转换器，例如集合、数组TRSpublic static void addCollectionConverters(ConverterRegistry converterRegistry) {ConversionService conversionService = (ConversionService) converterRegistry;converterRegistry.converterRegistry.converterRegistry.converterRegistry.converterRegistry.//.. BARSaddConverter (newaddConverter (newaddConverter (newaddConverter (newaddConverter (newArrayToCol lectionConverter (conversionService));CollectionToArrayConverter(conversionService));StringToCol lectionConverter (conversionService));CollectionToObjectConverter (conversionService));ObjectToCol lectionConverter (conversionService));",
  "assets/net-img-1679284457392-d6afcd22-07c5-4aab-8c9f-29b8fd1990f4-20230321112827-gozgk71.png": "5455// 新增标量的转化器，主要是字符串数字类型private static void addScalarConverters(ConverterRegistry converterRegistry) {converterRegistry.converterRegistry.converterRegistry.converterRegistry.converterRegistry.converterRegistry.//.. BAYSaddConverterFactory(new NumberToNumberConverterFactory());addConverterFactory(new StringToNumberConverterFactory());addConverter(Number.class, String.class, new ObjectToStringConverter());addConverter(new StringToPropertiesConverter());addConverter (new PropertiesToStringConverter());addConverter (new StringToUUIDConverter());",
  "assets/net-img-1679284469498-c48cc52e-a928-4767-95d3-b796b48947d9-20230321112827-d1v4bqn.png": "我们可以编写如下的测试用例，可以将字符吕转换为数字和列表:1 @Test2 public void testConvertinteger(){3 String source = \"100\";4 ConversionService conversionService = new DefaultConversionService();5 if (conversionService. canConvert (String. class ,Integer.class)){6 Integer target. = conversionService.convert(source, Integer.class);7 logger. info(\"The number is {}.\", target);8 }9|}1011 @Test12 public void testConvertListQ){13 String source = \"100,12,23,54,56\";14 ConversionService conversionService = new DefaultConversionService();15 if (conversionService.canConvert(String.class, List.class)){16 List target = conversionService.convert(source, List.class);17 logger. info(\"The number is {}.\", target);18 }19 | }这种类型转换的能力非常有用，我们从【xml到java对象】，从【前端参数到java对象】，都需要这样的强大能力。",
  "assets/net-img-1679284556197-6aae48a5-5ca8-44cc-af2b-c5e7db53f465-20230321112827-ekqvl2n.png": "2、独立编写转化器我们也可以实现自己的转化器，我们不妨写一个【从字符串到User类】的转化器，我们的转换器需要实现GenericConverter接，这个可以仿照其他的转换器写:我们可以先看看GenericConverter接|public interface GenericConverter {123 // 返回目标类型和源类型的一个set4 Set\u003cConvertib1 epPaiT\u003e getConvertibleTypes ();5 // 新的方法6 Object convert(G@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType);89 // 定义了一个source-to-target class pair.10 final class ConvertiblePair {il12 private final Class\u003c?\u003e sourceType;13 private final Class\u003c?\u003e targetType;1415 ... 其他内容省略16 }718 |}我们需要实现GenericConverter的两个方法:",
  "assets/net-img-1679284568418-de4ae212-f47d-4bc3-8ec7-e7e961ccef3c-20230321112827-nuwkgx0.png": "1 public class UserConvert implements GenericConverter {23 Q@override4 public Set\u003cConvertiblePair\u003e getConvertibleTypes() {5 // 返回一个Set集合，其中的元素为一个只包含object(obj) 的不可变集合6 return Collections.singleton(new GenericConverter.ConvertiblePair(String.class,User.class));7 了89 Q@override10 public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {11 // 我们假设字符串的类型如下: nme | age12 assert source != null;13 String[] nameAndAge = source.toString().split(\"\\\\|\");14 if (nameAnddge. length == 2){15 return new User(nameAndAge[0].trimQ , Integer. valueOf (nameAndAge[1].trim()));16 } else {17 throw new RuntimeException(\"转化出现异常.\");18 }19 }20 }java在当前的测试用例中，我们将我们的convert添加到conversionService中:",
  "assets/net-img-1679284631675-5408eb94-cdcc-45b5-ba44-82aa308493c1-20230321112827-5ai5lac.png": "1 @Test2 public void testConvertuUser(){3 String source = \"Tom | 23\";4 // 这里必须使用子类的类型，接口并不提供addConverter方法5 DefaultConversionService conversionService = new DefaultConversionService();6 conversionService.addConverter (new UserConvert());7 if (conversionService. canConvert(String.class, User.class)){User target = conversionService.convert(source, User.class);9 logger. info(\"The user is {}.\", target);10 3111/}12 // 结果13 19:51:03.210 [main] INFO com.ydlclass.ToolsTest - The user is User{name='Tom', age=23}.事实上这个转化器确实生效了。",
  "assets/net-img-1679284676231-384f2e0e-9956-41ff-8e58-a867a6141c44-20230321112827-cazaky3.png": "3、更简单的实现我们发现DefaultConversionService有很多重载的addConverter方法，我们甚至可以传入一个实现了Converter\u003c?, ?\u003e接口的实fil, MF:1 @Override2 public void addConverter(Converter\u003c?, ?\u003e converter) {3 // 这个方法可以获得实现类的泛型4 ResolvableType[] typeInfo = getRequiredTypeInfo(converter.getClass(), Converter.class);5 if (typeInfo == null \u0026\u0026 converter instanceof DecoratingProxy decoratingProxy) {6 typeInfo = getRequiredTypeInfo(decoratingProxy.getDecoratedClass(), Converter.class);7 }8 if (typeInfo == null) {9 throw new I1legalArgumentException(\"Unable to determine source type \u003cS\u003e and target type \u003cT\u003efor your \"+10 \"Converter [\" + converter.getClass().getName() + \"];does the class parameterize those types?\");11 }12 // Converter\u003c?, ，?\u003e和GenericConkerter做了适配13 addCconverter (new ConverterAdapter(converter, typeInfo[0], typeInfo[1]));14|}按照这个方法的定义，我们重新编写我们的UserConverter2，他需要实现Converter接口, 如下:1 public class UserConverter2 implements Converter\u003cString,User\u003e {23} @override4 public User convert(String source) {5 String[] nameAndAge = source.split(\"\\\\|\");6 if(nameAnddge. length == 2){7 return new User(nameAndAge[0].trimQ , Integer. valueOf (nameAndAge[1].trim(Q)));8 } else {9 throw new RuntimeException(\"转化出现异常.\");这个结和更加的简单优雅，他是一个函数式接口，所以可以用lamdba去达式编写:",
  "assets/net-img-1679284686448-c630588f-97b9-4dbf-94ad-4791eccac7d4-20230321112828-ccln0pn.png": "@FunctionalInterface Ipublic interface Converter\u003cS, T\u003e {@NullableT convert(S source);//构造一个复合转换器，首先将该转换器应用于其输入，然后将后一个转换器应用于结果。default \u003cU\u003e Converter\u003cS, U\u003e andThen(Converter\u003c? super T，? extends U\u003e after) {Assert.notNull(after, “'after' Converter must not be null\");return (Ss) -\u003e {T initialResult = convert(s);return (initialResult != null ? after.convert(initialResult) : null);a",
  "assets/net-img-1679284704728-8eff530e-2905-414a-b634-bd50de206998-20230321112828-tcyfctc.png": "他的实现逻辑是，运行时获取泛型的类型，并且与GenericConverter做适配。我们可以使用以下的测试用例获得泛型的类型:1 public void testGenericQ{2 ParameterizedType genericInterfaces = (ParameterizedType)(UserConverter2.class.getGenericInterfaces () [0]);34\\}5| 结果:6[class java.lang.String, class com.yd]class.User]如果我们还记得之前学习的工具类更简单了:@Testpublic void testGenericQ{logger. info(Arrays. toString(genericinterfaces. getActualTypeArguments()));ResolvableType[] generics = c.getInterfaces()[0].getGenerics();logger. info(Arrays. toString(generics));6\\}123 ResolvableType c = ResolvableType. forClass (UserConverter2.class);45有细心的朋友可能会发现，java中不是有泛型掠除的机制吗》为什么这里还可以获取呢?回其实泛型的擦除指的是编译后方法体和类结构还是可以获取的。不在使用泛型，退至原始类型，但是在字节码中还是会有记录，强大的反射机制",
  "assets/net-img-1679284720010-039f3f2e-5ec8-47dc-a306-e9e5318299b1-20230321112828-rixvhqw.png": "遗留问题:在上一个例子中，我们的异常说是TypedStringValue到integer无法转化，TypedStringValue是spring对String的一个包装，具体的值是存在TypedStringValue中的，我们的DefaultConversionService没有默认的转换器，当然实际spring在转换的时候会做出处理，我们目前先不考虑，我们倒是可以写一个简单的转换器如下;1 @Test2 public void testBatchCreate() throws ClassNotFoundException, NoSuchMethodException,InvocationTargetException, InstantiationException, I]llegalAccessException {3 // 1、通过任意形式捕获beanDefinition4 SimpleBeanDefinitionRegistry registry = new SimpleBeanDefinitionRegistry();5 Xm1BeanDefinitionReader xmlReader = new Xml1BeanDefinitionReader(Cregistry);6 xm]Reader. loadBeanDefinitions(\"classpath: spring. xml\");8 // 2、通过反射实例化I9 String[] definitionNames = registry. getBeanDefinitionNames();10 for (String definitionName : definitionNames) {11 BeanDefinition beanDefinition = registry. getBeanDefinition(definitionName) ;12 String beanClassName = beanDefinition. getBeanClassName() ;13 Class\u003c?\u003e aClass = Class. forName(beanClassName) ;1415 // 3、使用geanwrapper包砷实例，使其更方便使用反射方法16 BeanWrapperImp] beanWrapper = new BeanWrapperiImp](aClass);1718 DefaultConversionService conversionService = new DefaultConversionService();19 // BRBEKREW: 使用lamdba表达式写一个转换器20 conversionService. addConverter ((Converter\u003cTypedStringValue, Integer\u003e) source -\u003eInteger. valueOf (Objects. requireNonNull (source. getValue())));21 beanWrapper.setConversionService(conversionService) ;2223 beanWrapper.setPropertyValues (beanDef inition. getPropertyValues());24 Object bean = beanWrapper.getwrappediInstance();25 System. out.printIn(bean) ;26 }27) }",
  "assets/net-img-1679284738904-bb4c183e-9cf4-4056-964d-d3b175c27938-20230321112828-46c9nry.png": "注意啦!最后有心的朋友会发现中还有如下的接口，留给我们自己探索，非常简单;1 void addconverterFactory(ConverterFactory\u003c?, ?\u003e factory);我们发现能过启动装换的转化器有三种，分别是Converter、ConverterFactory、GenericConverter，为了方便统一管理，他们在添加到Converters之前都统一被适配为了GenericConverter。",
  "assets/net-img-1679284767150-6b807757-df15-4e45-8e9f-0febf85c9da2-20230321112828-8khx76e.png": "3、转化器源码所有注册的convertor都会存储在Converters中，该类结构相对比较复杂:private static class Converters {123 // 存取通用的转换器，并不限定转换类型，一般用于和哲底4 private final Set\u003cGenericConverter\u003e globalConverters = new CopyOnwriteArraySet\u003c\u003e();5 // 指定了类型对，对应的转换器们的映射关系。6 // ConvertiblePair: 表示一对，包含sourceType和targetType7 // ConvertersForPair: 这一对对应的转换器们《〈 因为能处理一对类型转换可能存在多个转换器) ，内部使用一个双端队列peque来存储，保证顺序8 private final Map\u003cConvertiblePair, ConvertersForPair\u003e converters = new ConcurrentHashMap\u003c\u003e(256); I910 public void add(GenericConverter converter) {11 // 获得他的类型对儿12 Set\u003cConvertiblePair\u003e convertibleTypes = converter.getConvertibleTypesO;13 if (convertibleTypes == null) {14 // 如果没有限定转换类型，添加到gl1oba1Converters15 this.globalConverters.add(converter) ;16 }17 else {18 // 如果已经存在转换类型，我们写的都在这里19 for (ConvertiblePair convertiblePair : convertibleTypes) {20 // 找到与之匹配的加进去，这里是个链表21 getMatchableConverters (convertiblePair) .add(converter) ;22 }23 }24 }",
  "assets/net-img-1679284782651-340104a9-9cc2-416d-9e64-fd45bf59d3a9-20230321112828-qkuuq8c.png": "27@Nullablepublic GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {// 搜索完整的类型层次结构，父类---\u003e// 比如想要搜索【虎猜-\u003e 老虎】，但如过虎猫有父类《〈猫)// 我们还需检索【猫-\u003e 老虎了List\u003cClass\u003c?\u003e\u003e sourceCandidates = getClassHierarchy(sourceType. getType());List\u003cClass\u003c?\u003e\u003e targetCandidates = getClassHierarchy(targetType. getType());for (Class\u003c?\u003e sourceCandidate : sourceCandidates) {for (Class\u003c?\u003e targetCandidate : targetCandidates) {// 所有的类型都要匹配ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate,targetCandidate);// 找到一个就返回GenericConverter converter = getRegisteredConverter(sourceType，targetType，convertiblePair);if (converter != null) {return converter;}}了return null;3@Nullableprivate GenericConverter getRegisteredConverter(TypeDescriptor sourceType,TypeDescriptor targetType, ConvertiblePair convertiblePair) {// 根据convertib1ePair获取ConvertersForPairConvertersForPair convertersForPair = this.converters.get(convertiblePair);if (convertersForPair != null) {GenericConverter converter = convertersForPair.getConverter(sourceType, targetType);if (converter != null) {return converter;",
  "assets/net-img-1679284800562-2e935104-55c6-407d-b939-faaeb666f24d-20230321112828-us29bzu.png": "59 // 检查是否能匹配哲底的全局转换器60 for (GenericConverter globalConverter : this.globalConverters) {61 if (((Conditionalconverter) globalConverter).matches(sourceType, targetType)) {62 return globalConverter;64 }65 return null;68 了ConvertiblePair: #7a—%J, M@SsourceType*targetType",
  "assets/net-img-1679285523000-920cc1b9-4a02-4c0e-9f1b-ffaf2f425556-20230321112828-7fj0919.png": "1 final class ConvertiblePair {2 private final Class\u003c?\u003e sourceType;3} private final Class\u003c?\u003e targetType;4\\}ConvertersForPair: 这一对对应的转换器们(因为能处理一对类型转换可能存在多个转换器) ，内部使用一个双端队列Deque来存储，保证顺序。他的结构如下:1 Map\u003cCconvertiblePairConvertersForPair\u003econverters的结构1L 1ConvertiblePair存储了源类型和目标类型ConvertersForPair内部维护了一个双向队列Ar。sig encom 3",
  "assets/net-img-1679285821393-8968847e-90da-4775-a3d7-d5530404c95e-20230321112829-t3m6e33.png": "LAuUPRWN HEooprivate static class ConvertersForPair {// 内部维护的队列Iprivate final Deque\u003cGenericConverter\u003e converters = new ConcurrentLinkedDeque\u003c\u003e();public void add(GenericConverter converter) {this.converters.addFirst (converter);@Nullablepublic GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {for (GenericConverter converter : this.converters) {// 此处表明，如果我们有特殊的需求，还可以实现ConditionalGenericConverter，实现特殊的匹配规则，连边中的converter可以有不同的匹配规则，// 当然通常情况下会返回第一个if (!(converter instanceof ConditionalGenericConverter genericConverter) ||genericConverter.matches(sourceType, targetType)) {return converter;}return null;",
  "assets/net-img-1679286183647-2102d1fe-4d52-42bf-91e5-a5f502b22f16-20230321112829-2g891km.png": "三、资源获取Spring的【Resource]】接|位于【org.springframework.core.io】包，他抽象了对资源的访问的能力。 下面提供了[Resource] 接口的概述， Spring本身广泛地使用了Resource接口，这个我们之前就接触过了。public interface Resource extends InputStreamSource {boolean exists();boolean isReadable();boolean isFileQ;URL getURL() throws IOException;1234 boolean isOpen();56URI getURI() throws IOException;8 File getFileQ throws IOException;9 ReadableByteChannel readableChannel() throws IOException;10 long contentLength() throws IOException;11 long lastModified() throws IOException;12 Resource createRelative(String relativePath) throws IOException;13 String getFilename();14 String getDescription();54H1、内置的Resource的实现Spring包含了几个内置的Resource 实现，如下所示:UrlResource: UrlResource包装了java.net.URL，可以用来访问任何需要通过URL访问的对象，例如文件、HTTPS目标、FTP目标等。 所有URL都用一个标半化的字符昌表示，这样就可以使用适当的标侍化前组来表示不同类型的URL。 这包括文件系统路径的' file: ',ClassPathResource: 该类表示应该从【类路径】中获取的资源。入资源。通过https协议访问资源的' https: ', 通过ftp访问资源的' fp: 等。FileSystemResource: 这是面向java.io的Resource实现，可以简单的实现对系统文件的操作。InputStreamResource: 给定的InputStream的Resource实现。 只有当没有特定的资源实现适用时，才应该使用它。ByteArrayResource: 这是一个给定字节数组的资源实现。于访问它使用线程上下文类装入器、给定的类装入器或给定的类装",
  "assets/net-img-1679286245452-d78bb9e2-2ce4-4141-ba50-708b738d4fa3-20230321112829-p0crqeq.png": "我们编写以下三个测试有用例来简单学习感知一下:1 @Test2 public void testUr1() throws IOException {3 Resource resource = newUrlResource(“https://d1dir1. qq. com/qqfile/qq/PCQQ9.7.0/QQ9.7.0.28921. exe\");FileOutputStream fos = new FileOutputStream(\"D://\"+resource.getFilename());// 该工具包需要引入commons-ioIoutils.copy(resource.getInputStream() , fos);NOW",
  "assets/net-img-1679286262121-39c02152-dac9-4f15-a9fc-1f9e11aa141a-20230321112829-bt282by.png": "@Testpublic void testFileSystem() throws IOException {Resource resource = new FileSystemResource(\"D:/spring/spring.xm1\");byte[] buffer = new byte[1024*100];int offset = I0Utils.read(resource.getInputStream(), buffer);logger. info(new String(buffer ,0,offset));@Testpublic void testClassPath() throws IOException {Resource resource = new ClassPathResource(\"spring. xml\");byte[] buffer = new byte[1024*100];int offset = I0Utils.read(resource.getInputStream(), buffer);logger. info(new String(buffer ,0,offset));",
  "assets/net-img-1679286275965-406070ad-e51b-4e9d-99c7-79ee5b3a7c2b-20230321112829-xculo5y.png": "2、xml解析这里我们接着之前的源码继续深入，回顾我们之前的加载beanDefinition的过程:1、加载.class文件资源，这里和类加载不是一个概念。2、加载xm文件首先我们看一个小知识点:。 Big8[classpath:*] : 只会到你的target下面的class路径中查找找文件，通常匹配一个资源。前经|。 Bi4%[classpath*:] : 不仅包含target下面的class路径，还包括jar文件中(target下面的class路径)进行查找，可以匹配多个资源，这种场景非常多，比如在实现了springboot自动装配相关的jar包中绝大多数都会有spring.factories文件。Maven: org.springframework.b« ring-boot-\u003cspring-boot-autoconfigur 1 jarMETA-INFspringorg.springframework.context.Appspring给我们提供了springPathMatchingResourcePatternResolver类，该工具可以很灵活的帮助我们获取对应的Resource实例，他提供了getResource和getResources方法为我们使用:",
  "assets/net-img-1679286393116-32d93cb7-be25-438b-8cee-6cd6991ed88a-20230321112829-3xlog4g.png": "public Resource getResource(String location) {Assert.notNul]l(location, “Location must not be null\");// 留给我们的扩展的协议解析器，如自定义for (ProtocolResolver protocolResolver : getProtocolResolvers()) {Resource resource = protocolResolver.resolve(location, this);if (resource != null) {return resource;if Clocation.startswith(\"/\")) {return getResourceByPath(location);3// Classpath:else if Clocation.startswith(CLASSPATH_URL_PREFIX)) {return new ClassPathResource(location. substring (CLASSPATH_URL_PREFIX. length()),getClassLoader());} else {try {// 尝试将位置解析为URL-URL url = ResourceUtils.toURL(Ipcation) ;// ®MBAEFile: vfsfile:iTAHreturn (ResourceUtils.isFileURL(url) ? new FileUriResource(url) : newUr1Resource(url));}",
  "assets/net-img-1679286418673-0c6b32db-6fb6-4c49-be7c-d14349e527f9-20230321112829-hnvrb4g.png": "我们写一个测试用例如下:1 @Test I2 public void testPathMatch() throws IOException {3 PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();4 logger. info(\"Then resource is {}.\", resolver.getResource(\"classpath:yd1.xm1\").getClass());5 logger. info(\"Then resource is {}.\", resolver.getResource(\"https://yd1.xm1\").getClass());6 logger.info(\"Then resource is {}.\", resolver.getResource(\"ftp: //ydl.xm1\").getClass());7 logger.info(\"Then resource is {}.\", resolver.getResource(\"file://yd1.xm1\").getClassQ);8 }当然我们也可以调用getResources方法获取类路径下的所有的同名文件:我们可以写如下的测试用例:1 public void testMoreFile() throws IOException {2 PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();3 Resource[] resources = resolver.getResources(\"“classpath*: /META-INF/spring. factories\");4 for (Resource resource : resources) {5 System. out.printIn(resource. getURI());6 }}结果如下:java",
  "assets/net-img-1679286442063-0a92fa01-bfda-4a59-a727-b20d1631fb34-20230321112829-hksbbx8.png": "pring-boot/3.0.1/spring-boot-3.0.1.jar! /META-INF/spring. factoriespring-boot-autoconfigure/3.0.1/spring-boot-autoconfigure-3.0.1.jar! /META-INF/spring.factor-aop/6.0.3/spring-aop-6.0.3. jar! /META-INF/spring.factoriespring-boot-test/3.0.1/spring-boot-test-3.0.1.jar!/META-INF/spring. factoriespring-boot-test-autoconfigure/3.0.1/spring-boot-test-autoconfigure-3.0.1.jar!/META-INF/spr-test/6.0.3/spring-test-6.0.3.jar! /META-INF/spring. factories",
  "assets/net-img-1679287736882-08072c4e-bb76-43e0-99c2-5d6933f5c307-20230321112829-ncwlqe4.png": "四、环境抽象Ispring提供了Environment接口，是一个对环境的抽象，集成在容器中，它模拟了应用程序环境的两个关键方面，分别是profiles和properties。。 一个profile是一个给定名字的，在【逻辑上分了组】的beanDifination配置，只有在给定的profile是激活的情况下才向容器注册。。 properties 在几乎所有的应Se Pa REESE. 他就是一大堆的key-value的集合， 和— 属性件、JVM系统属性、系统环境变量、JNDI、servlet上下文参数、特定的【Properties】对象、“Map\"对象等等。 与属性相关的Environment对象的作用是为提供一个方便的服务接口，用于配置属性源并从那里解析属性。1、porpertiesSpring中的环境对象提供了对【属性】的搜索操作，我们看下下边的例了1 @Testpublic void testMoreEnvProperties() throws IOException {ApplicationContext ctx = new GenericApplicationContext();4 Environment env = ctx.getEnvironment();boolean containsMyProperty = env.containsProperty(” 了;1ogger.info(\"Does my environment contain the ‘JAVA property? {}\", containsMyProperty) ;Fae了当然我们也可以debug，观察其中的env变量:Environment() ;iables ConsoleRUNNINGStandardE e epro 0 defaultProfiles=[dToolsTest (comyalclass)emProperties|",
  "assets/net-img-1679288240785-2b721031-f1cf-40d8-9ed7-d3ca1bad7b3d-20230321112830-7uhljlt.png": "在前面的代码片段中，我们看到了查询在spring的env中是否存在【JAVA_HOME】属性。 为了回答这个问题，Environment对象对propertySources中的【PropertySource】执行搜索。这里边又出现了PropertySource的概念，他是对任何【键值对源】的一个简单抽象， spring的StandardEnvironment配置了两个基础PropertySource对象:(1) 一个代表|VM系统属性的集合“System.getProperties()1 @Test2 public void testSystemProperties() {3 Properties properties = System.getProperties();4 Set\u003cMap.Entry\u003cObject, Object\u003e\u003e entries = properties.entrySet();5 for (Map.Entry\u003cObject,Object\u003e entry:entries){6 System. out.printIn(entry);7 3oocm",
  "assets/net-img-1679288307046-47a0a863-256f-4dea-bc7e-7c6c848ba078-20230321112830-cpbdb7p.png": "java.file.java.-vendor.url.bug=https://bugreport. java.com/bugreport/javajava.java.user.puntime.name=Java(TM) SE Runtime Environmentencoding=UTF-8vm.name=Java HotSpot(TM) 64-Bit Server VMio.tmpdir=C:\\Users\\itnanls\\AppData\\Local\\Temp\\version=17.0.5|dir=E:\\project\\spring-source-studyos.arch=amd64java.vm.specification.name=Java Virtual Machine Specification",
  "assets/net-img-1679288336956-757bd098-628f-4d16-8b29-2d087178061b-20230321112830-204ondk.png": "(2) 一个代表系统环境变量的设置(System.getenv()”)GTest2 public voidMap\u003cString, String\u003e env = System.getenvQ);4 Set\u003cMap.Entry\u003cString, String\u003e\u003e entries = env.entrySet();for (Map.Entry\u003cString,String\u003e entry:entries){System. out.printIn(entry);weweHHRR, Sem:0S=Windows_NTOneDriveConsumer=C: \\Users\\itnanls\\OneDriveCOMPUTERNAME=DESKTOP-D3LI9B9PROCESSOR_REVISION=a701CommonProgramW643 \\Program Files\\Common FilesComSpec=C: \\WINDOWS\\system32\\cmd.exeProgramData=C: \\ProgramDataProgramW6432=C:\\Program FilesHOMEPATH=\\Users\\itnanlsSystemRoot=C: \\WINDOWSStandardEnvironment的源码如下，默认情况便确实会将这两个propertySource加入env:",
  "assets/net-img-1679288348929-108ab177-ebee-49ec-9384-0b84f868b21e-20230321112830-3znvu1g.png": "1 public class StandardEnvironment extends AbstractEnvironment {23 /** System environment property source name: {@value}. */4 public static final String SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME = “systemEnvironment\";56 /** JVM system properties property source name: {@value}. */A public static final String SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME = “systemProperties\";89 @Override10 protected void customizePropertySources (MutablePropertySources propertySources) {11 propertySources.addLast(12 new PropertiesPropertySource (SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME ,getSystemProperties()));13 propertySources.addLast(14 new SystemEnvironmentPropertySource(SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME ,getSystemEnvironment()));15 }",
  "assets/net-img-1679288368991-44c1307a-7a7e-4fb1-9ab8-6e9dd0d9dbd2-20230321112830-qmu2brm.png": "当然，人整个机制都是可配置的。 我们可以将自定义的属性源集成到此搜索中。 为此，我们可以实例化【PropertySource】，并将它添加到当前' Environment 的' propertyssources '集合中，如下:1 public class MyPropertySource extends PropertySource\u003cString\u003e {2 public MyPropertySourcelString name) {3 super (name);4 }56 @Override7 public String getProperty(String name) {8 // 这里可以是源自任何罗辑的键值对来源，9 // 可以从properties文件中检索，也可以是数据库检索，等等10 return “hello\";abl }12 11测试用例如下:1 @Test2 public void testStandardEnvironment() {3 StandardEnvironment env = new StandardEnvironment();4 MutablePropertySources sources = env.getPropertySources();5 sources.addFirst(new MyPropertySource(\"my-source\"));6 }己的",
  "assets/net-img-1679288433254-60adcd8d-60c2-4483-b74a-8851646086f1-20230321112830-9fx8qpx.png": "【@propertySource 】注解提供了一种方便的声明性机制，用于向Spring的【Environment】中添加【 PropertySource] 。给定一个名为app的propertis文件，输入内容, 如【teacherName=itnanls】，编写如下配置类:1 @Configuration2 @PropertySource(\"classpath: app. properties\")3 public class AppConfiguration {4\\}测试用例如下:",
  "assets/net-img-1679288455665-cd692ecd-bdd1-4b86-9df3-d78d03cfeb58-20230321112830-i0uyo2l.png": "1 @SpringBootTest(classes = AppConfiguration.class)2 public class PropertySourceTest {3} @autowired4 Environment environment;5 @Test6 public void testEnv(){if System. out.printIn(environment. getProperty(\"teacherName\")) ;8 }9|}10ll 输出内容:12 itnan1s",
  "assets/net-img-1679293243316-756d84f4-e84a-46a0-93b1-31f8635fd5af-20230321112830-ri26p3u.png": "2、ProfilesProfiles在核心容器中提供了一种机制，人允许在不同环境中注册不同的Bean。 “环境\"这个词对不同的用户有不同的含义，。 在开发中使用内存中|。 为客户A和客户B部署注册定制的bean实现。的数据源，还是在生产中从INDI中查找的数据源。考虑一个实际应中的第一个用例，它需要一个数据源'。 在测试环境中，配置可能类化各下:1 @Bean2 public DataSource dataSource() {3 return new EmbeddedDatabaseBui Ider()4 . setType (EmbeddedDatabaseType. HSQL)5 .addScript (\"my-schema.sq]\")6 [ -addscript(\"my-test-data.sql\")7 -buildQ;8 }TES RUA RSIE SRD, iQ SAE RC LSS SRS Se NDIB SRdataSource ' bean现在看起来如下所示:1 @Bean2 public DataSource dataSource() throws Exception {3 Context ctx = new InitialContext();4 return (DataSource) ctx. lookup(\"java: comp/env/jdbc/datasource\") ;5|}重点: 问题是如何根据当前环境在使用这两种数当然，我们可以使月GProfile,导源之间进行切换?P。 我们的'【@Profile】注解允许您指出，当一个或多个bean在哪一种Profile被激活时被注入。 使用前画的例子，我们可以将dataSource配置重写如下:",
  "assets/net-img-1679293332405-cb091bba-0b08-4494-aa94-1843742dc4cc-20230321112830-uszvkkf.png": "1 @Configuration2 @Profile(\"development\")3 public class StandaloneDataConfig {45 @Bean6 public DataSource dataSource() {7, return new EmbeddedDatabaseBui Ider ()8 . setType (EmbeddedDatabaseType. HSQL)9 .addScript(\"classpath: com/bank/config/sq1/schema.sq1\")10 .addScript(\"classpath: com/bank/config/sq1/test-data.sql\")11 -buildQ;12 }13/}java1 @Configuration 工2 @Profile(\"production\")3 public class IJndiDataConfig {45 @Bean(destroyMethod=\"\")6 public DataSource dataSource() throws Exception {7 Context ctx = new InitialContext();8 return (DataSource) ctx. lookup(\"java: comp/env/jdbc/datasource\");9 }10 }eProfiletBal ETERS, ROS—MBA—Membean (fia, st+—MeebeaniiS teh), 2 NERAAra",
  "assets/net-img-1679293347637-a7839185-d586-487e-9aa5-2b6503c4385f-20230321112831-c7t4gej.png": "1 @Configuration2 public class AppConfig {@Bean(\"dataSource\")@Profile(\"“development\")public DataSource standaloneDataSource() {return new EmbeddedDatabaseBui Ider (). set Type (EmbeddedDatabaseType. HSQL).addScript(\"classpath: com/bank/config/sql/schema.sql\").addScript(\"classpath: com/bank/config/sql/test-data.sql\")-buildQ;@Bean(\"dataSource\")@Profile(\"production\")public DataSource jndiDataSource() throws Exception {Context ctx = new InitialContext();return (DataSource) ctx. lookup(\"java: comp/env/jdbc/datasource\");",
  "assets/net-img-1679293376038-d71e6bca-93a8-4987-a4a4-73023e0c1260-20230321112831-3n72v7f.png": "编程的方式1 ctx. getEnvironment().setActiveProfiles(\"profilei\", “profile2\");spring-boot PSSmBs, PTS RAT:1 kspri ng.profiles.active=devproperties",
  "assets/net-img-1679293608981-d7d4a4cf-1032-4673-a52e-207167e0b48c-20230321112831-mlgi2x7.png": "3、激活一个配置现在我们已经更新了配置，我们仍然需要指示Spring哪个配填文件是活动的。 如果我们现在启动我们的样例应用程序，我们会看到抛出一个NosuchBgeanDefinitionException ，因为容器无法找到名为datasource的Spring bean,激活配置文件有几种方式，但最直接的方式是通过【ApplicationContext】可用的【Environment】API以编程方式执行。 下面的例子展示了如何做到这一点:1 @Test2 public void testProfile(){3 // 创建容器4 AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();5 // 省活环境6context.getEnvironment() .setActiveProfiles (\"development\") ;// Fecontext.scan(\"com.yd1class.datasource\");9 // 刷新10 context. refreshQ);al // 使用12 DataSource bean = context.getBean(DataSsource.class);13 logger. info(\"{}\", bean);此外，你还可以通过spring.profiles来声明性地激活环境【active】属性，它可[以通过系统环境变量、JVM系统属性、servlet上下MBSE web.xml '中指定。请注意，配置文件不是一个'非此即彼\"的命题。 您可以一次激活多个配置文件。 通过编程方式，您可以向' setActiveProfiles() 方法提供多个配置文件名，该方法接受' String…可变参数。 下面的示例激活多个配置文件加入启动参数:1 -Dspring.profiles.active=\"profilel, profile2\"",
  "assets/net-img-1679293650386-5c04dedf-b681-4cad-acbd-67f2c5a03cc5-20230321112831-ujht4mg.png": "五、发布订阅一、简介spring汶我们提供了event multicaster，可以十分简单的实现发布订阅模式:multicast (组播) : 也叫多播，多点广播或群播。 指把信息同时传递给一组目的地址。它使用策略是最高效的，因为消息在每条网络链路上只需传递一次，而且只有在链路分又的时候，消息才会被复制。事件消息(A事件) 1listener I(ABH) ;ws 3(ABH) : 1Mutticaster 发布事件”事件消息| listener listener(多播器) (ABH) (A事件) (BE) :事件消息(A事件)listener(A事件)spring启动时也会默认注入一个如下的bean: simpleApplicationEventMuiticaster，我们可以使用这个类轻松实现事件机制，这是典型的观察这设计模式:",
  "assets/net-img-1679293701941-dc63e587-56cd-44d6-92eb-565571712200-20230321112831-t86z1v8.png": "1@Testpublic void t caster(){SimpleApplicationEventMulticaster caster =new SimpleApplicationEventMulticaster();caster.addApplicationListener (new EmailListener());caster.addApplicationListener(new EmailListener());caster.addApplicationListener (new MessageListener());caster.multicastEvent(new OrderEvent(this));",
  "assets/net-img-1679300441058-abbbcae9-7b82-47bd-9765-a31e5d4c1a41-20230321112831-lz5sewv.png": "public class 0rderEvent extends ApplicationEvent {no usages Ipublic OrderEvent(Object source) {e super (source) ;",
  "assets/net-img-1679300540877-c212050d-8b74-4e50-a278-83507440ede6-20230321112831-vutuioo.png": "DCpublic class MessageListener implements ApplicationListener\u003cOrderEvent\u003e {4 usages@Overridepublic void onApplicationEvent(OrderEvent event) {System. out.println(event.getSource()+\"--\u003eii{a Rik f! \");Ip",
  "assets/net-img-1679300592927-a4cfe20a-eb08-4ab4-99bf-297008cb8f1e-20230321112831-k4iyhwl.png": "二、源码阅读中有很多复杂的情况，比如listener是我们直接手动注册的实例呢，还是spring工厂中的bean呢，如果是bean是singleton还是prototype呢?RABEL, RSS Tee:图一:addApplticationListener的过程DefauttListenerRetriever ，编程式的添加listener | 肤认的存储listeners的检索工具|编程式的直接注册1 applicationListeners，他是set集合'ABAGH sm listenertROHY aLE 从闪避中获取单例，实现了listener接口的bean 的besn让接注册| applicationtistenerBeans 'listeners! _ | |i Etisal \u003e ffiibean 。 非单例bean1 。 单例bean2 '判断为非单例容器不会保存单例bean， | ，我们需要保存bean的名字, 2 | 1机会实例化图二显示了当listener被调用执行后，如何进行了缓存:",
  "assets/net-img-1679300692269-13d1ae12-de2e-4749-b541-dfc762e1df47-20230321112831-ydet3v6.png": "SimpleApplicationEventMulticaster篇程式的添加Ustener 默认的存储Usteners的检索工具defaultRetrieverneSEAT listeneri#O的bean将名字注入实现了listener接口的bean|listener1 listener2单例bean1 。” 非单例bean1 = 单例bean2retrieverCache是map结构可以作为一级缓存，先从这个缓存中找ListenerCacheKey 一Cached ListenerRetrieverListenerCacheKey 一Cached ListenerRetriever| |非单例bean1 。 非单例bean1 。 非单例bean1listener1编程式。 listener2单例bean 。 listener2单例bean",
  "assets/net-img-1679303462823-4a94a830-3ba0-4947-bf97-17e11148849e-20230321112831-9di3w2j.png": "SimpleApplicationEventMulticaster源码如下:1 public class SimpleApp]icatzonEventMulticaster extends AbstractApplicationEventMulticaster {23 // 定义一个线程池，事件被触发时可由他来实现事件，黑认为nu114 private Executor taskExecutor;5)6 // 这个用来捕获1istener执行过程中产生的异常7 // 需要这用赋值caster.setErrorHandler(Cnew XxxErrorHandlerO )8 private ErrorHandler errorHandler;9 private volatile Log lazyLogger;10II12 public SimpleApplicationEventMulticaster() {}13 public SimpleApplicationEventMulticaster(BeanFactory beanFactory) {14 setBeanFactory(beanFactory);15 }1617 public void setErrorHandler(@Nullable ErrorHandler errorHandler) {18 this.errorHandler = errorHandler;19 }20",
  "assets/net-img-1679304417727-6cbaf316-0400-4d69-8d94-32d427070759-20230321112832-ywvcgtx.png": "@Nullableprotected ErrorHandler g\u0026étErrorHandler() {return this.errorHandler//设置一个自定义执行器《线程池) 来调用每个侦听器。public void setTaskExecutor(@Nullable Executor taskExecutor) {this.taskExecutor = taskExecutor;3@Nullableprotected Executor getTaskExecutor() {return this. taskExecutor// 广播一个事件Goverridepublic void multicastEvent(ApplicationEvent event) {multicastEvent(event, resolveDefaultEventType(event));",
  "assets/net-img-1679304576914-41efc5bc-a120-48c9-ae3a-fbad7c5dcf92-20230321112832-jm9v3aa.png": "// 广播一个事件的具体实现Goverridepublic void multicastEvent(final ApplicationEvent event, G@Nullable ResolvableType eventType) {ResolvableType type = (eventType != null ? eventType : resolveDefaultEventType(event));Executor executor = getTaskExecutor();// 核心一: getApp1icationListeners(event，type)稍后看// 他的重点是如何设计的缓存// 获取所有与event事件匹配的1istener并调用核心方法onApp1icationEventfor (ApplicationListener\u003c?\u003e listener : getApplicationListeners(event, type)) {// 如果你设置了线程池他会将任务丢给线程池if (executor != null) !{/kf 核心二: 调用Listener的方法invokeListenerexecutor.execute(() -\u003e invokeListener(listener, event));}// 否则就以单线程的方式运行else {invokeListener(listener, event);// 调用1istener的方法protected void invokeListener(ApplicationListener\u003c?\u003e listener, ApplicationEvent event) {// ErrorHandler可以保存Listener在执行过程中产生的异常// 其默认为nu11，我们可以独立设置ErrorHandler errorHandler = getErrorHandler();if (errorHandler != null) {try {doInvokeListener(listener, event);}catch (Throwable err) {// 将执行1istener时产生放入errorHandlererrorHandler.handleError(err);",
  "assets/net-img-1679304608043-b5adf6cf-21ef-45a0-92a9-0ca85439cd6a-20230321112832-nwgk91g.png": "100101102103104105106107}else {// 负责直接调用doInvokeListener(listener, event);@SuppressWarnings({\"rawtypes\", \"unchecked\"})private void doInvokeListener(ApplicationListener listener, ApplicationEvent event) {try {// 调用方法Tistendr. onApplicationEvent(event);}// 捕获类型转化异常catch (ClassCastException ex) {String msg = ex.getMessage();if (msgnull || matchesClassCastMessage(msg, event.getClass()) |(event instanceof PayloadApplicationEvent \u0026\u0026 matchesClassCastMessage(msg,((PayloadApplicationEvent) event) .getPayload().getClass()))df// 可能是1ambda定义的侦听器，我们无法为其解析泛型事件类型// 让我们抑制异常。Log loggerToUse = this.1azyLoggerif CloggerToUse == null) {loggerToUse = LogFactory.getLog(getClass());this. lazyLogger = loggerToUse;}if CloggerToUse.isTraceEnabled()) {loggerToUse.trace(\"Non-matching event type for listener}} else {throw ex;+ listener, ex);Error in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/net-img-1679316696404-bf04d17a-69fa-449a-a67f-4d5f4592e224-20230321112832-vvg3biy.png": "六、国际化spring引入了MessageSource机制，可以帮有我们简单的实现[fl4 (internationplization) ，简称i18n。ResourceBundleMessageSource是一个简单的实现，我们可以建立如下的文件用以测试:文件内容超级简单，分别是:© zh_CN的文件内容: hello=你好{0}© en_us的文件内容: hello=hello {0}使用以下的测试用例就可以简单的获取对应Locale的内容:1 @Test2 public void testMessageSource(){3 ResourceBundleMessageSource rbs = new ResourceBund]eMessageSource();4 rbs .setBasename(\"i18n/message\");5 rbs.setDefaultEncoding(\"UTF-8\");6 rbs.setDefaultLocale(Locale.CHINA) ;7 String hello = rbs.getMessage(\"hello\", new Object[]{\"tom\"}, Locale.US);8 System. out.printIn(hello);9/3关于方法中的几个参数的描述:。 string code: 文件中的key。 Object[ args: 待解析字符串的参数，value中可以存在带{}占位符的变量。 String defaultMessage: 读取不到国际化信息时依据此默认值进行处理。 Locale locale: 国际化定位，如Locale.CHINA te FE图",
  "assets/net-img-1679325628988-2ebe6252-6564-46bb-9df4-917bf43b2293-20230321112832-0ptsh3c.png": "七、表达式1、简介本节介绍【SpEL接口及其去达式语言】的简单使用。 下面的代码引入了SpEL APl来计算字符捉字面表达式' Hello World '。1 ExpressionParser parser = new SpelExpressionParser();2 Expression exp = parsen panseexpics sion Gglclto World'\");3 String message = (String) exp.getValue();消息变量的值是\"Hello World\",【ExpressionParser]】 接口【负责解析去达式字符捉】。[Expression] 接口负责计算前面定义的表达式字符串。EvaluationException 两个异常。【Expression】接口负责【计算前面定义的表达式字符中java在前面的示例中，表达式字符站是|引号表志当调用parser时，可以抛出ParseException和2]. SPpEL支持广泛的特性，例如调| 在下面的方法调用示例中，我们甚至可以在字符中字面量上调用【concat】方法:1 ExpressionParser parser = new SpelExpressionParser();2 Expression exp = parser.parseExpression(\"'Hello World’.concat('!')\");3 String message = (String) exp.getValue();\" message 的值现在是'Hello World!',| 下面的例子调用了' String Bt [bytes] :ExpressionParser parser = new SpelExpressionParser();Expression exp = parser.parseExpression(\"'123 // invokes 'getBytes()'45 byte[] bytes = (byte[]) exp.getvalue();RATES HERAT TRA.Hello World’ .bytes\");JFoa\u003ens,方法、访问属性和调用构造函数。",
  "assets/net-img-1679325690309-f9bb5be8-2300-4939-9309-c9f9a22c8b99-20230321112832-3m12aw8.png": "SpEL还通过| 祭准点表示法(如' prop1.prop2.prop3 ') 和相应的属性值设置来支持嵌套属性。 也可以访问公共字段。下面的例子展示了如何使用点表示法来获取文字的长度:ExpressionParser parser = nev] SpelExpressionParser(O);Expression exp = parser.parseExpression(\"'Hello World’. bytes. length\");123 // invokes ‘getBytes(). length’45 int length = (Integer) exp.getValueQ);还可以调用String的构造函数而不是使用字符四字面值，如下例所示:1 ExpressionParser parser = new SpelExpressionParser();2 Expression exp = parser.parseExpression(\"new String(‘hello world').toUppercase()\");3 String message = exp.getValue(String.class);从字面量构造一个新的' String '，并使其为大写。",
  "assets/net-img-1679325721732-27e6ed60-b75f-4791-a2f6-6dd6b09250c3-20230321112832-kygy9rr.png": "SpEL更常见的用法是提供一个针对特定对象实例(称为根对象) 求值的表达式字符串。 下面的例子展示了如何从Inventor类的实例中检索' name '属性:// Create and set a calendarGregorianCalendar c = new GregorianCalendar();c.set(1856, 7, 9);// The constructor arguments are name, birthday, and nationality.Inventor tesla = new Inventor(\"Nikola Tesla\", c.getTime(), \"“Serbian\");ExpressionParser parser = new SpelExpressionParser();I10 Expression exp = parser.parseExpression(\"name\"); // Parse name as an expression11 String name = (String) exp.getValue(tesla);CANAURWNH12 // name == \"Nikola Tesla”3 // 这个表达式在比较连个名字是不是\"Nikola Tesla‘14 exp = parser.parseExpression(\"name == \"Nikola Tesla'\");15 boolean result = exp.getValue(tesla, Boolean.class);16 // result == truePa TATASRRS pELRAS AE Tm RET ECE [BeanDefinition] Shi, 在这两种情况下，定义玫达式的语法形式都是#{\u003cexpression string\u003e},",
  "assets/net-img-1679325754097-23a67262-7d99-4da8-b2d6-da5bc980e428-20230321112833-ahlw44f.png": "2、XML配置属性或构造函数参数值可水通过使用表达式设置，如下例所示:1 \u003cbean id=\"numberGuess\" class=\"org.spring.samples.NumberGuess\"\u003e2 \u003cproperty name=\"randomNumber\" value=\"#4{ T(java.lang.Math).random() * 100.0 }\"/\u003e34 \u003c!-- other properties --\u003e5 \u003c/bean\u003e应用程序上下文中的所有bean都可以作为【具有公共bean名称】的预定义【变量】使用(意识就是可以将bean的名称作为表达式的变量) 。这包括于访问运行时环境的标准上下文bean，如【environment】，以及【systemProperties】和【systemEnvironment 】等bean实例。下面的示例显示了对【systempProperties】 bean的SpEL变量访问:1 \u003cbean id=\"taxCalculator\" class=\"org.spring.samples.TaxCalculator\"\u003e2 \u003cproperty name=\"defaultLocale\" value=\"#{systemProperties[*user.region'] }\"/\u003e3 \u003c!-- other properties --\u003e4 \u003c/bean\u003e注意，这里不需要在预定义变量前加上' # '符号。我们还可水通过名称引用其他bean属性，如下例所示:",
  "assets/net-img-1679325782240-9202fc9d-5e2a-4638-bfd8-e47d11139aba-20230321112833-d1ct2ft.png": "CONAUARWNHE1011\u003cbean id=\"numberGuess\" class=\"org.spring.samples.NumberGuess\"\u003e\u003cproperty name=\"randomNiimber\" value=\"#{ T(java.]ang.Math).random() * 100.0 }\"/\u003e\u003c!-- other properties --\u003e\u003c/bean\u003e\u003cbean id=\"shapeGuess\" class=\"org.spring.samples.ShapeGuess\"\u003e\u003cproperty name=\"initialShapeSeed\" value=\"#{ numberGuess.randomNumber }\"/\u003e\u003c!-- other properties --\u003e\u003c/bean\u003e",
  "assets/net-img-1679325795784-b32a4f90-563f-4c4e-bffa-12998b189bef-20230321112833-v69gyat.png": "3、注解配置要指定默认值，可以在字段、方法和方法或构造函数参数上放置(@Value'》设置字段的默认人的示例如下:1 public class FieldValueTestBean {23 @value(\"#{ systemProperties['user.region'] }\")4 private String defaultLocale;56 public void setDefaultLocale(String defaultLocale) {he this.defaultLocale = defaultLocale;8 }910 public String getDefaultLocale() {11 return this.defaultLocale;12 }",
  "assets/net-img-1679325811844-29bfb5c8-d228-4538-8bad-35f161737eab-20230321112833-ww48d6h.png": "下面的例子展示了一个等价的属性setter方法:1 public class PropertyValueTestBean {23 private String defaultLocale;45 @Value(\"#{ systemProperties['user.region'] }\")6 public void setDefaultLocale(String defaultLocale) {7 this.defaultLocale = defaultLocale;8 }910 public String getDefaultLocale() {11 return this.defaultLocale;12 }",
  "assets/net-img-1679325822896-07c16b0c-af93-428d-b5f6-7485080e3ea7-20230321112833-ilcc45s.png": "动连接的方法和构造函数也可以使用@Value 注解，如下面的例子所示:public class SimpleMovieLister {, oo callprivate MovieFinder movieFinder;private String defaultLocale;@Autowiredpublic void configure(MovieFinder movieFinder,@value(\"#{ systemProperties['user.region'] }\") String defaultLocale) {this.movieFinder = movieFinder;this.defaultLocale = defaultLocale;Up ae",
  "assets/net-img-1679325830941-35345870-bdd0-41b6-9ac1-33e99509051d-20230321112833-3eigz0i.png": "123456public class MovieRecommender {private String defaultLocale;private CustomerPreferenceDao customerPreferenceDao;public MovieRecommender (CustomerPreferenceDao customerPreferenceDao,@value(\"#{systemProperties['user.country']}\") String defaultLocale) {this.customerPreferenceDao = customerPreferenceDao;this.defaultLocale = defaultLocale;IUf a3",
  "assets/net-img-1679325843052-767f5e6c-c11c-42f0-8317-5a929ab713cd-20230321112833-9pdrsad.png": "4、语法参考(不需要记忆啊)1, 文字表达方式支持的文字表达式类型有字符串、数字值、布尔信和空信。 字符串由单引号分隔。 若要将单引号本身放入字符串中，请使用单引号字符。下面的例子晶示了文字的简单用法。 通常，它们不会像这样单独使用，而是作为更复杂表达式的一部分使用。例如，在远辑|运算符的一侧使用文字。1 ExpressionParser parsek = new SpelexpressionParser();// evals to “Hello world\"String helloworld = (String) parser.parseExpression(\"'Hello World'\").getvalue();double avogadrosNumber = (Double) parser.parseExpression(\"6.0221415E+23\").getvalueQ);Jo wm 上wwN8 // evals to 21474836479 int maxValue = (Integer) parser.parseExpression(\"Ox7FFFFFFF\").getValue();11 boolean trueValue = (Boolean) parser.parseExpression(\"true\").getValue();13 Object nullValue = parser.parseExpression(\"nul1\").getVvalue();数字支持使用负号、指数符号和小数点。 EXER, GEADouble.parseDouble() 解析实数。比较",
  "assets/net-img-1679326286375-127cf240-c327-4ec0-b217-91e8ee931421-20230321112833-8ou3j2v.png": "2、Arrays，Lists， Maps| 便用[点】开指示绒训的属性值。1 // evals to 18562 int year = (Integer) parser.parseExpression(\"birthdate.year + 1900\").getValue(context) ;4 String city = (String) parser.parseExpression(\"placeOfBirth. city\") .getValue(context) ;More Actions人允许属性名称的首字母1900\"和“placeOfBirth.city'。 此外，可以通过方法调placeOfBirth.city 。RI分大小写。此，上面例子中的表达式可以写成\"birthdate.year +访问属性Fig, ' getPlaceOfBirth(). getcity() 而不是'",
  "assets/net-img-1679326295282-48dfd13e-2899-49c7-90e9-15998db02178-20230321112833-snmwycg.png": "| 便用方括号表示法获取数组和列表的内容，示例如下:1 ExpressionParser parser = new SpelExpressionParser();2 EvaluationContext context = SimpleEvaluationContext.forReadOnlyDataBinding() .build();3// Inventions Array456 // evaluates to “Induction motor\"7 String invention = parser.parseExpression(\"inventions[3]\").getValue(8 context, tesla,String.class);9 I10 // Members List1112 // evaluates to \"Nikola Tesla\"13 String name = parser.parseExpression(\"members[0].name\").getValue(14 context, ieee, String.class);16 // List and Array navigation17 // evaluates to “Wireless communication\"18 String invention = parser.parseExpression(\"members [0]. inventions[6]\").getValue(19 context, ieee, String.class);",
  "assets/net-img-1679326308572-795a7aca-0efb-473b-9b8b-6fe4837ba803-20230321112833-3igb6p4.png": "3、 内联列表可以使用匡符号在表达式中直接雪示列表。1 // evaluates to a Java list containing the four numbers2 List numbers = (List) parser.parseExpression(\"{1, 2, 3, 4}\").getValue(context);34 List listOfLists = aby parser.parseExpression(\"{{'a', 'b'}, {'x', 'y'}}\").getvalue(context) ;{} 它本身就是一个空列表(list). WHESRA, URIS TSHRENS EAN, Ste MITA式(而不是在每次求值时构建一个新列表) 。4、 内联映射我们还可以使用fkey: value} 表示法在表达式中直接表示映射关系。 下面的例子展示了如何做到这一点:1 // evaluates to a Java map containing the two entries2 Map inventorInfo = (Map) parser.parseExpression(\"{name: ‘Nikola’, dob: '10-July-1856'}\").getValue(context);4 Map mapOfMaps = (Map) parser.parseExpression(\"{name:{first: ‘Nikola’, last:'Tesla‘}, dob: {day:10,month: ‘July’, year:1856}}\").getValue(context) ;CIECASME TSR (map). 出于性能原因，如果映射本身由固定的文字或其他嵌套的常量结构组成，则创建一个常量映射来表示表达式(而不是在每次求人时构建一个新映射) 。",
  "assets/net-img-1679326317277-529d8be1-043f-414f-bf86-bcd6d0f53143-20230321112834-0h4su1n.png": "5、 数组结构可以使用熟悉的java语法构建数组，也可以提供一个初始化式，以便在构造时填充数组。 下面的例子展示了如何做到这一点:int[] numbersl = (int[]) parser.parseExpression(\"new int[4]\").getvalue(Ccontext) ;// Array with initializer// Multi dimensional array1234 int[] numbers2 = (int[]) parser.parseExpression(\"new int[]{1,2,3}\").getValue(context) ;56int(][] numbers3 = (int[][]) parser.parseExpression(\"new int[4][5]\").getValue(context) ;You cannot currently supply an initializer when you construct a multi-dimensional array.6, 方法调用我们可以使用典型的ava编程语法来调用方法。 我们还可以在文字上调用方法。 也支持变量参数。 下面的例子|法: I// string literal, evaluates to “bc”String bc = parser.parseExpression(\"'abc'.substring(1,3)\").getValue(String.class);boolean isMember = parser.parseExpression(\"isMember('Mihajlo Pupin')\").getValue(工234 // evaluates to true56societyContext, Boolean.class);展示了如何调用方",
  "assets/net-img-1679326336638-f21f1f88-e27d-4796-9451-cdccd0ea7e0f-20230321112834-c6w7y5z.png": "7、 运算符Spring志达式语言支持以下类型的操作符:。 逻辑运算符。 数学运算符。 RIES| 关系二算符使用标准操作符雪示法支持关系操作符(等于、不等于、小于、小于或等于、大于和大于或等于)。 下面的例子展示了一些操作符示Bil:// evaluates to trueboolean trueValue = parser.parseExpression(\"2 == 2\").getValue(Boolean.class);// evaluates to falseboolean falseValue = parser.parseExpression(\"2 \u003c -5.0\").getValue(Boolean.class);// evaluates to trueboolean trueValue = parser.parseExpression(\"'black’ \u003c ‘block'\").getValue(Boolean.class);ONAURWNE",
  "assets/net-img-1679326357403-b1f04d8d-699a-4f41-9adf-0880f359312d-20230321112834-k6ad5ey.png": "除了标准的关系操作符外，SpEL还支持instanceof和基于正则表达式的matches 操作符。 下面的例子展示了两者的例子:NowmhwmNH891011// evaluates to falseboolean falseValue = parser.parseExpression(\"'xyz' instanceof T(Integer)\").getValue(Boolean.class);// evaluates to trueboolean trueValue = parser.parseExpression(\"'S.00' matches ‘A-?\\\\d+(\\\\.\\\\d{2})?S'\").getvalue(Boolean.class);// evaluates to falseboolean falseValue = parser.parseExpression(”5.0067” matches 'A-?\\\\d+(\\\\.\\\\d{2})?$'\").getValue(Boolean.class);个符号运算符也可以指定为纯字母等效符。 这避免了所使用的符号对嵌入表达式的文档类型(例如XML文档)贞有特殊意义的问题。 对应文本为:",
  "assets/net-img-1679326385891-247c5593-9d5e-4476-bef4-4b3ab5b0e041-20230321112834-wytdo8j.png": "It (\u003c)。 gt (\u003e)e。 le (\u003c=)ge (\u003e=)。 eq (==ne (!=)¢ div(/)© mod (%)e not (!).所有的文本操作符都是不区分大小写的。",
  "assets/net-img-1679326415013-a543e744-e161-41fe-a2b6-4b8aa42098bb-20230321112834-k0v0c7m.png": "| setSpEL支持以下逻辑操作符;© and (\u0026\u0026)¢ or(}1)se not (!)",
  "assets/net-img-1679326428476-5fb8029f-36be-4ed3-b997-67130b6c6029-20230321112834-e1c0h34.png": "下面的示例演示如何使用逻辑运算符;// -- AND --aft23 // evaluates to false4 boolean falseValue = parser.parseExpression(\"true and false\"). getValue(Boolean.class);567// evaluates to trueString expression = \"isMember('Nikola Tesla’) and isMember('Mihajlo Pupin')\";8 boolean trueValue = parser.parseExpression(expression).getValue(societyContext, Boolean.class);10) // -- OR --12 // evaluates to true13 boolean trueValue = parser.parseExpression(\"true or false\").getValue(Boolean.class);15 // evaluates to true16 String expression = “isMember('Nikola Tesla’) or isMember('Albert Einstein')\";17 boolean trueValue = parser.parseExpression(expression).getValue(societyContext, Boolean.class);18 ik19| // -- NOT --2021 // evaluates to false22 boolean falseValue = parser.parseExpression(\"! true\") .getValue(Boolean.class);24 // -- AND and NOT --25 String expression = “isMember('Nikola Tesla’) and !isMember('Mihajlo Pupin')\";26 boolean falseValue = parser.parseExpression(expression).getValue(societyContext, Boolean.class);",
  "assets/net-img-1679326440170-879a21ba-7120-40dd-8d99-d34be63e14aa-20230321112834-jtmz9cl.png": "| BasesPRET ESL加法运算符(+ )。 BATTS EACH -), FOA(* AOE / RE. BATALISHES HERS ESS. 执行标准操作符优先级。 下面的例子展示了使用中的数学运算符:// Additionint two = parser.paString testString =rseExpression(\"1 + 1\").getValue(Integer.class); // 2parser.parseExpression(test’ + + ‘string'\").getValue(String.class); // ‘test string’I// Subtractionint four = parser.parseExpression(\"1 - -3\").getValue(Integer.class); // 4double d = parser.parseExpression(\"1000.00 - 1e4\").getValue(Double.class); // -9000// Multiplicationint six = parser.padouble twentyFour =// DivisionrseExpression(\"-2 * -3\").getValue(Integer.class); // 6parser.parseExpression(\"2.0 * 3e0 * 4\").getValue(Double.class); // 24.0int minusTwo = parser.parseExpression(\"6 / -3\").getValue(Integer.class); // -2double one = parser// Modulus.parseExpression(\"8.0 / 4e0 / 2\").getValue(Double.class); // 1.0int three = parser.parseExpression(\"7 % 4\").getValue(Integer.class); // 3int one = parser.parseExpression(\"8 / 5 % 2\").getValue(Integer.class); // 1",
  "assets/net-img-1679326452027-c61c204b-aedd-4867-aacf-914ae365dfd8-20230321112834-1o1yars.png": "2627 // Operator precedence28 int minusTwentyOne = parser.parseExpression(\"1+2-3*8\").getValue(Integer.class); // -21",
  "assets/net-img-1679326461388-6f38b75c-fb6f-4531-8eaa-03f27a0dcf80-20230321112834-sh6t3ve.png": "| meena要设置属性，请使用赋值操作符(=)。 这通常是在调用setvalue 中完成的，但也可以在调用getvalue 中完成。 下面的例子展示了便用赋值操作符的两种方法:Inventor inventor = new Inventor();EvaluationContext context = SimpleEvaluationContext. forReadwriteDataBinding() .buildQ;parser.parseExpression(\"name\").setValue(context, inventor, “Aleksandar Seovic\");// alternativelyString aleks = parser.parseExpression('\").getValue(context, inventor, String.class);ONAUAWNEH“name = ‘Aleksandar Seovic",
  "assets/net-img-1679326473664-5eb7789c-4b17-44ec-b1c4-b16a4e274ab5-20230321112835-3ne62m1.png": "8、类型你可以使用特殊的' T 操作符来指定一个'java.lang.Class '(类型) 的实例。 静态方法也可以通过使用此操作符来调用。StandardTypeLocator类会黑认注册【java.lang】包下的类。 这意味着' T0 '引用java.lang包不需要完全限定，但所有其他类型引用必须是完全限定的, 下面的示例演示如何使用'T\"操作符:1 Class dateClass = parser.parseExpression(\"T(java.util.Date)\").getValue(Class.class);23 Class stringClass = parser.parseExpression(\"T(String)\").getValue(Class.class);boolean trueValue = parser.parseExpression(\"T(java.math.RoundingMode).CEILING \u003c T(java.math.RoundingMode) .FLOOR\")- getValue(Boolean.class);NOURStandardTypeLocator类的构造器如下:",
  "assets/net-img-1679326502697-f4c8fc21-f5e0-4fc6-9dbf-25df3c30bbd8-20230321112835-k16vvaj.png": "public class StandardTypeLocator implements TypeLocator {public StandardTypeLocator (@Nullable ClassLoader classLoader) {this. knownPackagePrefixes = new ArrayList(1);this.classLoader = classLoaderthis.registerImport(\"“java. lang\");",
  "assets/net-img-1679326509541-5069cadc-2cce-4828-bd30-07168d3e544a-20230321112835-inlo8kf.png": "9、构造函数你可以使用new操作符来调用构造函数。 你应该对所有类型使用完全限定类名，除了那些位于java.lang package (Integer ,Float, string ，等等)。 下面的例子展示了如何使用new操作符来调用构造函数:Inventor einstein = p.parseExpression(“new org.spring.samples.spel.inventor.Inventor('Albert Einstein’, 'German')\").getValue(Inventor.class);// create new Inventor instance within the addQ) method of Listp.parseExpression(“Members.add(new org.spring.samples.spel. inventor. Inventor(\"Albert Einstein’, '‘German'))\").getValue(societyContext) ;NOURWNEHoo",
  "assets/net-img-1679326521803-d557d4c4-d1cf-41e5-852d-7c30023996cf-20230321112835-39q9but.png": "10、变量可以使用#variableName 语法引用表达式中的变量。 变量是通过在EvaluationContext实现上使用setVariab1e方法设置的。下面的例子展示了如何使用变量。Inventor tesla = new Inventor(\"Nikola Tesla\",\"Serbian\");123 // 我们必须创建一个上下文，在上下文中定义变量4 EvaluationContext Context = Siip1leEvaluationContext.forReadwriteDataBinding(G .buildQ);56Context.setVvariable(C\"newName\"，Mike Tesla\");parser.parseExpression(\"name = #newName\").getValue(context, tesla);System.out.printIn(tesla.getName()) // \"Mike Tesla\"oo",
  "assets/net-img-1679326535090-4e0cea79-2afe-4605-82e5-e3dad1cee0e0-20230321112835-19o479d.png": "11、Bean 的引用如果计算上下文已经配置了bean解析器，那么我们可以使用\u0026符号从表达式中查找bean。下面的例子展示了如何做到这一点:NOUPRWNR要访问FactoryBean本身，应该在bean名称前加上' \u0026 FS. 下面的例子展示了如何做到这一点:omwnN// 定义一个容器ApplicationContext ctx = new AnnotationConfigApplicationContext(A.class);// 创建一个解析器ExpressionParser parser = new SpelExpressionParser();// 定义一个表达式上下文StandardEvaluationContext context = new StandardEvaluationContextQ);// 这个地方规定了我要从哪里查找bean ，我们的具体实现是BeanFactoryResol1ver，代表了从容器中获取context.setBeanResolver(new BeanFactoryResolver(ctx));Object bean = parser.parseExpression(\"GmessageListener\").getValue(context);javaExpressionParser parser = new SpelExpressionParser();StandardEvaluationContext context = new StandardEvaluationContext(Q);context.setBeanResolver (new MyBeanResolver());// This will end up calling resolve(context, \"\u0026foo\") on MyBeanResolver during evaluationObject bean = parser.parseExpression(\"\u0026foo\") .getValue (context) ;",
  "assets/net-img-1679326612554-852633bd-e2fb-4bcf-aeee-4519a86b87ef-20230321113609-bvb7gtu.png": "第三章容器和上下文!本章节，我们会深入了解【容器和上下文】，并从源码的角度做出深度的解析。目前，我们所接触的容器主要有servlet容器和springhlass, Ase]用中十分重要，大致有以下好处:1、统一管理，使用容器通常需要按照统一的规范，比如我们的jakarta Serviet™ 6.0规范，spring6.0规范等等。按照特定规范，编写规范的容器内容(servlet，bean) ,可以更好的管理容器内容的生命周期。2、隔高应用，屏蔽外界|将更多的精力放在业务上。3、分层管理，每个|一、认识bean工厂bean工厂是我们spni中我们需要注意几点:ng容器的载体，是spring8上下文的主要内容。下图展示了我们整个bean工厂的常见的接口和类以及功能,其的复杂性，更专注于业务开发。理论上，我们可以不明白容器是如何启动的，如何建立了连接等等，可以呈边界清晰，名司其职，如mvc的容器就和spring的容器不一样，又互相关联。1. 不同的接口展现了不同的能力，是对子类能力的抽象2. 抽象类构建通|方法的实现，是通上核心方法的具体实现3. 具体类完成特定功能的实现，是特定功能的具体实现有了这样的思想, 3我们才能更好的区阅读源码:",
  "assets/net-img-1679326933462-7a68f831-4756-4ccf-b880-4a5795c79fd4-20230321113609-d6b3wqf.png": "beanFactory接口这个接口表明实现类是一个bean工厂ListablebeanFactory接口枚举其容器内所有bean的能力抽象类AutowireCapabteBeanFactory接口实现了该接口的工厂拥有自动装配能力解决依赖注入的问题ConfigurableListableBeanFactory接口复合接口拥有以上所有能力HierachicalBeanFactory接口SingletonBeanRegistry接口该接口为我们的bean工厂提供了分层的能力该接口有注册单例bean的能力不同的工厂可以通过父子关系关联| |trConfigurableBeanFactory##0提供对bean工厂的一些额外配置的能力比如: 忽略一些类型的自动装配等|AbstractBeanFactory抽象类|AbstractAutowireCapableBeanFactory抽象类提供了一些公用方法4DefaultsingletonBeanRegistry类默认的单例bean注册器所有的bean都放在这里(三级缓存)4FactoryBeanRegistrySupport抽象类提供对FactoryBean的注册支持这里保存了所有的FactoryBeanBeanDefinitionRegistry接口实现该接口会拥有BeanDefinition的注册能力DefaultListableBeanFactory类|\u003e 这是我们最核心的一个bean工厂实现类|XmlBeanFactory接口这个接口表明其实现类是一个bean工厂",
  "assets/net-img-1679327309270-0a0b1173-b632-471d-a57a-ac2e93251435-20230321113609-v9c9rq5.png": "1、基础能力从接口的定义中，我们可以完全了解bean的基础功能，主要是获取bean以及获取bean的一些基本特征:ib245619public interface BeanFactory {// 这个变量在获取一个FactoryBean时使用，后边详细介绍String FACTORW_BEAN_PREFIX fps// 工厂的核心方法，提供了多种获取单个实例bean的能力Object getBean(String name) throws BeansException;\u003cT\u003e T getBean(String name, Class\u003cT\u003e requiredType) throws BeansException;Object getBean(String name, Object... args) throws BeansException;\u003cT\u003e T getBean(Class\u003cT\u003e requiredType) throws BeansException;\u003cT\u003e T getBean(Class\u003cT\u003e requiredType, Object... args) throws BeansException;\u003cT\u003e ObjectProvider\u003cT\u003e getBeanProvider(Class\u003cT\u003e requiredType) ;\u003cT\u003e ObjectProvider\u003cT\u003e getBeanProvider(ResolvableType requiredType) ;boolean containsBean(String name);boolean isSingleton(String name) throws NoSuchBeanDefinitionException;boolean isPrototype(String name) throws NoSuchBeanDefinitionException;@NullableClass\u003c?\u003e getType(String name) throws NoSuchBeanDefinitionException;Class\u003c?\u003e getType(String name, boolean allowFactoryBeanInit) throwsNoSuchBeanDefinitionException;ii29|}String[] getAliases(String name);",
  "assets/net-img-1679327621442-d038fdca-15f6-4e73-b6c4-34f23df11835-20230321113609-xxkydu5.png": "小插曲:ObjectProvider是为了解决隐式注和站时产生的问题spring4.3之前，我们的bean如果需要使用特定构造器进行构造时必须使用@Autowired尘1 @Service2 public class UserService {34 private UserDao userDao;5 @aAutowired6 public UserService(UserDao userDao) {7 this.userDao = userDao;8 }91}spring4.3之后，就可以不写，容器会降式为你注入:",
  "assets/net-img-1679327633142-a1c99cba-90a6-4ac7-9d77-4205347347d7-20230321113609-rz06jvs.png": "@Servicepublic class UserService {public UserService(UserDao userDao) {1234 private UserDao userDao;56 this.userDao = userDao;在当容器的bean可用且唯一时当然没有问题，但是容器如果没有这个bean就会出问题:1 Parameter 0 of constructor in com.ydlclass.UserService required a bean of type*com.ydlclass.UserDao' that could not be found.此时ObjectProvider就发挥作用了:",
  "assets/net-img-1679327656826-7c2ce79f-5c3d-4462-aa84-91bf2ccd0675-20230321113609-1yrxsd7.png": "@Servicepublic class UserService {public UserService(UserDao userDao) {1234 private UserDao userDao;56 this.userDao = userDao;8 }在当容器的hean可用目唯一时当然没有问题，但是容串如果没有这个bean就会出问题:1 Parameter 0 of constructor in com.ydiclass.UserService required a bean of type\"com.yd1iclass.UserDao’ that could not be found.此时ObjectProvider就发挥作用了:@servicepublic class UserService {public UserService(ObjectProvider\u003cUserDao\u003e userDao) {1234 private UserDao userDao:567 this.userDao = userDao.getIfUnique();这样注入的好处很明显，如果容器中不存在UserDao或者存在多个UserDao时，可以从容处再ObjectProvider接口如下，他继承自ObjectFactory，这个接口后边也会常用:站",
  "assets/net-img-1679327670995-860d75ce-acc9-4482-9b3b-c1cea1c8e41d-20230321113609-wkqv4rf.png": "工2.3451apublic interface \u003cT\u003e extends ObjectFactory\u003cT\u003e, Iterable\u003cT\u003e {T getObject(Object... args) throws BeansException;// 处理判断有可用的bean的时候我们怎么依，可以重写T getIfAvailable() throws BeansException;default T getIfAvailable(Supplier\u003cT\u003e defaultSupplier) throws BeansException {T dependency = getIfAvailable();return (dependency != null ? dependency : defaultSupplier.get());3default void ifAvailable(Consumer\u003cT\u003e dependencyConsumer) throws BeansException {T dependency = getIfAvailable();if (dependency != null) {dependencyConsumer . accept (dependency) ;// 处理判断只有唯一的bean的时候我们怎么做， 可以重写T getIfUnique() throws BeansException;default T getIfUnique(Supplier\u003cT\u003e defaultSupplier) throws BeansException {T dependency = getIfUnique();return (dependency != null ? dependency : defaultSupplier.get());了default void ifUnique(Consumer\u003cT\u003e dependencyConsumer) throws BeansException {T dependency = getIfUnique();if (dependency != null) {dependencyConsumer . accept (dependency) ;// 当匹配多个时，可以迁代处理Goverridedefault Iterator\u003cT\u003e iterator() {return streamQ.iterator();",
  "assets/net-img-1679327683188-cb5eb64d-123a-42be-a99c-12946df8ee3d-20230321113609-5da3672.png": "ObjectFactory作为一个对象工厂函数式接口更是简单:1 @FunctionalInterface2 public interface ObjectFactory\u003cT\u003e {34 [**5 * Return an instance (possibly shared or independent)6 * of the object managed by this factory.7 * @return the resulting instance8 * @throws BeansException in case of creation errors9 SA/10 T getObject() throws BeansException;1112 }修改UserService，新增login方;1 public class UserService {23 public void login(ObjectFactory\u003cUser\u003e userFactory) {4 User user = userFactory.getObject(Q);567System.out.println(\"使用[”+ user + \"]#H(THR\");}",
  "assets/net-img-1679327691440-f0bc44a7-db04-4013-bf9a-29ceeb16225c-20230321113609-lmz774x.png": "编写测试用例:1 @Test2 public void testObjectFactoryO{3 UserService service = new UserService();4 service. login(() -\u003e new User(\"tom\", 23));5 // 更复杂的实现，甚至可能是代理，如符合某种条件就生成代理6 service.1ogin(O -\u003e {7 int random = new Random() .nextInt(100) ;8 System.out.printIn(random) ;9 return random \u003e 50 ? new User(\"tom\", 24) : new User(\"jerry\", 33);10 vn:",
  "assets/net-img-1679327699321-ab9fd071-f087-4ad1-bc66-a8a4aea19070-20230321113610-omn7nvr.png": "2、更强的枚举能力LstableBeanFactory为后续的实现类提供了全强的枚学能力， 这些能力可能不对外公开，但是对于子类操作容器的操作bean十分重要，我们不妨看看他提供的接|1 public interface ListableBeanFactory extends BeanFactory {23 // 对BeanDefinition的细节操作4 boolean containsBeanDefinition(String beanName) ;5 int getBeanDefinitionCount();6 String[] getBeanDefinitionNames();8 // 根据类型检举出所有的Bean的名字9 String[] getBeanNamesForType(ResolvableType type);10 String[] getBeanNamesForType(G@Nullable Class\u003c?\u003e type);11 String[] getBeanNamesForType(G@Nullable Class\u003c?\u003e type, boolean includeNonSingletons, booleanallowEagerInit);1213 // 根据类型获取bean的一个map14 \u003cT\u003e Map\u003cString, T\u003e getBeansOfType(CNu]1able Class\u003cT\u003e type, boolean includeNonSingletons,boolean allowEagerInit)15 throws BeansException;1617 // 根据注解获得bean的名称18 String[] getBeanNamesForAnnotation(Class\u003c? extends Annotation\u003e annotationType);1920 // 根据注解获得bean21 Map\u003cString, Object\u003e getBeansWithAnnotation(Class\u003c? extends Annotation\u003e annotationType) throwsBeansException;2223 // 获取一个bean的注解24 \u003cA extends Annotation\u003e A findAnnotationOnBean(String beanName, Class\u003cA\u003e annotationType)25 throws NoSuchBeanDefinitionException;26",
  "assets/net-img-1679327961627-a3e82e4e-f33c-4221-aac4-b8ccebc6d9bc-20230321113610-naj3drf.png": "3、灵活的分层能力分层的能力十分重要，这在web工程至有典型应用，spring和springmvc会建立两个独立的上下文，后续涉及web工程时我们再深入讲解，分层之后各司其职，更易管理:public interface HierarchicalBeanFactory extends BeanFactory {123 // 返回bean工厂的父工厂4 @Nullable5 BeanFactory getParentBeanFactory();6// 此方法忽略祖先上下文定义的bean ，只会查询本地工厂boolean containsLocalBean(String name);oo910 }java可以写如下测试用例测试:1 public void testHierarchicalBeanFactory(){2 // 创建一个核心的工厂3 DefaultListableBeanFactory springFactory = new DefaultListableBeanFactory();4 springFactory. registerSingleton(\"user\",new User (\"#8 ii\", 31));5 // 创建一个web工厂，独自管理各个层级的内容6 DefaultListableBeanFactory webFactory = new DefaultListableBeanFactory();7 // 设置父子关联关系8 webFactory.setParentBeanFactory(springFactory);9 // 子工厂可以访问父工厂的bean10 System. out.printIn(webFactory. getBean(\"user\"));11)}",
  "assets/net-img-1679328045613-dd762572-c1ad-4fb8-8129-a181859a1b43-20230321113610-c6vl5ea.png": "4、构建和自动装配的能力T这个接口的实现及其复杂，主要是赋予子类自动装配的能力，是容器最核心的接口，这个接口定义了bean的创建以及装配能力，同时细粒度的控制了bean的生命周期:public interface AutowireCapableBeanFactory extends BeanFactory {123 // 不进行外部bean的自动装配的常量，BeanFactoryAware等和注释驱动的注入仍将被应用int AUTOWIRE_NO = 0;5 // 注入方式的常量，按类型或名称6 int AUTOWIRE_BY_NAME = 1;7 int AUTOWIRE_BY_TYPE = 2;8 int AUTOWIRE_CONSTRUCTOR = 3;910 hm11 // 用于创建实例的典型方法，12 ]/-------------------------------------------------------------------------13 \u003cT\u003e T createBean(Class\u003cT\u003e beanClass) throws BeansException;1415 // 自动装配的能力16 void autowireBean(Object existingBean) throws BeansException;718 // 对bean进行一些配置，如调用aware接口19 Object configureBean(Object existingBean, String beanName) throws BeansException;207a22 [faa a a a a23 // 用于对bean生命周期进行细粒度控制的专门方法24 // 主要是三块内容: 创建《实例化) ”属性填充《装配》 ”初始化25 12627 sa28 * 生命周期第一步《创建29 * 按照指定的装配策略根据c1ass生成一个完整的bean的实例30 * 执行bean的完全初始化，包括所有适用的BeanPostProcessors31 * @param dependencyCheck 是否对对象执行依赖项检查(不适用于自动装配构造函数，因此忽略)32 * @return 新的bean的实例33 bfError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/net-img-1679328170233-4627a758-917a-4e27-a51b-0009926fe494-20230321113610-u9lft1u.png": "34353637383404142Object createBean(Class\u003c?\u003e beanClass, int autowireMode, boolean dependencyCheck) throwsBeansException;/*** 生命周期第二步〈装配)* 通过应用after-instantiation 和property post-processing (例如注释驱动的注入)* 来填充给定的bean详例。idObject autowire(Class\u003c?\u003e beanClass, int autowireMode, boolean dependencyCheck) throwsBeansException;",
  "assets/net-img-1679328203343-54bcc5a4-89ee-441e-bcad-25f2dccbcb56-20230321113610-138677m.png": "65/*** 通过指定的自动装配方式来对给定的Bean进行自动装配。void autowireBeanProperties (Object existingBean, int autowireMode, boolean dependencyCheck)throws BeansException;[ee* 将具体值的bean定义的属性值应用到给定的bean实例。* 是属性填充的重要步邓afvoid applyBeanPropertyValues (Object existingBean, String beanName) throws BeansException;* 初始化前的回调* 将BeanPostProcessors应用到给定的现有bean实例* 调用它们的postProcessBeforeInitialization方法ahObject applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName)throws BeansException;pee* 初始化给定的原始bean ，应用工厂回调，如setBeanName和setBeanFactory，* 当然也包括应用所有的bean post processors",
  "assets/net-img-1679328223089-a3bf0e02-4324-4985-8b17-cab566580a39-20230321113610-8roq5mj.png": "Object initializeBlean(Object existingBean, String beanName) throws BeansException;/*** 初始化后的回调* 将BeanPostpProcessors应用到给定的现有bean实例* 调用它们的postProcessAfterInitialization方法es;Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName) throwsBeansException;/*** $5928 E Mbeanst tii* 使用Disposab1leBean接口定义的销毁方法afvoid destroyBean(Object existingBean) ;// 解决匹配注入点的方法// 在注入的时候通过以下的方法匹配属性与之对应的bean* 解析唯一匹配给定对象类型(如果有的话)的bean实例，包括它的bean名称。* 比如我们调用getBean(User.class) 会匹配一个或多个bean ，需要该方法进行选择* 这实际上是getBean(C1ass)的一个变体。\u003c\u003cT\u003e NamedBeanHolder\u003cT\u003e resolveNamedBean(Class\u003cT\u003e requiredType) throws BeansException;",
  "assets/net-img-1679328231757-6458ec6a-6676-4755-8257-f849cdfa0619-20230321113610-tw7blvg.png": "[ee* 解析给定bean名称的bean实例， 向目标工厂方法公开提供依赖描述符。* 这实际上是getBean(String，C1ass)的一个变体，sf)Object resolveBeanByName(String name, DependencyDescriptor descriptor) throws BeansException;/*** 针对此工厂中定义的bean解析指定的依赖项，注入的时候很有用。* 通过一个依赖的描述《对方法，字段，构造器的抽象) ，获得一个beanai@NullableObject resolveDependency(DependencyDescriptor descriptor, G@Nullable String requestingBeanName)throws BeansException;",
  "assets/net-img-1679328499262-a353f7ef-8aa8-4f98-9907-ed7f5670096c-20230321113610-xnsrjmu.png": "java接口中我们遇到如下的类，这里简单看看:NamedBeanHolder简单的包装了beanName和beanlnstance，我们通过【别名或者类型】查找bean时可以Ni反|BeifFi)1 public class NamedBeanHolder\u003cT\u003e implements NamedBean {23 private final String beanName;45 private final T beanInstance;6}",
  "assets/net-img-1679328512077-339dc971-4070-4524-9e3a-dbce38573cda-20230321113610-y272baz.png": "DependencyDescriptor是一个依赖措述符，这个类可以包装构造函数参数、方法参数或字段，人允许统一访问它们的元数据，这在入的时候很有用，比如给定一个【构造参数的描述】或【字段的描述】或【setter方法】，找到与之匹配的bean。1 public class DependencyDescriptor extends InjectionPoint implements Serializable {72 private final Class\u003c?\u003e declaringClass;3 @Nullableprivate String methodName;@Nul lableprivate Class\u003c?\u003e[] parameterTypes;private int parameterIndex;Lau 上上@Nullable9 private String fieldName;10 private final boolean required;11 private final boolean eager;12 private int nestingLevel = 1;13 @Nullable14 private Class\u003c?\u003e containingClass;15 G@Nul11able16 private transient volatile ResolvableType resolvableType;17 @Nullable18 private transient volatile TypeDescriptor typeDescriptor;",
  "assets/net-img-1679328551345-22b703eb-1bdc-459d-849a-0a0b56950b4b-20230321113611-ksb6jnt.png": "5、更强的配置能力这个bean工厂接口并不用于正常的应用程序代码中。这个扩展接口只是为了允许框架内部的即插即用和对bean工厂配置方法的特殊访问，具体如下:public interface ConfigurableBeanFactory extends HierarchicalBeanFactory, SingletonBeanRegistry {123 // 标准单例作用域的范围标识符:\"singleton\"。自定义作用域可以通过registerScope添加。4 String SCOPE_SINGLETON = “singleton”;5 String SCOPE_PROTOTYPE = “prototype”;6[**8 * 设置此bean工厂的父级。9 \u003c/10 void setParentBeanFactory(BeanFactory parentBeanFactory) throws I11egalStateException;1112 713 * 将class 1oader设置为加载中的bean类，默认是线程上下文类装入器。14 Lf15 void setBeanClassLoader(@Nullable ClassLoader beanClassLoader) ;1617 [fs18 * 返回这个工厂的的class 1oader，用于加载bean类19 */20 @Nullable21 ClassLoader getBeanClassLoader();2223 /**24 * 指定一个临时ClassLoader用于类型匹配，默认为none。25 * 如果涉及到加载时织入，则通常只指定临时ClassLoader ，以确保实际的bean类尽可能延迟地加载。26 * 一旦BeanFactory完成引导阶段，临时加载器就会被移除。27 2人28 void setTempClassLoader(G@Nu11ab1le ClassLoader tempClassLoader) ;2930 // 返回用于类型匹配的临时ClassLoader，31 ClassLoader getTempClassLoader();323334 (pes35 * 设置是天缓存bean元数据，例如给定的bean定义(以合并的方式)和resolved bean classese36 * 关闭此标志可启用bean Definition和特定bean类的热刷新。如果该标志关闭，则任何bean详例的创建都将重新查询bean class 1oader以获得新解析的类。w局四",
  "assets/net-img-1679328643343-fb2c7927-7d93-4506-b31e-d8a24a6fd9ef-20230321113611-fomgdvd.png": "53+Yhvoid setCacheBeanMetadata(boolean cacheBeanMetadata) ;boolean isCacheBeanMetadata() ;// 指定bean的表达式分析器void setBeanExpressionResolver(@Nullable BeanExpressionResolver resolver);BeanExpressionResolver getBeanExpressionResolver();// 设置和获取转化服务void setConversionService(@Nullable ConversionService conversionService);ConversionService getConversionService();// 添加属性编辑器void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar);void registerCustomEditor(Class\u003c?\u003e requiredType, Class\u003c? extends PropertyEditor\u003epropertyEditorClass);void copyRegisteredEditorsTo(PropertyEditorRegistry registry);* 设置一个自定义类型转换器，这个BeanFactory应该使用它来转换bean属性值、构造函数参数值等。* 这将材盖默认的PropertyEditor机制，从而使任何自定义编辑器或自定义编辑器注册器变得无关紧要。TypeConverter getTypeConverter();/*** 为注入的值添加一个String解析器，如“aa${fbbjcc”。7,",
  "assets/net-img-1679328674692-d1fa56ab-9c6c-48c1-aaa8-0b3b08a9f852-20230321113611-ndberxv.png": "void addEmbeddedvalueResolver(SstringvalueResolver valueResolver);boolean hasEmbeddedValueResolver();String resolveEmbeddedvalue(String value);// 添加和获取bean的后置处理器void addBeanPostProcessor(BeanPostProcessor beanPostProcessor) ;int getBeanPostProcessorCount();// 注册自定义的作用范围void registerScope(String scopeName, Scope scope);String[] getRegisteredScopeNames () ;Scope getRegisteredScope(String scopeName);//为这个bean工厂设置{ecode App1icationstartup},用来记录启动步骤void setApplicationStartup(ApplicationStartup applicationStartup) ;ApplicationStartup getApplicationStartup();// 从一个bean工厂拷贝配置void copyConfigurationFrom(ConfigurableBeanFactory otherFactory);",
  "assets/net-img-1679328727359-31a25960-9055-4a4f-8996-d4b833d03eb1-20230321113611-n4tc6kp.png": "// 注册别名void registerAlias(String beanName, String alias) throws BeanDefinitionStoreException;// 获得合并的bean的定义，后边细讲BeanDefinition getMergedBeanDefinition(String beanName) throws NoSuchBeanDefinitionException;// @BELS beanboolean isFactoryBean(String name) throws NoSuchBeanDefinitionException;// 控制指定bean当前的创建状态。仅供容器内部使用。void setCurrentlyInCreation(String beanName, boolean inCreation);boolean isCurrentlyInCreation(String beanName) ;",
  "assets/net-img-1679328766699-5dd418d5-07a0-4ed7-93a6-4e45df9c2da7-20230321113611-fxqbzj1.png": "97 // 为给定的bean注册一个依赖bean，在给定的bean被销毁之前销毁它。98 void registerDependentBean(String beanName, String dependentBeanName) ;99100 // 如果有的话，返回依赖于指定bean的所有bean的名称。101 String[] getDependentBeans(String beanName) ;102103 // MORAN» iB GHEE bean fh tk HPT A beanfl 3 fr -104 String[] getDependenciesForBean(String beanName) ;105106 // 根据bean名称销毁给定的bean详例(通常是从该工厂获得的原型实例) 。107 void destroyBean(String beanName, Object beanInstance);108109 // 销毁指定的【作用域bean]110 void destroyScopedBean(String beanName) ;111112 // 销毁此工厂中的所有单例bean，包括已注册为一次性的内部bean 。在工厂关闭时被召回。113 void destroySingletons();114 3}",
  "assets/net-img-1679328958262-231bb1aa-98f8-4a29-975d-551382a1df4b-20230321113611-bw12t3c.png": "6、更多配置项AbstractAutowi reCapableBeanFactory 为子类提供了更多的配秆项如下;12ms456public abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFactoryimplements AutowireCapableBeanFactory {// 详例化策略，默认使用Cg1ibsubclassingInstantiationstrategyprivate InstantiationStrategy instantiationStrategy;// 方法参数名解析策略@Nullableprivate ParameterNameDiscoverer parameterNameDiscoverer = newDefaultParameterNameDiscoverer();// 是理允许循环引用《会详细介绍)private boolean allowCircularReferences = true;// 是理在循环引用的情况下注入一个原始bean实例，即使注入的bean最终被包装类。private boolean allowRawInjectionDespiteWrapping = false;// 要在依赖项检查和自动装配时忽略的依赖项类型，如类对象的集合: 例如，字符串。默认值为none。private final Set\u003cClass\u003c?\u003e\u003e ignoredDependencyTypes = new HashSet\u003c\u003e();// 在依赖项检查和自动装配时忽略的依赖项接口，如类对象集。缺省情况下，只有BeanFactory接口被忽略。private final Set\u003cClass\u003c?\u003e\u003e ignoredDependencyInterfaces = new HashSet\u003c\u003e();// 当前创建的bean的名称，保存在ThreadLocal中。private final NamedThreadLocal\u003cString\u003e currentlyCreatedBean = new NamedThreadLocal\u003c\u003eC\"Currently created bean\");",
  "assets/net-img-1679328973012-18509de0-68c2-40da-bb37-93ed27e8f9f4-20230321113611-24b7sp9.png": "// 未完成的FactoryBean实例的缓存private final ConcurrentMap\u003cString, BeanWrapper\u003e factoryBeanInstanceCache = newConcurrentHashMap\u003c\u003e();// 每个工厂类的候选工厂方法缓存private final ConcurrentMap\u003cClass\u003c?\u003e, Method[]\u003e factoryMethodCandidateCache = newConcurrentHashMap\u003c\u003e();// 过滤后的PropertyDescriptors缓存:bean类到PropertyDescriptor数组。private final ConcurrentMap\u003cClass\u003c?\u003e, PropertyDescriptor[]\u003e filteredPropertyDescriptorsCachenew ConcurrentHashMap\u003c\u003e();",
  "assets/net-img-1679329156187-03d00e07-f3ed-4c15-8451-3e2b08f66cb9-20230321113611-zqd3qhd.png": "wipublic AbstractautowireCdpableBeanFactory() {superQ;ignoreDependencyInterface(BeanNameAware. class);ignoreDependencyInterface(BeanFactoryAware. class);ignoreDependencyInterface(BeanClassLoaderAware. class);this.instantiationStrategy = new CglibSubclassingInstantiationStrategy();public AbstractAutowireCapableBeanFactory(@Nullable BeanFactory parentBeanFactory)thisO;setParentBeanFactory(parentBeanFactory) ;// 设置初始化策略，这里用到了策略设计模式public void setInstantiationStrategy(InstantiationStrategy instantiationStrategy) {this.instantiationStrategy = instantiationStrategy;}public InstantiationStrategy getInstantiationStrategy() {return this. instantiationStrategy;",
  "assets/net-img-1679329182311-14de9e9b-a0f9-4e5e-9d93-9564cab2d519-20230321113612-rbkv8ax.png": "60616263// 设置参数名称解析器public void setParameterNameDiscoverer(@Nullable ParameterNameDiscovererparameterNameDiscoverer) {this.parameterNameDiscoverer = parameterNameDiscoverer;}public ParameterNameDiscoverer getParameterNameDiscoverer() {return this.parameterNameDiscoverer;}// 后边会详细讲解// 设置是否允许bean之间的循环引用-并自动尝试解析它们。// 默认为\"true”。springboot中默认是false。// 注意:通常建议不要依赖bean之间的循环引用。// 重构您的应用程序逻辑，使涉及的两个bean委托给封装它们的公共逻辑的第三个bean 。",
  "assets/net-img-1679329189732-54e623a7-6209-445a-a764-84aada9c1453-20230321113612-suq0501.png": "理) 。public void setA11owCircularReferences (boolean allowCircularReferences) {this.allowCircularReferences = allowCircularReferences;public boolean isAllowCircularReferences() {return this.allowCircularReferences;[*** 设置是否允许将一个bean的原始实例注入到其他bean的属性中尽管注入的bean最终会被包装(例如，通过AOP自动代*这只会在循环引用无法通过其他方式解决的情况下作为最后的手段使用:从本质上讲，宁愿注入一个原始实例，也不愿整个bean装配过程失败。* 从Spring 2.0开始，默认为“false\"”。*/public void setAllowRawInjectionDespiteWrapping(boolean allowRawInjectionDespiteWrapping) {this.allowRawInjectionDespitewrapping = allowRawInjectionDespiteWrapping;办}public boolean isAllowRawInjectionDespitewrapping() {return this.allowRawInjectionDespitewrapping;[*** 忽略自动装配的给定依赖类型:* 例如，string。默认值为none。public void ignoreDependencyType(Class\u003c?\u003e type) {this. ignoredDependencyTypes . add(type) ;} I// 忽略自动装配的给定依赖接口。public void ignoreDependencyInterface(Class\u003c?\u003e ifc) {this. ignoredDependencyInterfaces.add(ifc);",
  "assets/net-img-1679329251067-3ac227e6-4649-4d19-ac0c-7de41f87110d-20230321113612-t1gykwu.png": "如下的测试用例中我们使用spring的简单实例化策略和BeanWrapper工具，实现了bean的实例化和属性填充:- -123456@Testpublic void testInstantiation() throws ClassNotFoundException {}// 编写bean的定义RootBeanDefinition beanDefinition = new RootBeanDefinition();beanDefinition.setBeanClassName(\"com.ydiclass.User\");MutablePropertyValues propertyValues = new MutablePropertyValues();propertyValues.addPropertyValue(\"name\",\"itta# ii\") ;propertyValues.addPropertyValue(\"age\", 32);beanDefinition. setPropertyValues (propertyValues) ;beanDefinition. resolveBeanC lass (Thread. currentThread() . getContextClassLoader());// 我们模仿一个beanDefinition如何变成一个beanDefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();beanFactory. registerBeanDefinition(\"user\" ,beanDefinition) ;// 实例化SimpleInstantiationStrategy instantiationStrategy = new SimpleInstantiationStrategy();Object user = instantiationStrategy. instanti 全nition, “user\", beanFactory);// 属性填充BeanWrapper wrapper = new BeanWrapperimp] (user);wrapper. setPropertyValues (beanDefinition. getPropertyValues());logger. info(\"The user is [{}]\",user);这个小例子“定要好好看-看，对后续的内容很有帮助。我们可以阅读一下简单的实例化策略:wnionan@Overridepublic Object instantiate(RootBeanDefinition bd, @Nullable String beanName, BeanFactory owner) {//在将XML 配置解析成BeanDefinition 的时候，bean标签的1ookup-method和rep1aced-method会被分别解析成LookupOverride 和ReplaceOverride 对象，添加到BeanDefinition 的methodoverrides成员变量中。它们的作用是通过配置来材盖Bean 原有的方法实现。这个我们一会看。计〈!bd.hasMethodoverrides(O) {Constructor\u003c?\u003e constructorTouse;synchronized (bd.constructorArgumentLock) {constructorToUse = (Constructor\u003c?\u003e) bd.resolvedConstructorOrFactoryMethod;if (constructorToUse == null) {final Class\u003c?\u003e clazz = bd.getBeanClass();if (clazz.isInterfaceQ)) {",
  "assets/net-img-1679329288336-e808908d-fb81-4d0b-9b3e-16d2ba69e0a8-20230321113612-4zqrcb7.png": "16 了17 catch (Throwable ex) {18 throw new BeanInstantiationException(clazz, \"No default constructor found\",ex);19 320 了eat 322 // 直接使用原生的反射生成实例23 return BeanUtils. instantiateClass (constructorTouse) ;24 }25 else {26 // 有需要重写的方法，我们则生成一个cg91ib的子类27 return instantiatewithMethodInjection(bd, beanName, owner);28 3",
  "assets/net-img-1679329330548-41c65493-3279-49da-b996-afc2c4ac305e-20230321113612-rp8iknv.png": "1、lookup-method注入lookup-method注入是spring动态改变bean下面的例子，告诉我们这个方法怎么使用:回法的实现。指定方法的返回人为某个已经存在的bean。1 public abstract class CommandManager {23 public Object process(Object commandstate) {4 // grab a new instance of the appropriate Command interface5 Command command = createCommand();6 // set the state on the (hopefully brand new) Command instance7 command. setState(commandstate) ;8 return command. execute() ;S }1011 // okay... but where is the implementation of this method?12 protected abstract Command createCommand();13/} if配置如下:1 \u003cbean id=\"manager\"class=\"com.Xxxx.1ookupmethod.CommandManager \"\u003e2 // createCommand方法将返回commad这个bean3 \u003clookup-method bean=\"command\" name=\"createCommand\"/\u003e4 \u003c/bean\u003e5 \u003cbean id=\"command\" class=\"com. xxx. lookupmethod.MyCommand\"\u003e6 \u003c/bean\u003e",
  "assets/net-img-1679329349817-db5d1bb5-a0cc-4756-8492-9b1b8248020d-20230321113612-baea9vf.png": "2、replaced-method注入replaced-method注入是spring动态改变bean方法的一种实现。他可以改变的方法执行丈辑，将方法进行车换，定义蔡换方法的类(需要继承接口org.springframework.beans.factory.support.MethodReplacer) 接口。1 public class MyValueCalculator {2 public String computeValue(String input) {3 // some real code...4 +5; // some other methods...6 389 * meant to be used to override the existing computeValue(String)10 * implementation in MyvqlueCalculator11| #/12 public class ReplacementComputeValue implements MethodReplacer {1314 public Object reimplement(Object o. Method m, Object[] args) throws Throwable {15 // get the input value. work with it. and return a computed result16 String input = (String) args[0]:17 sae18 return ...;rk) }",
  "assets/net-img-1679329358838-1a0a8fbf-220c-4304-a481-3113bb34f275-20230321113612-rro44w5.png": "配置:1 \u003cbean id=\"myValueCalculator\" class=\"x.y.z.MyValueCalculator\"\u003e2 \u003c!-- arbitrary method replacement --\u003e3} \u003creplaced-method name=\"computeValue\" replacer=\"replacementComputeValue\"\u003e4 \u003carg-type\u003eString\u003c/arg-type\u003e5 \u003c/replaced-method\u003e6 \u003c/bean\u003e8 \u003cbean id=\"replacementComputeValue\" class=\"a.b.c.ReplacementComputeValue\"/\u003e: 从源码中得知，基于以上两种方式注入后，bean需要使用cglib生成子类完成目标，由于采icglib4成之类的方式，所以需要用来动态注入的类，不能是final修饰的，需要动态注入的方法，也不能是final修饰的。",
  "assets/net-img-1679329371744-78e87e42-a60b-45c5-a7bf-35f2fcb66226-20230321113612-tc974ij.png": "7、工厂的生命周期bean工厂的生命周划比较简单: start-\u003eonRefresh-\u003eRunning-\u003eonClose-\u003estop每一个生命周期节点都会完成大量的工作，我们后边的内容会详细介绍:public interface nage123 void startQ;45 void stop();67 boolean isRunning();8 }91011 public interface LifecycleProcessor extends Lifecycle {13 /**14 * 上下文刷新通知，例如自动启动组件。1516 void onRefresh();7",
  "assets/net-img-1679329387840-7662a31f-7f82-4ef6-b099-5d44bf0d034b-20230321113612-4fts8yh.png": "上下文关闭阶段的通知，例如自动停止组件。/void onClose();",
  "assets/net-img-202004272126341-20230330160843-2wwebyw.png": "但AbstractBealthrow new BeanCreationException (mbd. getResourceDescription(), be”+ beanName + ”’ depends on missing bean ’” + dep + ”// Create bean instance.if (mbd. isSingleton()) {sharedInstance = getSingleton(beanName, () -\u003e {try {return createBean(beanName, mbd, args) ;}catch (BeansException ex) {// Explicitly remove instance from singleton cache:|It might hay// eagerly by the creation process, to allow for cifcular refere// Also remove any beans that received a temporary feference todestroySingleton (beanName) ;throw ex;bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd) ;else if (mbd. isPrototype()) { https://blog.csdn.net/qq_36882793",
  "assets/net-img-202004272126341-20230330171432-60n5we0.png": "但AbstractBealthrow new BeanCreationException (mbd. getResourceDescription(), be”+ beanName + ”’ depends on missing bean ’” + dep + ”// Create bean instance.if (mbd. isSingleton()) {sharedInstance = getSingleton(beanName, () -\u003e {try {return createBean(beanName, mbd, args) ;}catch (BeansException ex) {// Explicitly remove instance from singleton cache:|It might hay// eagerly by the creation process, to allow for cifcular refere// Also remove any beans that received a temporary feference todestroySingleton (beanName) ;throw ex;bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd) ;else if (mbd. isPrototype()) { https://blog.csdn.net/qq_36882793",
  "assets/net-img-20200427213750160-20230330160843-btra0vo.png": "WOrK / Bi beans /~ iactoryY/ ” SUppOrt / \"e’ ADstractbeanractorynFactory.java \u003c Gj AbstractBeanFactor DefaultSingletonBeanRegistry.java *AbstractBeanDefirthrow new BeanCreationException (mbd. getResourceDescription(), beanNar”+ beanName + ”’ depends on missing bean” + dep +”, «// Create bean instance.if (mbd. isSingleton()) {sharedInstance = getSingleton(beanName, () -\u003e {try if1catch (BeansException ex)return createBean ( args)// Explicitly remove instanceNGKom singleton cache: It might have be:// eagerly by the creation procesSMto allow for circular reference :// Also remove any beans that received 9 HHT APE HEBESH PE the |destroySingleton (beanName) ;throw ex;Webean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd) ;else if (mbd. isPrototype()) {SERIES) § CHEESE P PD https:/blog.csdn.netiqq_36882793",
  "assets/net-img-20200427213750160-20230330171432-ro26vvn.png": "WOrK / Bi beans /~ iactoryY/ ” SUppOrt / \"e’ ADstractbeanractorynFactory.java \u003c Gj AbstractBeanFactor DefaultSingletonBeanRegistry.java *AbstractBeanDefirthrow new BeanCreationException (mbd. getResourceDescription(), beanNar”+ beanName + ”’ depends on missing bean” + dep +”, «// Create bean instance.if (mbd. isSingleton()) {sharedInstance = getSingleton(beanName, () -\u003e {try if1catch (BeansException ex)return createBean ( args)// Explicitly remove instanceNGKom singleton cache: It might have be:// eagerly by the creation procesSMto allow for circular reference :// Also remove any beans that received 9 HHT APE HEBESH PE the |destroySingleton (beanName) ;throw ex;Webean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd) ;else if (mbd. isPrototype()) {SERIES) § CHEESE P PD https:/blog.csdn.netiqq_36882793",
  "assets/net-img-20200510193917314-20230330161026-z2n4wp4.png": "| springframework ) Bll beans ) 四factory ) 四supportctBeanFactory.java * (@j AbstractBeanDefinitionjava 关el ty* @see #autowireConstructort doCreateBean (final ytring beanName, final RootBeanDefinition mbd, final @Nullable Object“/// Instantiate the bean.(Gy AbstractAutowireCapableBeanFactory.java * | BeanWrapperjava * Inst(|) Match Case [| Words (| Regex ?protected 0bjdthrow:BeanWrapper instanceWrapper = null;if (mbd. isSingleton()) 4|if (instanceWrapper == null) {instanceWrapper = this. factoryBeanInstanceCache. remove (beanName) ;instancellrapper = createBeanInstance(beanName, mbd, args)}final Object bean = instancellrapper. getWrappedInstance() ;Class\u003c?\u003e beanType = instancellrapper. getWrappedClass () ;if (beanType != NullBean. class) {mbd. resolvedTargetType = beanType;// Allow post-processors to modify the merged bean definition.synchronized (mbd. postProcessingLock) {if (!mbd. postProcessed) {try {、 https:/blog.csdn.netiqq_36882793",
  "assets/net-img-20200510193917314-20230330171249-nvj29ee.png": "| springframework ) Bll beans ) 四factory ) 四supportctBeanFactory.java * (@j AbstractBeanDefinitionjava 关el ty* @see #autowireConstructort doCreateBean (final ytring beanName, final RootBeanDefinition mbd, final @Nullable Object“/// Instantiate the bean.(Gy AbstractAutowireCapableBeanFactory.java * | BeanWrapperjava * Inst(|) Match Case [| Words (| Regex ?protected 0bjdthrow:BeanWrapper instanceWrapper = null;if (mbd. isSingleton()) 4|if (instanceWrapper == null) {instanceWrapper = this. factoryBeanInstanceCache. remove (beanName) ;instancellrapper = createBeanInstance(beanName, mbd, args)}final Object bean = instancellrapper. getWrappedInstance() ;Class\u003c?\u003e beanType = instancellrapper. getWrappedClass () ;if (beanType != NullBean. class) {mbd. resolvedTargetType = beanType;// Allow post-processors to modify the merged bean definition.synchronized (mbd. postProcessingLock) {if (!mbd. postProcessed) {try {、 https:/blog.csdn.netiqq_36882793",
  "assets/net-img-20200516230641191-20230330160843-f6jz5tp.png": "从组存中获取bean(this.singletonObjects.get(beanName};)检测bean是否|记录bean正在创建beforeSingletonCreation(beanName)v调用ObjectFactory HYBRBbeansingletonFactory.getObject0里移除bean的=afterSingletonCreation由处理各种辅助状态addSingleton(beanName, singletonObject)lbean1. inCreationCheckExclusions 中不包含beanName2. %§ beanName 添加到singletonsCurrentlylnCreation 中成功3. REED LRSM1. inCreationCheckExclusions 中不包含beanName2.咨beanName 物除到singletonsCurrentlylnCreation 中成功3. 不满足以上两条抛出异常1. singletonObjects 添加beanName2. singletonFactories 移除beanName3. earlySingletonObjects 移除beanName4, registeredSingletons 添jnbeanName",
  "assets/net-img-20200516230641191-20230330171432-eei4iio.png": "从组存中获取bean(this.singletonObjects.get(beanName};)检测bean是否|记录bean正在创建beforeSingletonCreation(beanName)v调用ObjectFactory HYBRBbeansingletonFactory.getObject0里移除bean的=afterSingletonCreation由处理各种辅助状态addSingleton(beanName, singletonObject)lbean1. inCreationCheckExclusions 中不包含beanName2. %§ beanName 添加到singletonsCurrentlylnCreation 中成功3. REED LRSM1. inCreationCheckExclusions 中不包含beanName2.咨beanName 物除到singletonsCurrentlylnCreation 中成功3. 不满足以上两条抛出异常1. singletonObjects 添加beanName2. singletonFactories 移除beanName3. earlySingletonObjects 移除beanName4, registeredSingletons 添jnbeanName",
  "assets/net-img-20200516231953570-20230330160843-44v4g6k.png": "根据mdb和beanName 解析出ClassresolveBeanClass(mbd, beanName)y验证及准备要差的方法mbdToUse.prepareMethodOverrides0;里调用后处理器的方法resolveBeforelnstantiation(beanName,mbdToUse)里开始真正创建的beandoCreateBean(beanName, mbdToUse args)返回bean一1, InstantiationAwareBeanPostProcessor.postProcessBeforelnstantiation2. 佑第一步获取的bean不为宝，则调用BeanPostProcessor.postProcessAfternitialization",
  "assets/net-img-20200516231953570-20230330171432-atjy46b.png": "根据mdb和beanName 解析出ClassresolveBeanClass(mbd, beanName)y验证及准备要差的方法mbdToUse.prepareMethodOverrides0;里调用后处理器的方法resolveBeforelnstantiation(beanName,mbdToUse)里开始真正创建的beandoCreateBean(beanName, mbdToUse args)返回bean一1, InstantiationAwareBeanPostProcessor.postProcessBeforelnstantiation2. 佑第一步获取的bean不为宝，则调用BeanPostProcessor.postProcessAfternitialization",
  "assets/net-img-20200517220309366-20230330161026-1addv26.png": "十(@) getBean (String name) Object(®) getBean (Class\u003cT\u003e requiredType) 了(@) getBean (String name, Class\u003cT\u003e requiredType) 了(B) getBean (Class\u003cT\u003e requiredType, Object... arghtipsi/blog.csdn.netiqg_36882",
  "assets/net-img-20200517220309366-20230330171249-dah319f.png": "十(@) getBean (String name) Object(®) getBean (Class\u003cT\u003e requiredType) 了(@) getBean (String name, Class\u003cT\u003e requiredType) 了(B) getBean (Class\u003cT\u003e requiredType, Object... arghtipsi/blog.csdn.netiqg_36882",
  "assets/net-img-20200521215850363-20230330161026-ypmszny.png": "®) Evaluate xExpression:4 aeUse Ctrl+Shift+Enter to add to WatchesResult:00 result = (ConstructorArgumentValues@5324}Y © indexedArgumentValues = {LinkedHashMap@5328} size = 2ey = {Integer@5334} 0\u003e = value = {ConstructorArgumentValues$ValueHolder@5335}了\u0026 (integer@5336} 1 -\u003e {ConstructorArgumentValues$ValueHolder@5337}\u003e 5 key = {Integer@5336} 1alue = {ConstructorArgumentValues$ValueHolder@5337}Y ® genericArgumentValues = (Arraylist@5329} size = 1\u003e © 0 = {ConstructorArgumentValues$ValueHolder@5339}https AfXBIWER netigg_ Si880793",
  "assets/net-img-20200521215850363-20230330171249-znshsc3.png": "®) Evaluate xExpression:4 aeUse Ctrl+Shift+Enter to add to WatchesResult:00 result = (ConstructorArgumentValues@5324}Y © indexedArgumentValues = {LinkedHashMap@5328} size = 2ey = {Integer@5334} 0\u003e = value = {ConstructorArgumentValues$ValueHolder@5335}了\u0026 (integer@5336} 1 -\u003e {ConstructorArgumentValues$ValueHolder@5337}\u003e 5 key = {Integer@5336} 1alue = {ConstructorArgumentValues$ValueHolder@5337}Y ® genericArgumentValues = (Arraylist@5329} size = 1\u003e © 0 = {ConstructorArgumentValues$ValueHolder@5339}https AfXBIWER netigg_ Si880793",
  "assets/net-img-20200530133426965-20230330171603-f7e6dj1.png": "EEE .AutowiredAnnotationBeanPostProcessor.java \u003e|public void setRequiredParameterValue (boolean requiredParameterValue) {IM pom.xml (springboot-demo) * @ SpringbootDemoApplicationjava * @ UsernamePasswordAuthent222 this. requiredParameterValue = requiredParameterValue;221 public void setOrder(int order) { this. order = order; }22 @0verride30 Of public int getOrder() { return this. order; }235 Of @ public void setBeanFactory (BeanFactory beanFactory) {2 if (! (beanFactory_instanceof ConfigurableListableBeanFactory)) {throw new I1legalArgumentException (2 “AutowiredAnnotationBeanPostProcessor requires a ConfigurableListableBeanFactory: ”+ beanFactory) ;2 }24 this. beanFactory = (ConfigurableListableBeanFactory) beanFactory;https://blog.csdn.net/qq_36882793Error in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/net-img-20200530133426965-20230330172915-c8hm3hj.png": "EEE .AutowiredAnnotationBeanPostProcessor.java \u003e|public void setRequiredParameterValue (boolean requiredParameterValue) {IM pom.xml (springboot-demo) * @ SpringbootDemoApplicationjava * @ UsernamePasswordAuthent222 this. requiredParameterValue = requiredParameterValue;221 public void setOrder(int order) { this. order = order; }22 @0verride30 Of public int getOrder() { return this. order; }235 Of @ public void setBeanFactory (BeanFactory beanFactory) {2 if (! (beanFactory_instanceof ConfigurableListableBeanFactory)) {throw new I1legalArgumentException (2 “AutowiredAnnotationBeanPostProcessor requires a ConfigurableListableBeanFactory: ”+ beanFactory) ;2 }24 this. beanFactory = (ConfigurableListableBeanFactory) beanFactory;https://blog.csdn.net/qq_36882793Error in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid boxError in boxClipToRectangle: box outside rectangleError in pixScanForForeground: invalid box",
  "assets/net-img-20200613132256676-20230330173421-6f005fc.png": "转Project w © = \u0026 —* M pom.xml (spring-jdbc-demo) * @ MybatisAutoConfiguration.java 大spring.factories * @ MybatisLanguV Bil Maven: org.mybatis.spring.boot:mybatis-spring-boot-autoconfigure:2.1.3 # Auto ConfigureY [A mybatis-spring-boot-autoconfigure-2.1.3,jar library root . . . .org. springframework. boot. autoconfigure. EnableAutoConfiguration=\\Y Bq META-INF\u003e By maven org. mybatis. spring. boot. autoconfigure. MybatisLanguageDriverAutoConfiguration, \\‘@additional-spring-configuration-metadata,json org. mybatis. spring. boot. autoconfigur ybatistutoContiguratior| MANIFEST.MF s.rfa Spring-autocontiguré-metadata.propertiesi spring-configuration-metadata.jsonv 中orgY BymybatisY By springY BybootY By autoconfigure‘4 ConfigurationCustomizerMybatisLanguageDriverAutoConfiguration(Q MybatisPropertiesQ SpringBootVFS\u003e ili Maven: org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.3\u003e Bij Maven: org.mybatis:mybatis:3.5.5 httpsi/blog.csdn.netqq_36882793",
  "assets/net-img-20200613143238665-20230330173421-qbm8fy8.png": "sources | 吧application.yml@ SalSessionFactoryBeanjava * @ MybatisProperties.java \u003c ¢@ application.ym ~:server!port: 8080mybatis:configuration:use-generated-keys: trueuse-column-label: truemap-underscore-to-camel-case: truev17 4 mybatis-config.xml\u003c?xml version=\"1.0\" encoding=\"UIF-8” ?\u003e9@0EGePUBLIC“-//mybatis. org//DTD Config 3.0//EN”“http: //mybatis. org/dtd/mybatis-3-config. dtd “\u003e“!-- 配置文件的根元素--\u003e\u003c!DOCTYPE configuration\u003cconfiguration\u003e\u003csettings\u003e\u003c!--使用jdbc的getGeneratedKeys获取数据库自增主键值--\u003e《setting name= \"useGeneratedKeys”value= true\"/\u003e\u003c!--使用列标签苦换列别名默认未true--\u003e\u003csetting name=\"useColumnLabel” value=\"true” /\u003e\u003c!--开启驼峰式命名转换:Table{fcreate_time} -\u003e Entity{createfim\u003csetting name=\"mapUnderscoreToCamelCase” value=\"true” /\u003e\u003c/configuration\u003e https://blog.csdn.net/qq_36882793",
  "assets/net-img-2020061315061062-20230330173421-c4tqfrk.png": "https://blog.csdn.net/qq_36882793",
  "assets/net-img-2020061316555275-20230330173421-m0vyxes.png": "https://blog.csdn.net/qq_36882793",
  "assets/net-img-2021011215585131-20230330144051-5wf5oqf.png": "static void processCommonDefinitionAnnotations (AnnotatedBeanDefinition abd, AnnotatedTypeMetadata metadata) {AnnotationAttributes lazy = attributesFor(metadata, Lazy. class) ;if (lazy != null) {abd. setLazyInit (lazy. getBoolean( attributeName: “value”)) ;}else if (abd. getMetadata() != metadata) {lazy = attributesFor (abd. getMetadata(), Lazy. class) ;if (lazy != null) {abd. setLazyInit (lazy. getBoolean( attributeName: “value”)) ;if (metadata. isAnnotated (Primary. class. getName())) {abd. setPrimary (true) ;}AnnotationAttributes dependsOn = attributesFor(metadata, DependsOn. class) ;if (dependsOn != null) {abd. setDependsOn (dependsOn. getStringArray ( attributeName: “value”)) ;AnnotationAttributes role = attributesFor(metadata, Role. class) ;if (role != null) {abd. setRole (role. getNumber ( attributeName: “yalue”). intValue()) ;}AnnotationAttributes description = attributesFor(metadata, Description. class) ;if (description != null) {abd. setDescription (description. getString( attributeName: “value”)) ;static BeanDefinitionHolder applyScopedProxyMode (ScopeMetadata metadata, BeanDefinitionHolder definition, BeanDefinitionRegistry registry) {https:/blog.csdn.netqq_36882793",
  "assets/net-img-2021011215585131-20230330150751-lai75fg.png": "static void processCommonDefinitionAnnotations (AnnotatedBeanDefinition abd, AnnotatedTypeMetadata metadata) {AnnotationAttributes lazy = attributesFor(metadata, Lazy. class) ;if (lazy != null) {abd. setLazyInit (lazy. getBoolean( attributeName: “value”)) ;}else if (abd. getMetadata() != metadata) {lazy = attributesFor (abd. getMetadata(), Lazy. class) ;if (lazy != null) {abd. setLazyInit (lazy. getBoolean( attributeName: “value”)) ;if (metadata. isAnnotated (Primary. class. getName())) {abd. setPrimary (true) ;}AnnotationAttributes dependsOn = attributesFor(metadata, DependsOn. class) ;if (dependsOn != null) {abd. setDependsOn (dependsOn. getStringArray ( attributeName: “value”)) ;AnnotationAttributes role = attributesFor(metadata, Role. class) ;if (role != null) {abd. setRole (role. getNumber ( attributeName: “yalue”). intValue()) ;}AnnotationAttributes description = attributesFor(metadata, Description. class) ;if (description != null) {abd. setDescription (description. getString( attributeName: “value”)) ;static BeanDefinitionHolder applyScopedProxyMode (ScopeMetadata metadata, BeanDefinitionHolder definition, BeanDefinitionRegistry registry) {https:/blog.csdn.netqq_36882793",
  "assets/net-img-2021011215585131-20230330171512-6hz1lv5.png": "static void processCommonDefinitionAnnotations (AnnotatedBeanDefinition abd, AnnotatedTypeMetadata metadata) {AnnotationAttributes lazy = attributesFor(metadata, Lazy. class) ;if (lazy != null) {abd. setLazyInit (lazy. getBoolean( attributeName: “value”)) ;}else if (abd. getMetadata() != metadata) {lazy = attributesFor (abd. getMetadata(), Lazy. class) ;if (lazy != null) {abd. setLazyInit (lazy. getBoolean( attributeName: “value”)) ;if (metadata. isAnnotated (Primary. class. getName())) {abd. setPrimary (true) ;}AnnotationAttributes dependsOn = attributesFor(metadata, DependsOn. class) ;if (dependsOn != null) {abd. setDependsOn (dependsOn. getStringArray ( attributeName: “value”)) ;AnnotationAttributes role = attributesFor(metadata, Role. class) ;if (role != null) {abd. setRole (role. getNumber ( attributeName: “yalue”). intValue()) ;}AnnotationAttributes description = attributesFor(metadata, Description. class) ;if (description != null) {abd. setDescription (description. getString( attributeName: “value”)) ;static BeanDefinitionHolder applyScopedProxyMode (ScopeMetadata metadata, BeanDefinitionHolder definition, BeanDefinitionRegistry registry) {https:/blog.csdn.netqq_36882793",
  "assets/net-img-20210118160048529-20230330161026-agv981c.png": "1. obtainFromSupplier由2. instantiateUsingFactoryMethod3. eS部4 、5调用autowireConstructor或6instantiateBean 创建beandetermineConstructorsFromBeanPos‘Processors国王二本下本6. 调用autowireConstructor或instantiateBean 创建beanos",
  "assets/net-img-20210118160048529-20230330171249-faepsek.png": "1. obtainFromSupplier由2. instantiateUsingFactoryMethod3. eS部4 、5调用autowireConstructor或6instantiateBean 创建beandetermineConstructorsFromBeanPos‘Processors国王二本下本6. 调用autowireConstructor或instantiateBean 创建beanos",
  "assets/net-img-20210119202222218-20230330161026-tna0s4z.png": "xsi:schemaLocation=\"http: //www. springframework. org/schema/beans http://www. springframework. org/schema/beans/spring-be\u003cbean id=\"demoA” name=\"demoA” class=\"com. kingfish. springbootdemo. replace. DemoA” factory-bean=\"demoC”factory-method=\"hello” autowire\u003cbean id=\"demoB” name=\"demoB” class=\" ci ietqq_36882793",
  "assets/net-img-20210119202222218-20230330171250-a1t2kvg.png": "xsi:schemaLocation=\"http: //www. springframework. org/schema/beans http://www. springframework. org/schema/beans/spring-be\u003cbean id=\"demoA” name=\"demoA” class=\"com. kingfish. springbootdemo. replace. DemoA” factory-bean=\"demoC”factory-method=\"hello” autowire\u003cbean id=\"demoB” name=\"demoB” class=\" ci ietqq_36882793",
  "assets/net-img-20210119202518865-20230330161026-46d58j0.png": "@hutowiredpublic DemoA2021 (DemoB2021 demob, DemoController demoController) {this. demob = demob;this. demoController = demoController;System. out. print1n(“DemoA2021. DemoA2021 +} httpsi/blog.csdn.net/qq_36882793",
  "assets/net-img-20210119202518865-20230330171250-r0r35v0.png": "@hutowiredpublic DemoA2021 (DemoB2021 demob, DemoController demoController) {this. demob = demob;this. demoController = demoController;System. out. print1n(“DemoA2021. DemoA2021 +} httpsi/blog.csdn.net/qq_36882793",
  "assets/net-img-2021011920300568-20230330161026-mv1if31.png": "OD? i NI I EE\u003cbean id=\"constructorDemoA” class=\"com. kingfish. springbootdemo. constructor. ConstructorDemoA” \u003econstructor-are)amsachsraaa |constructor-are)",
  "assets/net-img-2021011920300568-20230330171250-g3uritw.png": "OD? i NI I EE\u003cbean id=\"constructorDemoA” class=\"com. kingfish. springbootdemo. constructor. ConstructorDemoA” \u003econstructor-are)amsachsraaa |constructor-are)",
  "assets/net-img-20210121174448395-20230330161121-xhfx5rh.png": "| resolvableDependenciesUse Ctrl+Shift+Enter to add to WateResult:¥ oo result = {ConcurrentHashMap@5549} size = 8(Class@2803} “interface org.springframework.context.ApplicationEventPublisher\" -\u003e {AnnotationConfigServletWebServerApplicationContext@5536} \"org.sprit...(Class@5603} “interface javax.servlet http.HttpSession\" -\u003e {WebApplicationContextUtils$SessionObjectFactory@6507} \"Current HttpSession\"(Class@2085} “interface org.springframework.core.io.ResourceLoader” -\u003e {AnnotationConfigServletWebServerApplicationContext@5536} \"org.springframewa .Vi= (Class@591 1} \"interface javax.servlet ServletResponse\" -\u003e {WebApplicationContextUtils$ResponseObjectFactory@6508} \"Current HttpServletResponse\"(Class@2804} “interface org.springframework.context.ApplicationContext\" -\u003e {AnnotationConfigServietWebServerApplicationContext@5536} \"org.springfram(Class@5821} “interface javax.servlet ServietRequest\" -\u003e {WebApplicationContextUtils$RequestObjectFactory@6509} \"Current HttpServietRequest\"(Class@6464} \"interface org.springframework.web.context.request. WebRequest” -\u003e {WebApplicationContextUtils$WebRequestObjectFactory@6510} \"Current Vi(Class@2798} “interface org.springframework.beans.factory.BeanFactory\" -\u003e {DefaultListableBeanFactory@5534} \"org.springframework.beans.factory.support... V/https://blog.csdn.net/qq_36882793",
  "assets/net-img-20210121174448395-20230330171233-5h7q5ts.png": "| resolvableDependenciesUse Ctrl+Shift+Enter to add to WateResult:¥ oo result = {ConcurrentHashMap@5549} size = 8(Class@2803} “interface org.springframework.context.ApplicationEventPublisher\" -\u003e {AnnotationConfigServletWebServerApplicationContext@5536} \"org.sprit...(Class@5603} “interface javax.servlet http.HttpSession\" -\u003e {WebApplicationContextUtils$SessionObjectFactory@6507} \"Current HttpSession\"(Class@2085} “interface org.springframework.core.io.ResourceLoader” -\u003e {AnnotationConfigServletWebServerApplicationContext@5536} \"org.springframewa .Vi= (Class@591 1} \"interface javax.servlet ServletResponse\" -\u003e {WebApplicationContextUtils$ResponseObjectFactory@6508} \"Current HttpServletResponse\"(Class@2804} “interface org.springframework.context.ApplicationContext\" -\u003e {AnnotationConfigServietWebServerApplicationContext@5536} \"org.springfram(Class@5821} “interface javax.servlet ServietRequest\" -\u003e {WebApplicationContextUtils$RequestObjectFactory@6509} \"Current HttpServietRequest\"(Class@6464} \"interface org.springframework.web.context.request. WebRequest” -\u003e {WebApplicationContextUtils$WebRequestObjectFactory@6510} \"Current Vi(Class@2798} “interface org.springframework.beans.factory.BeanFactory\" -\u003e {DefaultListableBeanFactory@5534} \"org.springframework.beans.factory.support... V/https://blog.csdn.net/qq_36882793",
  "assets/net-img-20210121174804624-20230330161121-z24pwwl.png": "Expression:(run. getBenn Gemoazoat. clash 00Use Ctrl+Shift+Enter to add to WatchResult:¥ oo result = (DemoA2021@7368} \"DemoA2021 (demob=DemoB2021 (demoC2021 =com-kingfish.springbootdemo.component.DemoC2021@1dba4e06), democ=com... Vie\u003e @ demob = {DemoB2021@7371} \"DemoB2021 (demoC2021=com.kingfish.springbootdemo.component.DemoC2021@1dba4e06)\"\u003e @ democ = {DemoC2021@7372}stableBeanFactory@4fce1 36b: defining beans [org.spl... Viehttps://blog.csdn.net/qq_36882793",
  "assets/net-img-20210121174804624-20230330171233-ugmwacj.png": "Expression:(run. getBenn Gemoazoat. clash 00Use Ctrl+Shift+Enter to add to WatchResult:¥ oo result = (DemoA2021@7368} \"DemoA2021 (demob=DemoB2021 (demoC2021 =com-kingfish.springbootdemo.component.DemoC2021@1dba4e06), democ=com... Vie\u003e @ demob = {DemoB2021@7371} \"DemoB2021 (demoC2021=com.kingfish.springbootdemo.component.DemoC2021@1dba4e06)\"\u003e @ democ = {DemoC2021@7372}stableBeanFactory@4fce1 36b: defining beans [org.spl... Viehttps://blog.csdn.net/qq_36882793",
  "assets/net-img-ab2289ad6a904336b333d15440b6afbb-20230407010622-6veiwix.png": "",
  "assets/net-img-ab2289ad6a904336b333d15440b6afbb-20230407010622-iw6in11.png": "",
  "assets/net-img-ab2289ad6a904336b333d15440b6afbb-20230407010622-pbn4pda.png": "",
  "assets/net-img-c817d6c15ace4050a9bb4f7ed763be5b-20230407010622-cuzjo3o.png": "",
  "assets/net-img-concurrency-models-1-20230327154419-un8exd8.png": "",
  "assets/net-img-concurrency-models-2-20230327154420-2kpok12.png": "WorkerDelegatorWorkerShared stateinmemoryWorkerShared stateina database",
  "assets/net-img-concurrency-models-3-20230327154421-zwxuycm.png": "{Deon HH Worker HH Worker Lf Worker",
  "assets/net-img-concurrency-models-4-20230327154422-alsl7s4.png": "Worker } i Worker WorkerNon-blocking Non-blocking10 operation 10 operation",
  "assets/net-img-concurrency-models-5-20230327154425-azmhubt.png": "",
  "assets/net-img-concurrency-models-6-20230327154427-2enpd7w.png": "DelegatorWorker }(EEN ga (TE(wanes) + (was)",
  "assets/net-img-concurrency-models-7-20230327154427-muzwur0.png": "",
  "assets/net-img-concurrency-models-8-20230327154430-6k6p115.png": "WorkerChannel 1WorkerChannel 3Worker }Channel 2WorkerChannel 4Worker",
  "assets/net-img-concurrency-models-8-20230327154433-jfmoxuw.png": "WorkerChannel 1WorkerChannel 3Worker }Channel 2WorkerChannel 4Worker",
  "assets/net-img-java-memory-model-1-20230327154904-iiazo62.png": "ThreadStackThreadStackJVM",
  "assets/net-img-java-memory-model-2-20230327154906-km1uk9k.png": "Thread Stack Thread StackmethodOne() methodOne()Local variable 1 Local variable 1Local variable 2Local variable 2method Two() method Two()Local variable 1 Local variable 1JVM",
  "assets/net-img-java-memory-model-3-20230327154908-zcnm7fk.png": "Thread StackmethodOne()Thread StackmethodOne()Local variable 1Local variable 2Local variable 1Local variable 2method Two()method Two()Local variable 1Local variable 1",
  "assets/net-img-java-memory-model-4-20230327154912-b9ohygs.png": "CPU CPUCPU Registers CPU RegistersTt TtCPU Cache CPU CacheMemory MemoryRAM - Main MemoryComputer",
  "assets/net-img-java-memory-model-5-20230327154913-krj6xz3.png": "",
  "assets/net-img-java-memory-model-6-20230327154915-770g3nc.png": "CPUCPURegisters二二CPUCPURegisters",
  "assets/net-img-java-memory-model-7-20230327154917-zr42amw.png": "CPU CPUCPU Registers CPU RegistersTt +fCPU Cac PU CacheMemory |obj.count=2| |obj.count=2| Memoryff| i ‘obj.count = 1 | iRAM - Main MemoryComputer",
  "assets/net-img-o_adapter-class-adapter-20230408225050-2wbnrte.png": "AdapteeN-一—————+methodN()Client+adaptor: Adaptor+doWork ()+methodA()methodl();adaptor. methodA();nethodN() i",
  "assets/net-img-o_adapter-class-adapter-20230408225050-9rn0ged.jpg": "《interface》 AdapteeFaraet 目标适配者+ operation(); + specificOperation();Adapter适配器+ operation();specificOperation()",
  "assets/net-img-o_adapter-default-adapter-20230408225050-s0j9l0z.jpg": "《interface》Target+ operation1();+ operation2();+ operation3();+ operation4();+ operation5();;(abstract class)Adapter+ operation1();+ operation2();+ operation3();+ operation4();+ operation5();目标适配器",
  "assets/net-img-o_adapter-default-adapter-result-20230408225050-gwzm2gy.jpg": "iB Problems 加Markers [Properties 4 Servers [Data Source Explorer [Snippets Search 5g Progress 4 Debug 园Console 8操作2",
  "assets/net-img-o_adapter-instance-result-20230408225050-xb5uuj9.jpg": "饼Problems 加Markers [| Properties 4 Servers [Data Source Explorer [Snippets 4’ Search Sy Progress 将Debug © Console 员\u003cterminated\u003e ClassAdapterPatternTest (1) [Java Application] C:\\Program Files\\Java\\jdk1.8.0_162\\bin\\javaw.exe (2018年10月17日下午2:41:23)电源输出电压: 220电源适配器开始工作，此时输出电压是电源适配器工，此时输出电压丙220",
  "assets/net-img-o_adapter-object-adapter-20230408225050-13rog9a.png": "t+adaptor: Adaptor+dowork ()adaptor. methodA() ; adaptee.methodB();",
  "assets/net-img-o_adapter-object-adapter-20230408225050-r3p0dvx.jpg": "《interface》 AdapteeFaraet 目标适配者+ operation(); + specificOperation();Adapter- adaptee:Adaptee 适配器+ operation();adaptee.specificOperation()",
  "assets/net-img-o_adapter-power-adapter-20230408225050-aqq6rc8.jpg": "",
  "assets/net-img-strings-wait-notify-20230327155048-wajgkd2.png": "String - constantZLMyWaitNotify 1MyWaitNotify 2[Thread D",
  "assets/newCodeMoreWhite-20230330184927-012mb6b.png": "",
  "assets/newCodeMoreWhite-20230330185152-m0ic60s.png": "",
  "assets/newCodeMoreWhite-20230331081520-rsxit7q.png": "",
  "assets/newCodeMoreWhite-20230331081615-wauhcjs.png": "",
  "assets/newCodeMoreWhite-20230331081631-dnt1exp.png": "",
  "assets/newCodeMoreWhite-20230331081736-ryhs6nj.png": "",
  "assets/newCodeMoreWhite-20230331081736-tlj8ok6.png": "",
  "assets/newCodeMoreWhite-20230331081740-yzuwoca.png": "",
  "assets/newCodeMoreWhite-20230331081741-4gpb70d.png": "",
  "assets/newCodeMoreWhite-20230331081744-ktr9kjp.png": "",
  "assets/newCodeMoreWhite-20230331081812-ls9fbbk.png": "",
  "assets/newCodeMoreWhite-20230331081844-6zot9v2.png": "",
  "assets/newCodeMoreWhite-20230331081901-8455i1h.png": "",
  "assets/newCodeMoreWhite-20230331081919-3tjy3kt.png": "",
  "assets/newCodeMoreWhite-20230331081932-sfymgud.png": "",
  "assets/newCodeMoreWhite-20230331082020-b0xacxz.png": "",
  "assets/newCodeMoreWhite-20230331082710-0lr5fby.png": "",
  "assets/newCodeMoreWhite-20230331082722-dig9gka.png": "",
  "assets/newCodeMoreWhite-20230331082733-do1ah7j.png": "",
  "assets/newCodeMoreWhite-20230331082746-kbqrn99.png": "",
  "assets/newCodeMoreWhite-20230331084824-wvgx6p1.png": "",
  "assets/newCodeMoreWhite-20230331084833-l0l51mc.png": "",
  "assets/newCodeMoreWhite-20230331084853-6g627kc.png": "",
  "assets/newCodeMoreWhite-20230331084932-jb78y05.png": "",
  "assets/newCodeMoreWhite-20230331084946-y7zdbqw.png": "",
  "assets/newCodeMoreWhite-20230331085005-1o92jk7.png": "",
  "assets/newCodeMoreWhite-20230331085026-9tsnbx3.png": "",
  "assets/newCodeMoreWhite-20230331085035-qrx3x06.png": "",
  "assets/newCodeMoreWhite-20230331085134-8miwo80.png": "",
  "assets/newCodeMoreWhite-20230331090001-8d8ckly.png": "",
  "assets/newCodeMoreWhite-20230331090019-38f56pe.png": "",
  "assets/newCodeMoreWhite-20230331090032-27ujgmt.png": "",
  "assets/newCodeMoreWhite-20230331090046-2u84uxz.png": "",
  "assets/newCodeMoreWhite-20230331090103-rxg7lzd.png": "",
  "assets/newCodeMoreWhite-20230331090122-g30xgcy.png": "",
  "assets/newCodeMoreWhite-20230331090142-ki7e430.png": "",
  "assets/newCodeMoreWhite-20230331090158-894bvo7.png": "",
  "assets/newCodeMoreWhite-20230331090225-rgzrnf8.png": "",
  "assets/newCodeMoreWhite-20230331090235-aefrpjg.png": "",
  "assets/newCodeMoreWhite-20230331090321-oqdi5c5.png": "",
  "assets/newCodeMoreWhite-20230331090350-s8nf1dk.png": "",
  "assets/newCodeMoreWhite-20230331090403-kvilh3a.png": "",
  "assets/newCodeMoreWhite-20230331090430-315tu91.png": "",
  "assets/newCodeMoreWhite-20230331090450-60pw4dl.png": "",
  "assets/newCodeMoreWhite-20230331090526-6y25yw4.png": "",
  "assets/newCodeMoreWhite-20230331090544-bspxcw0.png": "",
  "assets/newCodeMoreWhite-20230331090559-bji9hs7.png": "",
  "assets/newCodeMoreWhite-20230331090611-k2xrg7x.png": "",
  "assets/newCodeMoreWhite-20230331090625-sex20hd.png": "",
  "assets/newCodeMoreWhite-20230331090638-fdlhtl1.png": "",
  "assets/newCodeMoreWhite-20230331090654-2gnteho.png": "",
  "assets/newCodeMoreWhite-20230331090710-oe41gmf.png": "",
  "assets/newCodeMoreWhite-20230331090724-ixkokhz.png": "",
  "assets/newCodeMoreWhite-20230331090740-9uouoh0.png": "",
  "assets/newCodeMoreWhite-20230331091331-qhjyvnl.png": "",
  "assets/newCodeMoreWhite-20230331091345-6l5waxa.png": "",
  "assets/newCodeMoreWhite-20230331091400-f58l892.png": "",
  "assets/newCodeMoreWhite-20230331092122-56cdu6g.png": "",
  "assets/newCodeMoreWhite-20230331092943-4u6r714.png": "",
  "assets/newCodeMoreWhite-20230331092956-y821nlg.png": "",
  "assets/newCodeMoreWhite-20230331093005-4fg9xkl.png": "",
  "assets/newCodeMoreWhite-20230331093028-p423kgz.png": "",
  "assets/newCodeMoreWhite-20230331093037-djs6nmi.png": "",
  "assets/newCodeMoreWhite-20230331180211-dsbf1k6.png": "",
  "assets/newCodeMoreWhite-20230331180236-g07i8so.png": "",
  "assets/newCodeMoreWhite-20230331180245-ief2j9s.png": "",
  "assets/newCodeMoreWhite-20230402000310-2hzjjbs.png": "",
  "assets/newCodeMoreWhite-20230402210130-5te2950.png": "",
  "assets/newCodeMoreWhite-20230402210150-l47pfrl.png": "",
  "assets/newCodeMoreWhite-20230402222916-2l53z0z.png": "",
  "assets/newCodeMoreWhite-20230402223248-2kc4erj.png": "",
  "assets/newCodeMoreWhite-20230403223343-syy3ntd.png": "",
  "assets/newCodeMoreWhite-20230404010046-v4en6h2.png": "",
  "assets/newCodeMoreWhite-20230404010244-t5s5vug.png": "",
  "assets/newCodeMoreWhite-20230404010249-711e5o9.png": "",
  "assets/newCodeMoreWhite-20230404010250-g3vx7l6.png": "",
  "assets/newCodeMoreWhite-20230404010254-nc2iv2b.png": "",
  "assets/newCodeMoreWhite-20230404010254-qkkp741.png": "",
  "assets/newCodeMoreWhite-20230404010256-0i0nd2s.png": "",
  "assets/newCodeMoreWhite-20230404010257-da6fa08.png": "",
  "assets/newCodeMoreWhite-20230404010300-91if90f.png": "",
  "assets/newCodeMoreWhite-20230404010531-721xbir.png": "",
  "assets/newCodeMoreWhite-20230404010531-iqzp6ex.png": "",
  "assets/newCodeMoreWhite-20230404010534-23baiyc.png": "",
  "assets/newCodeMoreWhite-20230404010535-muiv0fd.png": "",
  "assets/newCodeMoreWhite-20230404010537-mv6hk1r.png": "",
  "assets/newCodeMoreWhite-20230404010538-sickv36.png": "",
  "assets/newCodeMoreWhite-20230404010544-p17txp6.png": "",
  "assets/newCodeMoreWhite-20230404010548-9no02dl.png": "",
  "assets/newCodeMoreWhite-20230404010551-ry3sz9l.png": "",
  "assets/newCodeMoreWhite-20230404010557-gi25ahi.png": "",
  "assets/newCodeMoreWhite-20230404010808-t2fe9v0.png": "",
  "assets/newCodeMoreWhite-20230404010814-txr1488.png": "",
  "assets/newCodeMoreWhite-20230404011747-ni3305m.png": "",
  "assets/newCodeMoreWhite-20230404011828-ukj8hoj.png": "",
  "assets/newCodeMoreWhite-20230404011831-nbojk7e.png": "",
  "assets/newCodeMoreWhite-20230404011832-h3t4w5d.png": "",
  "assets/newCodeMoreWhite-20230404011839-osv301h.png": "",
  "assets/newCodeMoreWhite-20230404084355-2lhakc9.png": "",
  "assets/newCodeMoreWhite-20230404182032-sjfahds.png": "",
  "assets/newCodeMoreWhite-20230406114032-wozuprn.png": "",
  "assets/newCodeMoreWhite-20230406234144-hgjg4z5.png": "",
  "assets/newCodeMoreWhite-20230406234145-1v1gpru.png": "",
  "assets/newCodeMoreWhite-20230407010500-kp8ryfw.png": "",
  "assets/newCodeMoreWhite-20230407011441-sqtqzpe.png": "",
  "assets/newCodeMoreWhite-20230408235517-ismv5x0.png": "",
  "assets/newCodeMoreWhite-20230408235544-7sadeo2.png": "",
  "assets/newCodeMoreWhite-20230408235547-45q3ku1.png": "",
  "assets/newCodeMoreWhite-20230408235547-ghd5ri2.png": "",
  "assets/newCodeMoreWhite-20230409000131-pp2vj51.png": "",
  "assets/newCurrentTime2-20230404011747-blk6u0o.png": "",
  "assets/newCurrentTime2-20230404011832-psx8r4i.png": "",
  "assets/newCurrentTime2-20230404012244-azso777.png": "",
  "assets/npsFeel1-20230404012245-ub3lthl.png": "和ay",
  "assets/npsFeel2-20230404012245-rkzezmv.png": "ee,",
  "assets/npsFeel3-20230404012245-t7j0kgt.png": "",
  "assets/npsFeel4-20230404012244-9csi4ua.png": "人a",
  "assets/npsFeel5-20230404012245-z0mem4e.png": "a",
  "assets/npsFeelGrey1-20230404012245-uecy9om.png": "Beay",
  "assets/npsFeelGrey2-20230404012245-6noc6r3.png": "a,",
  "assets/npsFeelGrey3-20230404012245-zn872nt.png": "",
  "assets/npsFeelGrey4-20230404012245-bsou6yq.png": "人,",
  "assets/npsFeelGrey5-20230404012245-yymsyfw.png": ".",
  "assets/original-20230404011747-cxtp1bx.png": "_,,原创和",
  "assets/original-20230404011832-hrhke16.png": "_,,原创和",
  "assets/original-20230404012244-ftnd3zj.png": "_,,原创和",
  "assets/pay-help-20230404012138-1j1p6pc.png": "",
  "assets/readCountWhite-20230404012245-05ixaz2.png": "",
  "assets/studyVipIcon-20230404012138-r29sqd4.png": "",
  "assets/studyVipIcon-20230404012245-ie78siz.png": "",
  "assets/tobarCollect2-20230404011747-mxr3btg.png": "",
  "assets/tobarCollect2-20230404011832-p68s3yq.png": "",
  "assets/tobarCollect2-20230404012244-4niqqo8.png": "",
  "assets/vipListWhite-20230404012244-rvpwclt.png": ") 1500+ 付费专栏免费看5000+ 精选课程免费学|) 1000+ 电子书免费看",
  "assets/weixin-20230404012138-yxgq2gr.png": "人e,",
  "assets/zhifubao-20230404012138-uhq8x5i.png": ""
}