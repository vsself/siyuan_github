{
	"ID": "20230408235547-cwil5qf",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230408235547-cwil5qf",
		"title": "Spring AOP基础组件 Advised_我家有猫已长成的博客-CSDN博客",
		"updated": "20230408235547"
	},
	"Children": [
		{
			"ID": "20230408235547-09wxrm0",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230408235547-09wxrm0",
				"updated": "20230408235547"
			}
		},
		{
			"ID": "20230408235547-xmv012h",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230408235547-xmv012h",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"ID": "20230408235547-56bellb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230408235547-56bellb",
						"updated": "20230408235547"
					},
					"Children": [
						{
							"ID": "20230408235547-3nusxzh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230408235547-3nusxzh",
								"updated": "20230408235547"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/xing_hung/article/details/122830238",
									"TextMarkTextContent": "https://blog.csdn.net/xing_hung/article/details/122830238"
								}
							]
						}
					]
				},
				{
					"ID": "20230408235547-98yijwa",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230408235547-98yijwa",
						"updated": "20230408235547"
					},
					"Children": [
						{
							"ID": "20230408235547-fawfnup",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230408235547-fawfnup",
								"updated": "20230408235547"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Spring AOP基础组件 Advised 简介。"
								}
							]
						}
					]
				},
				{
					"ID": "20230408235547-wlio2ye",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230408235547-wlio2ye",
						"updated": "20230408235547"
					},
					"Children": [
						{
							"ID": "20230408235547-zangm6y",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230408235547-zangm6y",
								"updated": "20230408235547"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2023-04-08 23:55:47"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230408235547-5pd14cq",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230408235547-5pd14cq",
				"updated": "20230408235547"
			}
		},
		{
			"ID": "20230408235547-xd1l4z7",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235547-xd1l4z7",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "相关阅读"
				}
			]
		},
		{
			"ID": "20230408235547-n9otfuk",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230408235547-n9otfuk",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"ID": "20230408235547-p9yqeng",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230408235547-p9yqeng",
						"updated": "20230408235547"
					},
					"Children": [
						{
							"ID": "20230408235547-n610rji",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230408235547-n610rji",
								"updated": "20230408235547"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/xing_hung/article/details/122815139",
									"TextMarkTextContent": "Spring AOP基础组件 Pointcut"
								}
							]
						}
					]
				},
				{
					"ID": "20230408235547-zpx35op",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230408235547-zpx35op",
						"updated": "20230408235547"
					},
					"Children": [
						{
							"ID": "20230408235547-35p9wo2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230408235547-35p9wo2",
								"updated": "20230408235547"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/xing_hung/article/details/122830200",
									"TextMarkTextContent": "Spring AOP基础组件 Advice"
								}
							]
						}
					]
				},
				{
					"ID": "20230408235547-9w63ih6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230408235547-9w63ih6",
						"updated": "20230408235547"
					},
					"Children": [
						{
							"ID": "20230408235547-nkh9jck",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230408235547-nkh9jck",
								"updated": "20230408235547"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/xing_hung/article/details/122830287",
									"TextMarkTextContent": "Spring AOP基础组件 Advisor"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230408235547-zqgubiq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235547-zqgubiq",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235547-h3f9z7l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235547-h3f9z7l",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "表示被通知的标记接口；\n实现子类主要是代理生成的对象和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AdvisedSupport"
				},
				{
					"Type": "NodeText",
					"Data": "​；"
				}
			]
		},
		{
			"ID": "20230408235547-ykqo4a0",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235547-ykqo4a0",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "源码"
				}
			]
		},
		{
			"ID": "20230408235547-tthwsuy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235547-tthwsuy",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public interface Advised extends TargetClassAware { \n\n    // Advice配置信是否支持修改\n    boolean isFrozen();\n\n    // 是否代理指定的类而不是接口\n    boolean isProxyTargetClass();\n\n    // 获取代理的接口\n    Class\u003c?\u003e[] getProxiedInterfaces();\n\n    // 判断指定接口是否被代理\n    boolean isInterfaceProxied(Class\u003c?\u003e intf);\n\n    // 设置代理的目标对象\n    void setTargetSource(TargetSource targetSource);\n\n    / 获取代理的目标对象\n    TargetSource getTargetSource();\n\n    // 设置是否暴露代理对象到ThreadLocal，方便通过AopContext获取代理对象\n    void setExposeProxy(boolean exposeProxy);\n\n    // 判断是否暴露代理对象\n    boolean isExposeProxy();\n\n    // 设置是否已预过滤，如果已预过滤，则持有的Advisors都适用\n    void setPreFiltered(boolean preFiltered);\n\n    // 判断是否已预过滤\n    boolean isPreFiltered();\n\n    // 获取Advisors\n    Advisor[] getAdvisors();\n\n    // 获取Advisors数量\n    default int getAdvisorCount() { \n        return getAdvisors().length;\n    }\n\n    // 添加Advisor到链尾\n    void addAdvisor(Advisor advisor) throws AopConfigException;\n\n    // 添加Advisor到指定位置，pos必须有效\n    void addAdvisor(int pos, Advisor advisor) throws AopConfigException;\n\n    // 移除指定Advisor\n    boolean removeAdvisor(Advisor advisor);\n\n    // 移除指定位置的Advisor\n    void removeAdvisor(int index) throws AopConfigException;\n\n    // 获取指定Advisor的位置\n    int indexOf(Advisor advisor);\n\n    // 替换指定Advisor，如果旧Advisor是引介Advisor，则需要重新获取代理，否则新旧接口都不支持\n    boolean replaceAdvisor(Advisor a, Advisor b) throws AopConfigException;\n\n    // 添加Advice到链尾\n    void addAdvice(Advice advice) throws AopConfigException;\n\n    // 添加Advice到指定位置，pos必须有效\n    void addAdvice(int pos, Advice advice) throws AopConfigException;\n\n    // 移除指定Advice\n    boolean removeAdvice(Advice advice);\n\n    // 获取指定Advice的位置\n    int indexOf(Advice advice);\n\n    // 获取String形式的ProxyConfig\n    String toProxyConfigString();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235547-kykz7rz",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235547-kykz7rz",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实现子类"
				}
			]
		},
		{
			"ID": "20230408235547-vqtiqut",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235547-vqtiqut",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public interface Advised extends TargetClassAware\n    public class AdvisedSupport extends ProxyConfig implements Advised\n        public class ProxyCreatorSupport extends AdvisedSupport\n            public class ProxyFactoryBean extends ProxyCreatorSupport implements FactoryBean\u003cObject\u003e, BeanClassLoaderAware, BeanFactoryAware\n            public class ProxyFactory extends ProxyCreatorSupport\n            public class AspectJProxyFactory extends ProxyCreatorSupport\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235547-t199rhx",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235547-t199rhx",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "AdvisedSupport"
				}
			]
		},
		{
			"ID": "20230408235547-if9pbsv",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235547-if9pbsv",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235547-6dqro36",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235547-6dqro36",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "AOP代理配置管理类的基础类，这些管理类本身不是AOP代理类，但是它们的子类通常是直接获取AOP代理的工厂类；\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AdvisedSupport"
				},
				{
					"Type": "NodeText",
					"Data": "​实现了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advice"
				},
				{
					"Type": "NodeText",
					"Data": "​和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advisor"
				},
				{
					"Type": "NodeText",
					"Data": "​的管理，子类需要负责创建代理；"
				}
			]
		},
		{
			"ID": "20230408235547-i0r0h5e",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235547-i0r0h5e",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235547-lua4u4u",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235547-lua4u4u",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class AdvisedSupport extends ProxyConfig implements Advised { \n\n    /**\n     * Canonical TargetSource when there's no target, and behavior is\n     * supplied by the advisors.\n     */\n    // 目标对象的典例\n    public static final TargetSource EMPTY_TARGET_SOURCE = EmptyTargetSource.INSTANCE;\n\n    // 目标对象\n    TargetSource targetSource = EMPTY_TARGET_SOURCE;\n\n    // 预过滤标识\n    private boolean preFiltered = false;\n\n    // Advisor链工厂\n    AdvisorChainFactory advisorChainFactory = new DefaultAdvisorChainFactory();\n\n    // 方法缓存，以Method为Key，Advisor chain list为Value\n    private transient Map\u003cMethodCacheKey, List\u003cObject\u003e\u003e methodCache;\n\n    // 代理实现的接口集合\n    private List\u003cClass\u003c?\u003e\u003e interfaces = new ArrayList\u003c\u003e();\n\n    // Advisor集合\n    private List\u003cAdvisor\u003e advisors = new ArrayList\u003c\u003e();\n\n\n    public AdvisedSupport() { \n        this.methodCache = new ConcurrentHashMap\u003c\u003e(32);\n    }\n\n    public AdvisedSupport(Class\u003c?\u003e... interfaces) { \n        this();\n        setInterfaces(interfaces);\n    }\n\n    public void setTarget(Object target) { \n        setTargetSource(new SingletonTargetSource(target));\n    }\n\n    @Override\n    public void setTargetSource(@Nullable TargetSource targetSource) { \n        this.targetSource = (targetSource != null ? targetSource : EMPTY_TARGET_SOURCE);\n    }\n\n    @Override\n    public TargetSource getTargetSource() { \n        return this.targetSource;\n    }\n\n    public void setTargetClass(@Nullable Class\u003c?\u003e targetClass) { \n        this.targetSource = EmptyTargetSource.forClass(targetClass);\n    }\n\n    @Override\n    @Nullable\n    public Class\u003c?\u003e getTargetClass() { \n        return this.targetSource.getTargetClass();\n    }\n\n    @Override\n    public void setPreFiltered(boolean preFiltered) { \n        this.preFiltered = preFiltered;\n    }\n\n    @Override\n    public boolean isPreFiltered() { \n        return this.preFiltered;\n    }\n\n    public void setAdvisorChainFactory(AdvisorChainFactory advisorChainFactory) { \n        // 校验AdvisorChainFactory\n        Assert.notNull(advisorChainFactory, \"AdvisorChainFactory must not be null\");\n        this.advisorChainFactory = advisorChainFactory;\n    }\n\n    public AdvisorChainFactory getAdvisorChainFactory() { \n        return this.advisorChainFactory;\n    }\n\n    public void setInterfaces(Class\u003c?\u003e... interfaces) { \n        // 校验代理的接口集合\n        Assert.notNull(interfaces, \"Interfaces must not be null\");\n        this.interfaces.clear();\n        for (Class\u003c?\u003e ifc : interfaces) { \n            addInterface(ifc);\n        }\n    }\n\n    public void addInterface(Class\u003c?\u003e intf) { \n        Assert.notNull(intf, \"Interface must not be null\");\n        if (!intf.isInterface()) { \n            // 只支持接口类型\n            throw new IllegalArgumentException(\"[\" + intf.getName() + \"] is not an interface\");\n        }\n        if (!this.interfaces.contains(intf)) { \n            this.interfaces.add(intf);\n            adviceChanged();\n        }\n    }\n\n    public boolean removeInterface(Class\u003c?\u003e intf) { \n        return this.interfaces.remove(intf);\n    }\n\n    @Override\n    public Class\u003c?\u003e[] getProxiedInterfaces() { \n        return ClassUtils.toClassArray(this.interfaces);\n    }\n\n    @Override\n    public boolean isInterfaceProxied(Class\u003c?\u003e intf) { \n        // 遍历代理的接口集合\n        for (Class\u003c?\u003e proxyIntf : this.interfaces) { \n            // 判断指定的接口类型是否属于遍历接口\n            if (intf.isAssignableFrom(proxyIntf)) { \n                return true;\n            }\n        }\n        return false;\n    }\n\n    @Override\n    public final Advisor[] getAdvisors() { \n        return this.advisors.toArray(new Advisor[0]);\n    }\n\n    @Override\n    public int getAdvisorCount() { \n        return this.advisors.size();\n    }\n\n    @Override\n    public void addAdvisor(Advisor advisor) { \n        int pos = this.advisors.size();\n        addAdvisor(pos, advisor);\n    }\n\n    @Override\n    public void addAdvisor(int pos, Advisor advisor) throws AopConfigException { \n        if (advisor instanceof IntroductionAdvisor) { \n            // 校验IntroductionAdvisor\n            validateIntroductionAdvisor((IntroductionAdvisor) advisor);\n        }\n        addAdvisorInternal(pos, advisor);\n    }\n\n    @Override\n    public boolean removeAdvisor(Advisor advisor) { \n        int index = indexOf(advisor);\n        if (index == -1) { \n            return false;\n        }\n        else { \n            removeAdvisor(index);\n            return true;\n        }\n    }\n\n    @Override\n    public void removeAdvisor(int index) throws AopConfigException { \n        if (isFrozen()) { \n            // 不支持变动\n            throw new AopConfigException(\"Cannot remove Advisor: Configuration is frozen.\");\n        }\n        if (index \u003c 0 || index \u003e this.advisors.size() - 1) { \n            throw new AopConfigException(\"Advisor index \" + index + \" is out of bounds: \" +\n                    \"This configuration only has \" + this.advisors.size() + \" advisors.\");\n        }\n\n        Advisor advisor = this.advisors.remove(index);\n        if (advisor instanceof IntroductionAdvisor) { \n            IntroductionAdvisor ia = (IntroductionAdvisor) advisor;\n            // 移除IntroductionAdvisor相关的接口\n            for (Class\u003c?\u003e ifc : ia.getInterfaces()) { \n                removeInterface(ifc);\n            }\n        }\n\n        adviceChanged();\n    }\n\n    @Override\n    public int indexOf(Advisor advisor) { \n        Assert.notNull(advisor, \"Advisor must not be null\");\n        return this.advisors.indexOf(advisor);\n    }\n\n    @Override\n    public boolean replaceAdvisor(Advisor a, Advisor b) throws AopConfigException { \n        Assert.notNull(a, \"Advisor a must not be null\");\n        Assert.notNull(b, \"Advisor b must not be null\");\n        int index = indexOf(a);\n        if (index == -1) { \n            return false;\n        }\n        removeAdvisor(index);\n        addAdvisor(index, b);\n        return true;\n    }\n\n    public void addAdvisors(Advisor... advisors) { \n        addAdvisors(Arrays.asList(advisors));\n    }\n\n    public void addAdvisors(Collection\u003cAdvisor\u003e advisors) { \n        if (isFrozen()) { \n            // 不支持变动\n            throw new AopConfigException(\"Cannot add advisor: Configuration is frozen.\");\n        }\n        if (!CollectionUtils.isEmpty(advisors)) { \n            for (Advisor advisor : advisors) { \n                if (advisor instanceof IntroductionAdvisor) { \n                    validateIntroductionAdvisor((IntroductionAdvisor) advisor);\n                }\n                Assert.notNull(advisor, \"Advisor must not be null\");\n                this.advisors.add(advisor);\n            }\n            adviceChanged();\n        }\n    }\n\n    private void validateIntroductionAdvisor(IntroductionAdvisor advisor) { \n        advisor.validateInterfaces();\n        // If the advisor passed validation, we can make the change.\n        Class\u003c?\u003e[] ifcs = advisor.getInterfaces();\n        for (Class\u003c?\u003e ifc : ifcs) { \n            addInterface(ifc);\n        }\n    }\n\n    private void addAdvisorInternal(int pos, Advisor advisor) throws AopConfigException { \n        Assert.notNull(advisor, \"Advisor must not be null\");\n        if (isFrozen()) { \n            // 不支持变动\n            throw new AopConfigException(\"Cannot add advisor: Configuration is frozen.\");\n        }\n        if (pos \u003e this.advisors.size()) { \n            throw new IllegalArgumentException(\n                    \"Illegal position \" + pos + \" in advisor list with size \" + this.advisors.size());\n        }\n        this.advisors.add(pos, advisor);\n        adviceChanged();\n    }\n\n    protected final List\u003cAdvisor\u003e getAdvisorsInternal() { \n        return this.advisors;\n    }\n\n    @Override\n    public void addAdvice(Advice advice) throws AopConfigException { \n        int pos = this.advisors.size();\n        addAdvice(pos, advice);\n    }\n\n    @Override\n    public void addAdvice(int pos, Advice advice) throws AopConfigException { \n        Assert.notNull(advice, \"Advice must not be null\");\n        // 将Advice包装为Advisor\n        if (advice instanceof IntroductionInfo) { \n            // We don't need an IntroductionAdvisor for this kind of introduction:\n            // It's fully self-describing.\n            addAdvisor(pos, new DefaultIntroductionAdvisor(advice, (IntroductionInfo) advice));\n        }\n        else if (advice instanceof DynamicIntroductionAdvice) { \n            // We need an IntroductionAdvisor for this kind of introduction.\n            throw new AopConfigException(\"DynamicIntroductionAdvice may only be added as part of IntroductionAdvisor\");\n        }\n        else { \n            addAdvisor(pos, new DefaultPointcutAdvisor(advice));\n        }\n    }\n\n    @Override\n    public boolean removeAdvice(Advice advice) throws AopConfigException { \n        int index = indexOf(advice);\n        if (index == -1) { \n            return false;\n        }\n        else { \n            removeAdvisor(index);\n            return true;\n        }\n    }\n\n    @Override\n    public int indexOf(Advice advice) { \n        Assert.notNull(advice, \"Advice must not be null\");\n        for (int i = 0; i \u003c this.advisors.size(); i++) { \n            Advisor advisor = this.advisors.get(i);\n            if (advisor.getAdvice() == advice) { \n                return i;\n            }\n        }\n        return -1;\n    }\n\n    protected void adviceChanged() { \n        // 清除方法缓存\n        this.methodCache.clear();\n    }\n\n\n    // Method的简单包装类，作为methodCache的Key\n    private static final class MethodCacheKey implements Comparable\u003cMethodCacheKey\u003e { \n\n        private final Method method;\n\n        private final int hashCode;\n\n        public MethodCacheKey(Method method) { \n            this.method = method;\n            this.hashCode = method.hashCode();\n        }\n\n        @Override\n        public int compareTo(MethodCacheKey other) { \n            // 先比较方法名称\n            int result = this.method.getName().compareTo(other.method.getName());\n            if (result == 0) { \n                // 再比较方法签名\n                result = this.method.toString().compareTo(other.method.toString());\n            }\n            return result;\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235547-jkhdfw6",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235547-jkhdfw6",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ProxyCreatorSupport"
				}
			]
		},
		{
			"ID": "20230408235547-2x0kamw",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235547-2x0kamw",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235547-jjjgdt0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235547-jjjgdt0",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代理工厂的基础类，提供对可配置的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AopProxyFactory"
				},
				{
					"Type": "NodeText",
					"Data": "​的便捷访问；"
				}
			]
		},
		{
			"ID": "20230408235547-2j83t72",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235547-2j83t72",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235547-lb0jtc1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235547-lb0jtc1",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class ProxyCreatorSupport extends AdvisedSupport { \n\n    private AopProxyFactory aopProxyFactory;\n\n    private final List\u003cAdvisedSupportListener\u003e listeners = new ArrayList\u003c\u003e();\n\n    // 初始状态未激活，当创建第一个代理对象时设置为true\n    private boolean active = false;\n\n\n    public ProxyCreatorSupport() { \n        this.aopProxyFactory = new DefaultAopProxyFactory();\n    }\n\n    public ProxyCreatorSupport(AopProxyFactory aopProxyFactory) { \n        Assert.notNull(aopProxyFactory, \"AopProxyFactory must not be null\");\n        this.aopProxyFactory = aopProxyFactory;\n    }\n\n    protected final synchronized AopProxy createAopProxy() { \n        if (!this.active) { \n            activate();\n        }\n        // 通过AopProxyFactory创建代理对象\n        return getAopProxyFactory().createAopProxy(this);\n    }\n\n    private void activate() { \n        this.active = true;\n        // 通知激活\n        for (AdvisedSupportListener listener : this.listeners) { \n            listener.activated(this);\n        }\n    }\n\n    @Override\n    protected void adviceChanged() { \n        super.adviceChanged();\n        synchronized (this) { \n            if (this.active) { \n                // 通知变动\n                for (AdvisedSupportListener listener : this.listeners) { \n                    listener.adviceChanged(this);\n                }\n            }\n        }\n    }\n\n    protected final synchronized boolean isActive() { \n        return this.active;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235547-ql2g2fs",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235547-ql2g2fs",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ProxyFactory"
				}
			]
		},
		{
			"ID": "20230408235547-6a55ytg",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235547-6a55ytg",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235547-u2pvu43",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235547-u2pvu43",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "支持自定义获取和配置AOP代理实例的代理实例工厂；"
				}
			]
		},
		{
			"ID": "20230408235547-vo14xrn",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235547-vo14xrn",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235547-oltendo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235547-oltendo",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class ProxyFactory extends ProxyCreatorSupport { \n\n    public Object getProxy() { \n        // 使用默认地ClassLoader创建代理对象\n        return createAopProxy().getProxy();\n    }\n\n    public Object getProxy(@Nullable ClassLoader classLoader) { \n        // 使用指定的ClassLoader创建代理对象\n        return createAopProxy().getProxy(classLoader);\n    }\n\n    // 根据指定的接口和拦截器创建代理对象\n    @SuppressWarnings(\"unchecked\")\n    public static \u003cT\u003e T getProxy(Class\u003cT\u003e proxyInterface, Interceptor interceptor) { \n        return (T) new ProxyFactory(proxyInterface, interceptor).getProxy();\n    }\n\n    // 根据指定的接口和目标对象创建代理对象\n    @SuppressWarnings(\"unchecked\")\n    public static \u003cT\u003e T getProxy(Class\u003cT\u003e proxyInterface, TargetSource targetSource) { \n        return (T) new ProxyFactory(proxyInterface, targetSource).getProxy();\n    }\n\n    // 创建继承自目标对象类型的代理对象\n    public static Object getProxy(TargetSource targetSource) { \n        if (targetSource.getTargetClass() == null) { \n            throw new IllegalArgumentException(\"Cannot create class proxy for TargetSource with null target class\");\n        }\n        ProxyFactory proxyFactory = new ProxyFactory();\n        proxyFactory.setTargetSource(targetSource);\n        proxyFactory.setProxyTargetClass(true);\n        return proxyFactory.getProxy();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235547-gku5166",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235547-gku5166",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ProxyFactoryBean"
				}
			]
		},
		{
			"ID": "20230408235547-47zwop3",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235547-47zwop3",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235547-rb8qqn8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235547-rb8qqn8",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基于Spring "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BeanFactory"
				},
				{
					"Type": "NodeText",
					"Data": "​中的Bean来创建AOP代理实例的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "FactoryBean"
				},
				{
					"Type": "NodeText",
					"Data": "​的实现；\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advisor"
				},
				{
					"Type": "NodeText",
					"Data": "​和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advice"
				},
				{
					"Type": "NodeText",
					"Data": "​都是通过bean name指定，最后一个bean name可能是目标对象，但通常目标对象都是通过targetName/target/targetSource属性指定（一旦指定，那么所有bean name只能是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advisor"
				},
				{
					"Type": "NodeText",
					"Data": "​或者"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advice"
				},
				{
					"Type": "NodeText",
					"Data": "​）；"
				}
			]
		},
		{
			"ID": "20230408235547-a02isw9",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235547-a02isw9",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235547-qumdg97",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235547-qumdg97",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class ProxyFactoryBean extends ProxyCreatorSupport\n        implements FactoryBean\u003cObject\u003e, BeanClassLoaderAware, BeanFactoryAware { \n\n    @Override\n    @Nullable\n    public Object getObject() throws BeansException { \n        initializeAdvisorChain();\n        if (isSingleton()) { \n            // 单例则会缓存\n            return getSingletonInstance();\n        }\n        else { \n            if (this.targetName == null) { \n                logger.info(\"Using non-singleton proxies with singleton targets is often undesirable. \" +\n                        \"Enable prototype proxies by setting the 'targetName' property.\");\n            }\n            // 多例则每次创建新实例\n            return newPrototypeInstance();\n        }\n    }\n\n    private synchronized Object getSingletonInstance() { \n        if (this.singletonInstance == null) { \n            this.targetSource = freshTargetSource();\n            // 自动检测代理的接口\n            if (this.autodetectInterfaces \u0026\u0026 getProxiedInterfaces().length == 0 \u0026\u0026 !isProxyTargetClass()) { \n                // Rely on AOP infrastructure to tell us what interfaces to proxy.\n                Class\u003c?\u003e targetClass = getTargetClass();\n                if (targetClass == null) { \n                    throw new FactoryBeanNotInitializedException(\"Cannot determine target class for proxy\");\n                }\n                // 设置代理的接口\n                setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader));\n            }\n            // Initialize the shared singleton instance.\n            super.setFrozen(this.freezeProxy);\n            // 创建代理对象\n            this.singletonInstance = getProxy(createAopProxy());\n        }\n        return this.singletonInstance;\n    }\n\n    private synchronized Object newPrototypeInstance() { \n        // 通过当前配置的拷贝创建代理对象\n        ProxyCreatorSupport copy = new ProxyCreatorSupport(getAopProxyFactory());\n\n        TargetSource targetSource = freshTargetSource();\n        copy.copyConfigurationFrom(this, targetSource, freshAdvisorChain());\n        if (this.autodetectInterfaces \u0026\u0026 getProxiedInterfaces().length == 0 \u0026\u0026 !isProxyTargetClass()) { \n            // Rely on AOP infrastructure to tell us what interfaces to proxy.\n            Class\u003c?\u003e targetClass = targetSource.getTargetClass();\n            if (targetClass != null) { \n                copy.setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader));\n            }\n        }\n        copy.setFrozen(this.freezeProxy);\n\n        // 创建代理对象\n        return getProxy(copy.createAopProxy());\n    }\n\n    protected Object getProxy(AopProxy aopProxy) { \n        return aopProxy.getProxy(this.proxyClassLoader);\n    }\n\n    @Override\n    protected void adviceChanged() { \n        super.adviceChanged();\n        if (this.singleton) { \n            logger.debug(\"Advice has changed; re-caching singleton instance\");\n            synchronized (this) { \n                // 清除缓存的单例\n                this.singletonInstance = null;\n            }\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235547-qyngda1",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235547-qyngda1",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "AspectJProxyFactory"
				}
			]
		},
		{
			"ID": "20230408235547-6jtcp9r",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235547-6jtcp9r",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235547-9lstkm3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235547-9lstkm3",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AspectJ"
				},
				{
					"Type": "NodeText",
					"Data": "​的代理工厂，支持创建持有"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AspectJ"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://so.csdn.net/so/search?q=%E5%88%87%E9%9D%A2\u0026spm=1001.2101.3001.7020",
					"TextMarkTextContent": "切面"
				},
				{
					"Type": "NodeText",
					"Data": "的代理对象；"
				}
			]
		},
		{
			"ID": "20230408235547-zjulxys",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235547-zjulxys",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235547-ix1zhmm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235547-ix1zhmm",
				"updated": "20230408235547"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class AspectJProxyFactory extends ProxyCreatorSupport { \n\n    public void addAspect(Object aspectInstance) { \n        Class\u003c?\u003e aspectClass = aspectInstance.getClass();\n        String aspectName = aspectClass.getName();\n        AspectMetadata am = createAspectMetadata(aspectClass, aspectName);\n        if (am.getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON) { \n            throw new IllegalArgumentException(\n                    \"Aspect class [\" + aspectClass.getName() + \"] does not define a singleton aspect\");\n        }\n        addAdvisorsFromAspectInstanceFactory(\n                new SingletonMetadataAwareAspectInstanceFactory(aspectInstance, aspectName));\n    }\n\n    public void addAspect(Class\u003c?\u003e aspectClass) { \n        String aspectName = aspectClass.getName();\n        AspectMetadata am = createAspectMetadata(aspectClass, aspectName);\n        MetadataAwareAspectInstanceFactory instanceFactory = createAspectInstanceFactory(am, aspectClass, aspectName);\n        addAdvisorsFromAspectInstanceFactory(instanceFactory);\n    }\n\n    private void addAdvisorsFromAspectInstanceFactory(MetadataAwareAspectInstanceFactory instanceFactory) { \n        List\u003cAdvisor\u003e advisors = this.aspectFactory.getAdvisors(instanceFactory);\n        Class\u003c?\u003e targetClass = getTargetClass();\n        Assert.state(targetClass != null, \"Unresolvable target class\");\n        advisors = AopUtils.findAdvisorsThatCanApply(advisors, targetClass);\n        AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(advisors);\n        AnnotationAwareOrderComparator.sort(advisors);\n        addAdvisors(advisors);\n    }\n\n    private AspectMetadata createAspectMetadata(Class\u003c?\u003e aspectClass, String aspectName) { \n        AspectMetadata am = new AspectMetadata(aspectClass, aspectName);\n        if (!am.getAjType().isAspect()) { \n            throw new IllegalArgumentException(\"Class [\" + aspectClass.getName() + \"] is not a valid aspect type\");\n        }\n        return am;\n    }\n\n    private MetadataAwareAspectInstanceFactory createAspectInstanceFactory(\n            AspectMetadata am, Class\u003c?\u003e aspectClass, String aspectName) { \n\n        MetadataAwareAspectInstanceFactory instanceFactory;\n        if (am.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) { \n            // Create a shared aspect instance.\n            Object instance = getSingletonAspectInstance(aspectClass);\n            instanceFactory = new SingletonMetadataAwareAspectInstanceFactory(instance, aspectName);\n        }\n        else { \n            // Create a factory for independent aspect instances.\n            instanceFactory = new SimpleMetadataAwareAspectInstanceFactory(aspectClass, aspectName);\n        }\n        return instanceFactory;\n    }\n\n    private Object getSingletonAspectInstance(Class\u003c?\u003e aspectClass) { \n        return aspectCache.computeIfAbsent(aspectClass,\n                clazz -\u003e new SimpleAspectInstanceFactory(clazz).getAspectInstance());\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T getProxy() { \n        return (T) createAopProxy().getProxy();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T getProxy(ClassLoader classLoader) { \n        return (T) createAopProxy().getProxy(classLoader);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}