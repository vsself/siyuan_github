{
	"ID": "20230409000131-t70e15l",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230409000131-t70e15l",
		"title": "spring 中aop的advisor和aspect的区别_深蓝22的博客-CSDN博客",
		"updated": "20230409000131"
	},
	"Children": [
		{
			"ID": "20230409000131-tf95ypy",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230409000131-tf95ypy",
				"updated": "20230409000131"
			}
		},
		{
			"ID": "20230409000131-z8g1lfr",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230409000131-z8g1lfr",
				"updated": "20230409000131"
			},
			"Children": [
				{
					"ID": "20230409000131-9yhd4rx",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230409000131-9yhd4rx",
						"updated": "20230409000131"
					},
					"Children": [
						{
							"ID": "20230409000131-euwqj4x",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230409000131-euwqj4x",
								"updated": "20230409000131"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_25087307/article/details/85338521",
									"TextMarkTextContent": "https://blog.csdn.net/qq_25087307/article/details/85338521"
								}
							]
						}
					]
				},
				{
					"ID": "20230409000131-vovgtwy",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230409000131-vovgtwy",
						"updated": "20230409000131"
					},
					"Children": [
						{
							"ID": "20230409000131-cxi8qyi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230409000131-cxi8qyi",
								"updated": "20230409000131"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "spring 中的aop:advisor和aop:aspect的区别在AOP中有几个概念：— 方面（Aspect）：一个关注点的模块化，这个关注点实现可能另外横切多个对象。事务管理是J2EE应用中一个很好的横切关注点例子。方面用Spring的Advisor或拦截器实现。— 连接点（Joinpoint）：程序执行过程中明确的点，如方法的调用或特定的异常被抛出。— 通知（Advice）：在特定..."
								}
							]
						}
					]
				},
				{
					"ID": "20230409000131-vlx64w6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230409000131-vlx64w6",
						"updated": "20230409000131"
					},
					"Children": [
						{
							"ID": "20230409000131-l074t3r",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230409000131-l074t3r",
								"updated": "20230409000131"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2023-04-09 00:01:31"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230409000131-z02wqtx",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230409000131-z02wqtx",
				"updated": "20230409000131"
			}
		},
		{
			"ID": "20230409000131-xrqy90b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230409000131-xrqy90b",
				"updated": "20230409000131"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "spring 中的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://so.csdn.net/so/search?q=aop\u0026spm=1001.2101.3001.7020",
					"TextMarkTextContent": "aop"
				},
				{
					"Type": "NodeText",
					"Data": ":advisor和aop:aspect的区别"
				}
			]
		},
		{
			"ID": "20230409000131-uceuuo7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230409000131-uceuuo7",
				"updated": "20230409000131"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在AOP中有几个概念：\n— 方面（Aspect）：一个关注点的模块化，这个关注点实现可能另外横切多个对象。事务管理是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://so.csdn.net/so/search?q=J2EE\u0026spm=1001.2101.3001.7020",
					"TextMarkTextContent": "J2EE"
				},
				{
					"Type": "NodeText",
					"Data": "应用中一个很好的横切关注点例子。方面用Spring的Advisor或拦截器实现。"
				}
			]
		},
		{
			"ID": "20230409000131-iu57czu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230409000131-iu57czu",
				"updated": "20230409000131"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "— 连接点（Joinpoint）：程序执行过程中明确的点，如方法的调用或特定的异常被抛出。"
				}
			]
		},
		{
			"ID": "20230409000131-6byb1on",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230409000131-6byb1on",
				"updated": "20230409000131"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "— 通知（Advice）：在特定的连接点，AOP框架执行的动作。各种类型的通知包括“around”、“before”和“throws”通知。"
				}
			]
		},
		{
			"ID": "20230409000131-5u3n82x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230409000131-5u3n82x",
				"updated": "20230409000131"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "— 切入点（Pointcut）：指定一个通知将被引发的一系列连接点的集合。AOP框架必须允许开发者指定切入点，例如，使用正则表达式。"
				}
			]
		},
		{
			"ID": "20230409000131-yit8zdk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230409000131-yit8zdk",
				"updated": "20230409000131"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "所以aop:aspect实际上是定义横切逻辑，就是在连接点上做什么，aop:advisor则定义了在哪些连接点上应用什么aop:aspect。Spring这样做的好处就是可以让多个横切逻辑 （即aop:aspect定义的）多次使用，提供可重用性。\n总的来说：\n1、Adivisor是一种特殊的Aspect，Advisor代表spring中的Aspect\n2、advisor只持有一个Pointcut和一个advice，而aspect可以多个pointcut和多个advice"
				}
			]
		},
		{
			"ID": "20230409000131-0ejkui4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230409000131-0ejkui4",
				"updated": "20230409000131"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003c!-- 准备工作: 导入aop名称空间 --\u003e\n\n\t\u003c!-- 1. 配置目标对象--\u003e\n\t\u003cbean name=\"userService\" class=\"com.tz.service.UserServiceImpl\"\u003e\u003c/bean\u003e\n\n\t\u003c!-- 2. 配置通知对象--\u003e\n\t\u003cbean name=\"myAdvice\" class=\"com.tz.service.MyAdvice\"\u003e\u003c/bean\u003e\n\t\u003caop:config\u003e\n\t\t\u003c!-- 配置切入点 \n\t\t\texecution(* com.xyz.myapp.service.*.*(..))\n\t\t\n\t\t\tpublic void com.tz.service.UserServiceImpl.savle()\n\t\t\t\t      * com.tz.service.UserServiceImpl.*()\t//public 可以省略\n\t\t\t\t      * com.tz.service.*ServiceImpl.*(..)   //..表示可变参  //以ServiceImpl结尾的切入点\n\t\t\t\t      * com.tz.service..*ServiceImpl.*(..)   //如果serive下面还有其它层，用..\n\t\t\n\t\t--\u003e\n\t\t\u003c!-- 配置切入点  --\u003e\n\t\t\u003caop:pointcut expression=\"execution(* com.tz.service..*ServiceImpl.*(..))\" id=\"pointcut\"/\u003e\n\t\t\u003c!-- 配置切面： 切入点+通知 --\u003e\n\t\t\u003caop:aspect ref=\"myAdvice\"\u003e\n\t\t\t\u003c!-- 前置通知  --\u003e\n\t\t\t\u003caop:before method=\"before\" pointcut-ref=\"pointcut\"/\u003e\n\t\t\t\u003c!-- 后置通知（如果出现异常不会调用） --\u003e\n\t\t\t\u003caop:after-returning method=\"afterReturning\" pointcut-ref=\"pointcut\"/\u003e\n\t\t\t\u003c!-- 环绕通知 --\u003e\n\t\t\t\u003caop:around method=\"around\" pointcut-ref=\"pointcut\"/\u003e\n\t\t\t\u003c!-- 异常拦截通知 --\u003e\n\t\t\t\u003caop:after-throwing method=\"afterException\" pointcut-ref=\"pointcut\"/\u003e\n\t\t\t\u003c!-- 后置通知（无论是否出现异常都会调用） --\u003e\n\t\t\t\u003caop:after method=\"after\" pointcut-ref=\"pointcut\"/\u003e\n\t\t\u003c/aop:aspect\u003e\n\n\t\n\t\u003c/aop:config\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230409000131-z1kfni7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230409000131-z1kfni7",
				"updated": "20230409000131"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003c!-- 配置事物通知 --\u003e\n\t\u003ctx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\"\u003e\n\t\t\u003ctx:attributes\u003e\n\t\t\t\u003c!--  以方法为单位 ，指定方法应用那个事物属性\n\t\t\t\tisolation:隔离级别  -   1 读未提交  \t2 读已提交 \t4可重复读 \t8 串行化 \n\t\t\t\tpropagation：传播行为\n\t\t\t\tread-only：是否只读\n\t\t\t --\u003e\n\t\t\t\u003ctx:method name=\"udpate*\" isolation=\"REPEATABLE_READ\" propagation=\"REQUIRED\" read-only=\"false\"/\u003e\t\n\t\t\u003c!--\u003ctx:method name=\"persist*\" isolation=\"REPEATABLE_READ\" propagation=\"REQUIRED\" read-only=\"true\"/\u003e\t\n\t\t\t\u003ctx:method name=\"modify*\" isolation=\"REPEATABLE_READ\" propagation=\"REQUIRED\" read-only=\"false\"/\u003e\t\n\t\t\t\u003ctx:method name=\"delete*\" isolation=\"REPEATABLE_READ\" propagation=\"REQUIRED\" read-only=\"false\"/\u003e\t\n\t\t\t\u003ctx:method name=\"remove*\" isolation=\"REPEATABLE_READ\" propagation=\"REQUIRED\" read-only=\"false\"/\u003e\t\n\t\t\t\u003ctx:method name=\"get*\" isolation=\"REPEATABLE_READ\" propagation=\"REQUIRED\" read-only=\"true\"/\u003e\t\n\t\t\t\u003ctx:method name=\"find*\" isolation=\"REPEATABLE_READ\" propagation=\"REQUIRED\" read-only=\"true\"/\u003e --\u003e\n\t\t\t\u003ctx:method name=\"tranAccount*\" isolation=\"REPEATABLE_READ\" propagation=\"REQUIRED\" read-only=\"false\"/\u003e\t\n\t\t\u003c/tx:attributes\u003e\n\t\u003c/tx:advice\u003e\n\n\t\u003c!-- 配置织入 --\u003e\n\t\u003caop:config\u003e\n\t\t\u003c!-- 配置切入点  --\u003e\n\t\t\u003caop:pointcut expression=\"execution(* com.tz.service..*ServiceImpl.*(..))\" id=\"pointcut\"/\u003e\n\t\n\t\t\u003c!-- 配置切面： 切入点+通知 \n\t\t\t\tadvice-ref:通知的名字  |  pointcut-ref：切入点的名称\t--\u003e\n\t\t\u003caop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"pointcut\"/\u003e\n\t\n\t\u003c/aop:config\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}