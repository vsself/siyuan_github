{
	"ID": "20230408235517-5s45qou",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230408235517-5s45qou",
		"title": "Spring AOP基础组件 Advisor_spring advisor_我家有猫已长成的博客-CSDN博客",
		"updated": "20230408235517"
	},
	"Children": [
		{
			"ID": "20230408235517-0v30zc0",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230408235517-0v30zc0",
				"updated": "20230408235517"
			}
		},
		{
			"ID": "20230408235517-suhf3eq",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230408235517-suhf3eq",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"ID": "20230408235517-1q9xic4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230408235517-1q9xic4",
						"updated": "20230408235517"
					},
					"Children": [
						{
							"ID": "20230408235517-6riotwg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230408235517-6riotwg",
								"updated": "20230408235517"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/xing_hung/article/details/122830287?spm=1001.2101.3001.6661.1\u0026utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-122830287-blog-117126792.235%5Ev28%5Epc_relevant_recovery_v2\u0026depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-122830287-blog-117126792.235%5Ev28%5Epc_relevant_recovery_v2\u0026utm_relevant_index=1",
									"TextMarkTextContent": "https://blog.csdn.net/xing_hung/article/details/122830287?spm=1001.2101.3001.6661.1\u0026amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-122830287-blog-117126792.235%5Ev28%5Epc_relevant_recovery_v2\u0026amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-122830287-blog-117126792.235%5Ev28%5Epc_relevant_recovery_v2\u0026amp;utm_relevant_index=1"
								}
							]
						}
					]
				},
				{
					"ID": "20230408235517-9cwu800",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230408235517-9cwu800",
						"updated": "20230408235517"
					},
					"Children": [
						{
							"ID": "20230408235517-wqxzws8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230408235517-wqxzws8",
								"updated": "20230408235517"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Spring AOP基础组件 Advisor 简介。"
								}
							]
						}
					]
				},
				{
					"ID": "20230408235517-ipom9gy",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230408235517-ipom9gy",
						"updated": "20230408235517"
					},
					"Children": [
						{
							"ID": "20230408235517-u5naao7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230408235517-u5naao7",
								"updated": "20230408235517"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2023-04-08 23:55:17"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230408235517-pjwexcq",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230408235517-pjwexcq",
				"updated": "20230408235517"
			}
		},
		{
			"ID": "20230408235517-tisupxg",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235517-tisupxg",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "相关阅读"
				}
			]
		},
		{
			"ID": "20230408235517-me1ti1n",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230408235517-me1ti1n",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"ID": "20230408235517-40uamcp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230408235517-40uamcp",
						"updated": "20230408235517"
					},
					"Children": [
						{
							"ID": "20230408235517-pp2yd4v",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230408235517-pp2yd4v",
								"updated": "20230408235517"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/xing_hung/article/details/122815139",
									"TextMarkTextContent": "Spring AOP基础组件 Pointcut"
								}
							]
						}
					]
				},
				{
					"ID": "20230408235517-ynp8mf6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230408235517-ynp8mf6",
						"updated": "20230408235517"
					},
					"Children": [
						{
							"ID": "20230408235517-326o6ot",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230408235517-326o6ot",
								"updated": "20230408235517"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/xing_hung/article/details/122830200",
									"TextMarkTextContent": "Spring AOP基础组件 Advice"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230408235517-4fyg32z",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235517-4fyg32z",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235517-alrqlma",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235517-alrqlma",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "持有AOP "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advice"
				},
				{
					"Type": "NodeText",
					"Data": "​和决定"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advice"
				},
				{
					"Type": "NodeText",
					"Data": "​适用性的过滤器（比如"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Pointcut"
				},
				{
					"Type": "NodeText",
					"Data": "​）的基础接口；\nSpring AOP基于符合AOP拦截API的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MethodInterceptor"
				},
				{
					"Type": "NodeText",
					"Data": "​支持通知，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advisor"
				},
				{
					"Type": "NodeText",
					"Data": "​接口允许支持不同类型的通知，比如：前置通知、后置通知这些不需要通过拦截器实现的通知；"
				}
			]
		},
		{
			"ID": "20230408235517-7mkh9t2",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235517-7mkh9t2",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "源码"
				}
			]
		},
		{
			"ID": "20230408235517-ybpq16q",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235517-ybpq16q",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public interface Advisor { \n\n    // 空通知\n    Advice EMPTY_ADVICE = new Advice() { };\n\n    // 获取通知，可以是拦截器、前置通知、抛出异常通知等\n    Advice getAdvice();\n\n    // 是否和每个被通知的实例相关\n    // 当前框架还未用到该方法，可以通过单例/多例，或者恰当的代理创建来确保Advisor的生命周期正确\n    boolean isPerInstance();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235517-1o6quzk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235517-1o6quzk",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实现子类"
				}
			]
		},
		{
			"ID": "20230408235517-65d03xn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235517-65d03xn",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Advisor"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/9cf4dde664c746579095e2aec515af39-20230408235517-8n0ayio.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230408235517-wdvea6g",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235517-wdvea6g",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "IntroductionAdvisor"
				}
			]
		},
		{
			"ID": "20230408235517-9lh17ln",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235517-9lh17ln",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235517-05e2221",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235517-05e2221",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "支持AOP "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "引介"
				},
				{
					"Type": "NodeText",
					"Data": "​功能的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advisor"
				},
				{
					"Type": "NodeText",
					"Data": "​的基础接口；"
				}
			]
		},
		{
			"ID": "20230408235517-rkifsmw",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235517-rkifsmw",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235517-8d3aild",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235517-8d3aild",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public interface IntroductionAdvisor extends Advisor, IntroductionInfo { \n\n    // 获取决定引介适用性的类过滤器\n    ClassFilter getClassFilter();\n\n    // 校验被通知的接口是否可以应用该IntroductionAdvisor\n    void validateInterfaces() throws IllegalArgumentException;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235517-hjebt7n",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235517-hjebt7n",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "DefaultIntroductionAdvisor"
				}
			]
		},
		{
			"ID": "20230408235517-1gjcqf5",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235517-1gjcqf5",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235517-0qy98ln",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235517-0qy98ln",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "IntroductionAdvisor"
				},
				{
					"Type": "NodeText",
					"Data": "​的简单实现，默认地应用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "引介"
				},
				{
					"Type": "NodeText",
					"Data": "​到任意类型；"
				}
			]
		},
		{
			"ID": "20230408235517-m4w3kjy",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235517-m4w3kjy",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235517-4axugym",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235517-4axugym",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class DefaultIntroductionAdvisor implements IntroductionAdvisor, ClassFilter, Ordered, Serializable { \n\n    private final Advice advice;\n\n    private final Set\u003cClass\u003c?\u003e\u003e interfaces = new LinkedHashSet\u003c\u003e();\n\n\n    public DefaultIntroductionAdvisor(Advice advice, @Nullable IntroductionInfo introductionInfo) { \n        // 校验Advice\n        Assert.notNull(advice, \"Advice must not be null\");\n        this.advice = advice;\n        if (introductionInfo != null) { \n            Class\u003c?\u003e[] introducedInterfaces = introductionInfo.getInterfaces();\n            if (introducedInterfaces.length == 0) { \n                throw new IllegalArgumentException(\n                        \"IntroductionInfo defines no interfaces to introduce: \" + introductionInfo);\n            }\n            // 应用引介接口信息\n            for (Class\u003c?\u003e ifc : introducedInterfaces) { \n                addInterface(ifc);\n            }\n        }\n    }\n\n    public DefaultIntroductionAdvisor(DynamicIntroductionAdvice advice, Class\u003c?\u003e ifc) { \n        // 校验Advice\n        Assert.notNull(advice, \"Advice must not be null\");\n        this.advice = advice;\n        addInterface(ifc);\n    }\n\n    public void addInterface(Class\u003c?\u003e ifc) { \n        Assert.notNull(ifc, \"Interface must not be null\");\n        if (!ifc.isInterface()) { \n            throw new IllegalArgumentException(\"Specified class [\" + ifc.getName() + \"] must be an interface\");\n        }\n        this.interfaces.add(ifc);\n    }\n\n    @Override\n    public Class\u003c?\u003e[] getInterfaces() { \n        return ClassUtils.toClassArray(this.interfaces);\n    }\n\n    @Override\n    public void validateInterfaces() throws IllegalArgumentException { \n        for (Class\u003c?\u003e ifc : this.interfaces) { \n            // 校验当前Advice是否支持所有的interfaces\n            if (this.advice instanceof DynamicIntroductionAdvice \u0026\u0026\n                    !((DynamicIntroductionAdvice) this.advice).implementsInterface(ifc)) { \n                throw new IllegalArgumentException(\"DynamicIntroductionAdvice [\" + this.advice + \"] \" +\n                        \"does not implement interface [\" + ifc.getName() + \"] specified for introduction\");\n            }\n        }\n    }\n\n    @Override\n    public Advice getAdvice() { \n        return this.advice;\n    }\n\n    @Override\n    public boolean isPerInstance() { \n        return true;\n    }\n\n    @Override\n    public ClassFilter getClassFilter() { \n        // 返回自身\n        return this;\n    }\n\n    @Override\n    public boolean matches(Class\u003c?\u003e clazz) { \n        // 匹配任意类型\n        return true;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235517-xna29ki",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235517-xna29ki",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "PointcutAdvisor"
				}
			]
		},
		{
			"ID": "20230408235517-4u1lu1w",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235517-4u1lu1w",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235517-4z5brqa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235517-4z5brqa",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "由"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Pointcut"
				},
				{
					"Type": "NodeText",
					"Data": "​驱动的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advisor"
				},
				{
					"Type": "NodeText",
					"Data": "​的基础接口；\n含盖了除"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "引介Advisor"
				},
				{
					"Type": "NodeText",
					"Data": "​外几乎所有的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advisor"
				},
				{
					"Type": "NodeText",
					"Data": "​；"
				}
			]
		},
		{
			"ID": "20230408235517-9liev5v",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235517-9liev5v",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235517-2d6cc02",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235517-2d6cc02",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public interface PointcutAdvisor extends Advisor { \n\n    // 获取Pointcut\n    Pointcut getPointcut();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235517-p7f22r3",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235517-p7f22r3",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "StaticMethodMatcherPointcutAdvisor"
				}
			]
		},
		{
			"ID": "20230408235517-1yx7twa",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235517-1yx7twa",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235517-ox4iklw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235517-ox4iklw",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "同时作为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "StaticMethodMatcherPointcut"
				},
				{
					"Type": "NodeText",
					"Data": "​的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advisor"
				},
				{
					"Type": "NodeText",
					"Data": "​的基础抽象类；"
				}
			]
		},
		{
			"ID": "20230408235517-6k3qo2c",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235517-6k3qo2c",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235517-e5x57h9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235517-e5x57h9",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public abstract class StaticMethodMatcherPointcutAdvisor extends StaticMethodMatcherPointcut\n        implements PointcutAdvisor, Ordered, Serializable { \n\n    // 默认空通知\n    private Advice advice = EMPTY_ADVICE;\n\n\n    public StaticMethodMatcherPointcutAdvisor(Advice advice) { \n        // 校验Advice\n        Assert.notNull(advice, \"Advice must not be null\");\n        this.advice = advice;\n    }\n\n    @Override\n    public Advice getAdvice() { \n        return this.advice;\n    }\n\n    @Override\n    public boolean isPerInstance() { \n        return true;\n    }\n\n    @Override\n    public Pointcut getPointcut() { \n        // 返回自身\n        return this;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235517-r0fol7s",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235517-r0fol7s",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "AspectJPointcutAdvisor"
				}
			]
		},
		{
			"ID": "20230408235517-go6cx0e",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235517-go6cx0e",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235517-54pkt2d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235517-54pkt2d",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "适配"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AbstractAspectJAdvice"
				},
				{
					"Type": "NodeText",
					"Data": "​为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "PointcutAdvisor"
				},
				{
					"Type": "NodeText",
					"Data": "​接口；"
				}
			]
		},
		{
			"ID": "20230408235517-rt7e91o",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235517-rt7e91o",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235517-gg9tt50",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235517-gg9tt50",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class AspectJPointcutAdvisor implements PointcutAdvisor, Ordered { \n\n    private final AbstractAspectJAdvice advice;\n\n    private final Pointcut pointcut;\n\n\n    public AspectJPointcutAdvisor(AbstractAspectJAdvice advice) { \n        // 校验Advice\n        Assert.notNull(advice, \"Advice must not be null\");\n        this.advice = advice;\n        this.pointcut = advice.buildSafePointcut();\n    }\n\n    @Override\n    public boolean isPerInstance() { \n        return true;\n    }\n\n    @Override\n    public Advice getAdvice() { \n        return this.advice;\n    }\n\n    @Override\n    public Pointcut getPointcut() { \n        return this.pointcut;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235517-b3amnm9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235517-b3amnm9",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "AsyncAnnotationAdvisor"
				}
			]
		},
		{
			"ID": "20230408235517-fmj7mma",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235517-fmj7mma",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235517-y37w5h6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235517-y37w5h6",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Spring Async功能的实现，支持通过@"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Async"
				},
				{
					"Type": "NodeText",
					"Data": "​注解和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "javax.ejb.Asynchronous"
				},
				{
					"Type": "NodeText",
					"Data": "​注解来激活异步方法执行的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advisor"
				},
				{
					"Type": "NodeText",
					"Data": "​；"
				}
			]
		},
		{
			"ID": "20230408235517-6n56bpv",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235517-6n56bpv",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235517-fyqikmw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235517-fyqikmw",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class AsyncAnnotationAdvisor extends AbstractPointcutAdvisor implements BeanFactoryAware { \n\n    private Advice advice;\n\n    private Pointcut pointcut;\n\n\n    public AsyncAnnotationAdvisor(\n            @Nullable Supplier\u003cExecutor\u003e executor, @Nullable Supplier\u003cAsyncUncaughtExceptionHandler\u003e exceptionHandler) { \n\n        // 默认支持Async和javax.ejb.Asynchronous，故size为2\n        Set\u003cClass\u003c? extends Annotation\u003e\u003e asyncAnnotationTypes = new LinkedHashSet\u003c\u003e(2);\n        asyncAnnotationTypes.add(Async.class);\n        try { \n            asyncAnnotationTypes.add((Class\u003c? extends Annotation\u003e)\n                    ClassUtils.forName(\"javax.ejb.Asynchronous\", AsyncAnnotationAdvisor.class.getClassLoader()));\n        }\n        catch (ClassNotFoundException ex) { \n            // If EJB 3.1 API not present, simply ignore.\n        }\n        // 根据异步执行器和异常处理器生成Advice\n        this.advice = buildAdvice(executor, exceptionHandler);\n        // 生成Pointcut\n        this.pointcut = buildPointcut(asyncAnnotationTypes);\n    }\n\n    @Override\n    public Advice getAdvice() { \n        return this.advice;\n    }\n\n    @Override\n    public Pointcut getPointcut() { \n        return this.pointcut;\n    }\n\n    protected Advice buildAdvice(\n            @Nullable Supplier\u003cExecutor\u003e executor, @Nullable Supplier\u003cAsyncUncaughtExceptionHandler\u003e exceptionHandler) { \n        // 使用AnnotationAsyncExecutionInterceptor\n        AnnotationAsyncExecutionInterceptor interceptor = new AnnotationAsyncExecutionInterceptor(null);\n        interceptor.configure(executor, exceptionHandler);\n        return interceptor;\n    }\n\n    protected Pointcut buildPointcut(Set\u003cClass\u003c? extends Annotation\u003e\u003e asyncAnnotationTypes) { \n        ComposablePointcut result = null;\n        // 遍历注解类型集合，得到一个ComposablePointcut\n        for (Class\u003c? extends Annotation\u003e asyncAnnotationType : asyncAnnotationTypes) { \n            // 匹配类，忽略方法（MethodMatcher.TRUE）\n            Pointcut cpc = new AnnotationMatchingPointcut(asyncAnnotationType, true);\n            // 匹配方法，忽略类（ClassFilter.TRUE）\n            Pointcut mpc = new AnnotationMatchingPointcut(null, asyncAnnotationType, true);\n            if (result == null) { \n                result = new ComposablePointcut(cpc);\n            }\n            else { \n                result.union(cpc);\n            }\n            result = result.union(mpc);\n        }\n        // 若不存在注解类型，则认为全匹配\n        return (result != null ? result : Pointcut.TRUE);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235517-dpfqm5j",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235517-dpfqm5j",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "BeanFactoryCacheOperationSourceAdvisor"
				}
			]
		},
		{
			"ID": "20230408235517-4annc12",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235517-4annc12",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235517-vpwpxhl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235517-vpwpxhl",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Spring Cache功能的实现，基于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CacheOperationSource"
				},
				{
					"Type": "NodeText",
					"Data": "​实现的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advisor"
				},
				{
					"Type": "NodeText",
					"Data": "​，内部持有"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advice"
				},
				{
					"Type": "NodeText",
					"Data": "​实例；"
				}
			]
		},
		{
			"ID": "20230408235517-n366xe3",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235517-n366xe3",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235517-tmqutls",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235517-tmqutls",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class BeanFactoryCacheOperationSourceAdvisor extends AbstractBeanFactoryPointcutAdvisor { \n\n    // 判断当前方法是否有缓存注解，被CacheOperationSourcePointcut用来实现切入点逻辑\n    @Nullable\n    private CacheOperationSource cacheOperationSource;\n\n    // 使用基于CacheOperationSource的CacheOperationSourcePointcut作为pointcut\n    private final CacheOperationSourcePointcut pointcut = new CacheOperationSourcePointcut() { \n        @Override\n        @Nullable\n        protected CacheOperationSource getCacheOperationSource() { \n            return cacheOperationSource;\n        }\n    };\n\n    @Override\n    public Pointcut getPointcut() { \n        return this.pointcut;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235517-nwybhoe",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235517-nwybhoe",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "BeanFactoryTransactionAttributeSourceAdvisor"
				}
			]
		},
		{
			"ID": "20230408235517-msfss42",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235517-msfss42",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235517-q28dpsu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235517-q28dpsu",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Spring 注解驱动的事务管理功能的实现，基于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "TransactionAttributeSource"
				},
				{
					"Type": "NodeText",
					"Data": "​实现的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advisor"
				},
				{
					"Type": "NodeText",
					"Data": "​，内部持有"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advice"
				},
				{
					"Type": "NodeText",
					"Data": "​实例；"
				}
			]
		},
		{
			"ID": "20230408235517-ms0bx87",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235517-ms0bx87",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心方法"
				}
			]
		},
		{
			"ID": "20230408235517-2pu45tk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235517-2pu45tk",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class BeanFactoryTransactionAttributeSourceAdvisor extends AbstractBeanFactoryPointcutAdvisor { \n\n    // 判断当前方法是否有@Transactional注解，被TransactionAttributeSourcePointcut用来实现切入点逻辑\n    @Nullable\n    private TransactionAttributeSource transactionAttributeSource;\n\n    // 使用基于TransactionAttributeSource的TransactionAttributeSourcePointcut作为pointcut\n    private final TransactionAttributeSourcePointcut pointcut = new TransactionAttributeSourcePointcut() { \n        @Override\n        @Nullable\n        protected TransactionAttributeSource getTransactionAttributeSource() { \n            return transactionAttributeSource;\n        }\n    };\n\n    @Override\n    public Pointcut getPointcut() { \n        return this.pointcut;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235517-zww6d8r",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235517-zww6d8r",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "TransactionAttributeSourceAdvisor"
				}
			]
		},
		{
			"ID": "20230408235517-v4nmv3i",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235517-v4nmv3i",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235517-yrfvna9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235517-yrfvna9",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Spring 注解驱动的事务管理功能的实现，基于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "TransactionAttributeSource"
				},
				{
					"Type": "NodeText",
					"Data": "​实现的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advisor"
				},
				{
					"Type": "NodeText",
					"Data": "​，内部持有"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "TransactionInterceptor"
				},
				{
					"Type": "NodeText",
					"Data": "​实例；"
				}
			]
		},
		{
			"ID": "20230408235517-a8aabpr",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235517-a8aabpr",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235517-vg0ojvy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235517-vg0ojvy",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class TransactionAttributeSourceAdvisor extends AbstractPointcutAdvisor { \n\n    // 被TransactionAttributeSourcePointcut用来实现切入点逻辑\n    @Nullable\n    private TransactionInterceptor transactionInterceptor;\n\n    // 使用基于TransactionAttributeSource的TransactionAttributeSourcePointcut作为pointcut\n    private final TransactionAttributeSourcePointcut pointcut = new TransactionAttributeSourcePointcut() { \n        @Override\n        @Nullable\n        protected TransactionAttributeSource getTransactionAttributeSource() { \n            return (transactionInterceptor != null ? transactionInterceptor.getTransactionAttributeSource() : null);\n        }\n    };\n\n\n    @Override\n    public Advice getAdvice() { \n        Assert.state(this.transactionInterceptor != null, \"No TransactionInterceptor set\");\n        return this.transactionInterceptor;\n    }\n\n    @Override\n    public Pointcut getPointcut() { \n        return this.pointcut;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235517-40kn3qf",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235517-40kn3qf",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "DefaultPointcutAdvisor"
				}
			]
		},
		{
			"ID": "20230408235517-6qoy38q",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235517-6qoy38q",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235517-wctayo7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235517-wctayo7",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "几乎最通用的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "PointcutAdvisor"
				},
				{
					"Type": "NodeText",
					"Data": "​的实现，可以使用任意类型"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Pointcut"
				},
				{
					"Type": "NodeText",
					"Data": "​和除"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "引介"
				},
				{
					"Type": "NodeText",
					"Data": "​外任意类型"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advice"
				},
				{
					"Type": "NodeText",
					"Data": "​；"
				}
			]
		},
		{
			"ID": "20230408235517-dtjzma3",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235517-dtjzma3",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235517-zhlbx10",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235517-zhlbx10",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class DefaultPointcutAdvisor extends AbstractGenericPointcutAdvisor implements Serializable { \n\n    private Pointcut pointcut = Pointcut.TRUE;\n\n\n    public DefaultPointcutAdvisor(Pointcut pointcut, Advice advice) { \n        this.pointcut = pointcut;\n        setAdvice(advice);\n    }\n\n    public void setPointcut(@Nullable Pointcut pointcut) { \n        this.pointcut = (pointcut != null ? pointcut : Pointcut.TRUE);\n    }\n\n    @Override\n    public Pointcut getPointcut() { \n        return this.pointcut;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235517-v95cny4",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235517-v95cny4",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "NameMatchMethodPointcutAdvisor"
				}
			]
		},
		{
			"ID": "20230408235517-uwxsr9z",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235517-uwxsr9z",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235517-577vc4i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235517-577vc4i",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "NameMatchMethodPointcut"
				},
				{
					"Type": "NodeText",
					"Data": "​的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advisor"
				},
				{
					"Type": "NodeText",
					"Data": "​；"
				}
			]
		},
		{
			"ID": "20230408235517-g31w25v",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235517-g31w25v",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235517-m38o8au",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235517-m38o8au",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class NameMatchMethodPointcutAdvisor extends AbstractGenericPointcutAdvisor { \n\n    private final NameMatchMethodPointcut pointcut = new NameMatchMethodPointcut();\n\n\n    public NameMatchMethodPointcutAdvisor(Advice advice) { \n        setAdvice(advice);\n    }\n\n    public void setMappedName(String mappedName) { \n        this.pointcut.setMappedName(mappedName);\n    }\n\n    public void setMappedNames(String... mappedNames) { \n        this.pointcut.setMappedNames(mappedNames);\n    }\n\n    public NameMatchMethodPointcut addMethodName(String name) { \n        return this.pointcut.addMethodName(name);\n    }\n\n    @Override\n    public Pointcut getPointcut() { \n        return this.pointcut;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235517-xwlv3n6",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235517-xwlv3n6",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "RegexpMethodPointcutAdvisor"
				}
			]
		},
		{
			"ID": "20230408235517-7qip2tn",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235517-7qip2tn",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235517-86lvj3g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235517-86lvj3g",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AbstractRegexpMethodPointcut"
				},
				{
					"Type": "NodeText",
					"Data": "​的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advisor"
				},
				{
					"Type": "NodeText",
					"Data": "​；"
				}
			]
		},
		{
			"ID": "20230408235517-cs4nknf",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235517-cs4nknf",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235517-eglpby6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235517-eglpby6",
				"updated": "20230408235517"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class RegexpMethodPointcutAdvisor extends AbstractGenericPointcutAdvisor { \n\n    @Nullable\n    private String[] patterns;\n\n    @Nullable\n    private AbstractRegexpMethodPointcut pointcut;\n\n\n    public RegexpMethodPointcutAdvisor(String pattern, Advice advice) { \n        setPattern(pattern);\n        setAdvice(advice);\n    }\n\n    public RegexpMethodPointcutAdvisor(String[] patterns, Advice advice) { \n        setPatterns(patterns);\n        setAdvice(advice);\n    }\n\n    @Override\n    public Pointcut getPointcut() { \n        synchronized (this.pointcutMonitor) { \n            if (this.pointcut == null) { \n                this.pointcut = createPointcut();\n                if (this.patterns != null) { \n                    //设置正则表达式\n                    this.pointcut.setPatterns(this.patterns);\n                }\n            }\n            return this.pointcut;\n        }\n    }\n\n    protected AbstractRegexpMethodPointcut createPointcut() { \n        // 使用JdkRegexpMethodPointcut\n        return new JdkRegexpMethodPointcut();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}