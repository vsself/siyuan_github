{
	"ID": "20230402000311-ktpdx6a",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230402000311-ktpdx6a",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230402000311-ga4aqc7\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230402000311-cd767ya\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230402000311-ga4aqc7\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0}",
		"title": "【追根究底】doCreateBean中为什么会对earlySingletonExposure处理两次_earlsingleexposure判断__acme_的博客-CSDN博客",
		"updated": "20230402000311"
	},
	"Children": [
		{
			"ID": "20230402000311-ga4aqc7",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230402000311-ga4aqc7",
				"updated": "20230402000311"
			}
		},
		{
			"ID": "20230402000311-o6rr2dl",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230402000311-o6rr2dl",
				"updated": "20230402000311"
			},
			"Children": [
				{
					"ID": "20230402000311-zi1cv86",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230402000311-zi1cv86",
						"updated": "20230402000311"
					},
					"Children": [
						{
							"ID": "20230402000311-g1sttgd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230402000311-g1sttgd",
								"updated": "20230402000311"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_18297675/article/details/103674833",
									"TextMarkTextContent": "https://blog.csdn.net/qq_18297675/article/details/103674833"
								}
							]
						}
					]
				},
				{
					"ID": "20230402000311-us83mw5",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230402000311-us83mw5",
						"updated": "20230402000311"
					},
					"Children": [
						{
							"ID": "20230402000311-4lka8h9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230402000311-4lka8h9",
								"updated": "20230402000311"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "mark",
									"TextMarkTextContent": "\u0026gt; 学习汇总（持续更新）"
								},
								{
									"Type": "NodeText",
									"Data": "\u003e 从零搭建后端基础设施系列（一）-- 背景介绍问题对应的代码片段protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final @Nullable Object[] args)\t\tthrows BeanCreationExce..."
								}
							]
						}
					]
				},
				{
					"ID": "20230402000311-9byx5n8",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230402000311-9byx5n8",
						"updated": "20230402000311"
					},
					"Children": [
						{
							"ID": "20230402000311-yxy9vaa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230402000311-yxy9vaa",
								"updated": "20230402000311"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2023-04-02 00:03:10"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230402000311-3c805f1",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230402000311-3c805f1",
				"updated": "20230402000311"
			}
		},
		{
			"ID": "20230402000311-tvgpict",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230402000311-tvgpict",
				"updated": "20230402000311"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "==\u003e "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong a",
					"TextMarkAHref": "https://xiejun.blog.csdn.net/article/details/103036852",
					"TextMarkTextContent": "学习汇总（持续更新）"
				},
				{
					"Type": "NodeText",
					"Data": "\n==\u003e "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong a",
					"TextMarkAHref": "https://xiejun.blog.csdn.net/article/details/96602739",
					"TextMarkTextContent": "从零搭建后端基础设施系列（一）-- 背景介绍"
				}
			]
		},
		{
			"ID": "20230402000311-jwlnhjq",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230402000311-jwlnhjq",
				"updated": "20230402000311"
			}
		},
		{
			"ID": "20230402000311-cd767ya",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230402000311-cd767ya",
				"updated": "20230402000311"
			},
			"Children": [
				{
					"ID": "20230402000311-1toakw3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230402000311-1toakw3",
						"updated": "20230402000311"
					},
					"Children": [
						{
							"ID": "20230402000311-0lybe2n",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230402000311-0lybe2n",
								"updated": "20230402000311"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "问题对应的代码片段"
								}
							]
						},
						{
							"ID": "20230402000311-81ltv7c",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230402000311-81ltv7c",
								"updated": "20230402000311"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final @Nullable Object[] args)\n\t\tthrows BeanCreationException { \n\n\t……\n\t// Eagerly cache singletons to be able to resolve circular references\n\t// even when triggered by lifecycle interfaces like BeanFactoryAware.\n\tboolean earlySingletonExposure = (mbd.isSingleton() \u0026\u0026 this.allowCircularReferences \u0026\u0026\n\t\t\tisSingletonCurrentlyInCreation(beanName));\n\t//第一次处理\t\n\tif (earlySingletonExposure) { \n\t\tif (logger.isTraceEnabled()) { \n\t\t\tlogger.trace(\"Eagerly caching bean '\" + beanName +\n\t\t\t\t\t\"' to allow for resolving potential circular references\");\n\t\t}\n\t\taddSingletonFactory(beanName, () -\u003e getEarlyBeanReference(beanName, mbd, bean));\n\t}\n\n\t// Initialize the bean instance.\n\tObject exposedObject = bean;\n\ttry { \n\t\tpopulateBean(beanName, mbd, instanceWrapper);\n\t\texposedObject = initializeBean(beanName, exposedObject, mbd);\n\t}\n\tcatch (Throwable ex) { \n\t\tif (ex instanceof BeanCreationException \u0026\u0026 beanName.equals(((BeanCreationException) ex).getBeanName())) { \n\t\t\tthrow (BeanCreationException) ex;\n\t\t}\n\t\telse { \n\t\t\tthrow new BeanCreationException(\n\t\t\t\t\tmbd.getResourceDescription(), beanName, \"Initialization of bean failed\", ex);\n\t\t}\n\t}\n\n    //第二次处理\n\tif (earlySingletonExposure) { \n\t\tObject earlySingletonReference = getSingleton(beanName, false);\n\t\tif (earlySingletonReference != null) { \n\t\t\tif (exposedObject == bean) { \n\t\t\t\texposedObject = earlySingletonReference;\n\t\t\t}\n\t\t\telse if (!this.allowRawInjectionDespiteWrapping \u0026\u0026 hasDependentBean(beanName)) { \n\t\t\t\tString[] dependentBeans = getDependentBeans(beanName);\n\t\t\t\tSet\u003cString\u003e actualDependentBeans = new LinkedHashSet\u003c\u003e(dependentBeans.length);\n\t\t\t\tfor (String dependentBean : dependentBeans) { \n\t\t\t\t\tif (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) { \n\t\t\t\t\t\tactualDependentBeans.add(dependentBean);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!actualDependentBeans.isEmpty()) { \n\t\t\t\t\tthrow new BeanCurrentlyInCreationException(beanName,\n\t\t\t\t\t\t\t\"Bean with name '\" + beanName + \"' has been injected into other beans [\" +\n\t\t\t\t\t\t\tStringUtils.collectionToCommaDelimitedString(actualDependentBeans) +\n\t\t\t\t\t\t\t\"] in its raw version as part of a circular reference, but has eventually been \" +\n\t\t\t\t\t\t\t\"wrapped. This means that said other beans do not use the final version of the \" +\n\t\t\t\t\t\t\t\"bean. This is often the result of over-eager type matching - consider using \" +\n\t\t\t\t\t\t\t\"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t……\n\treturn exposedObject;\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20230402000311-vrfj6h1",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230402000311-vrfj6h1",
						"updated": "20230402000311"
					},
					"Children": [
						{
							"ID": "20230402000311-88feesv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230402000311-88feesv",
								"updated": "20230402000311"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "为什么doCreateBean中为什么会对earlySingletonExposure处理两次？"
								}
							]
						},
						{
							"ID": "20230402000311-m6c2tzp",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230402000311-m6c2tzp",
								"updated": "20230402000311"
							},
							"Children": [
								{
									"ID": "20230402000311-v6zg16q",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230402000311-v6zg16q",
										"updated": "20230402000311"
									},
									"Children": [
										{
											"ID": "20230402000311-9qy9rjm",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230402000311-9qy9rjm",
												"updated": "20230402000311"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "第一次处理很好理解，解决循环引用问题，需要提前暴露引用，如果不清楚可以看一下"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/qq_18297675/article/details/103442143",
													"TextMarkTextContent": "【细品springboot源码】彻底弄懂spring bean的创建过程（上） "
												},
												{
													"Type": "NodeText",
													"Data": "这篇文章。"
												}
											]
										}
									]
								},
								{
									"ID": "20230402000311-tczyuid",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230402000311-tczyuid",
										"updated": "20230402000311"
									},
									"Children": [
										{
											"ID": "20230402000311-b66ndkv",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230402000311-b66ndkv",
												"updated": "20230402000311"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "那第二次是什么意思呢？有什么用呢？\n来看一下处理的代码，我直接把意思注释在代码里"
												}
											]
										},
										{
											"ID": "20230402000311-2wv0i7v",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"Properties": {
												"id": "20230402000311-2wv0i7v",
												"updated": "20230402000311"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```"
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "amF2YQ=="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": " if (earlySingletonExposure) { \n    //尝试从缓存中获取单例，注意后面的参数为false，表示不从第三级缓存singletonFactories中获取，为什么呢？因为这里不允许循环依赖\n\tObject earlySingletonReference = getSingleton(beanName, false);\n\t//如果不为null，就会进入if条件中，因为earlySingletonReference不为null，说明存在循环引用，\n\t//为什么呢？因为第一个处理的时候，会将引用放到singletonFactories缓存中，当循环依赖注入的时候，\n\t//会通过singletonFactories中拿到提前暴露的引用，然后放到第二级缓存earlySingletonObjects中。\n\t//所以，在这里拿到了earlySingletonReference，表明存在循环引用。\n\tif (earlySingletonReference != null) { \n\t    //如果相等，那么就什么也不做，将earlySingletonReference返回回去即可\n\t\tif (exposedObject == bean) { \n\t\t\texposedObject = earlySingletonReference;\n\t\t}\n\t\t//如果不相等（具体为什么会不相等，下面会单独说），并且有其它bean依赖这个bean\n\t\telse if (!this.allowRawInjectionDespiteWrapping \u0026\u0026 hasDependentBean(beanName)) { \n\t\t    //拿到依赖这个bean的所有bean\n\t\t\tString[] dependentBeans = getDependentBeans(beanName);\n\t\t\tSet\u003cString\u003e actualDependentBeans = new LinkedHashSet\u003c\u003e(dependentBeans.length);\n\t\t\tfor (String dependentBean : dependentBeans) { \n\t\t\t    //如果存在已经创建完的bean（已经创建完的bean依赖该bean）\n\t\t\t\tif (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) { \n\t\t\t\t\tactualDependentBeans.add(dependentBean);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//如果真的存在，那么就会报错，为什么呢？下面会说 \n\t\t\tif (!actualDependentBeans.isEmpty()) { \n\t\t\t\tthrow new BeanCurrentlyInCreationException(beanName,\n\t\t\t\t\t\t\"Bean with name '\" + beanName + \"' has been injected into other beans [\" +\n\t\t\t\t\t\tStringUtils.collectionToCommaDelimitedString(actualDependentBeans) +\n\t\t\t\t\t\t\"] in its raw version as part of a circular reference, but has eventually been \" +\n\t\t\t\t\t\t\"wrapped. This means that said other beans do not use the final version of the \" +\n\t\t\t\t\t\t\"bean. This is often the result of over-eager type matching - consider using \" +\n\t\t\t\t\t\t\"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example.\");\n\t\t\t}\n\t\t}\n\t}\n}\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```"
												}
											]
										},
										{
											"ID": "20230402000311-m3ntko8",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230402000311-m3ntko8",
												"updated": "20230402000311"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "好了，分析完这段代码，可以总结出两点"
												}
											]
										},
										{
											"ID": "20230402000311-nxaa7xm",
											"Type": "NodeList",
											"ListData": {},
											"Properties": {
												"id": "20230402000311-nxaa7xm",
												"updated": "20230402000311"
											},
											"Children": [
												{
													"ID": "20230402000311-uyekusr",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230402000311-uyekusr",
														"updated": "20230402000311"
													},
													"Children": [
														{
															"ID": "20230402000311-9rv47lr",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230402000311-9rv47lr",
																"updated": "20230402000311"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "​"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong code",
																	"TextMarkTextContent": "exposedObject"
																},
																{
																	"Type": "NodeText",
																	"Data": "​"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "可能会在"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong code",
																	"TextMarkTextContent": "initializeBean"
																},
																{
																	"Type": "NodeText",
																	"Data": "​"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "中被改变"
																}
															]
														}
													]
												},
												{
													"ID": "20230402000311-qsjexdy",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230402000311-qsjexdy",
														"updated": "20230402000311"
													},
													"Children": [
														{
															"ID": "20230402000311-2dzv5z7",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230402000311-2dzv5z7",
																"updated": "20230402000311"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "如果"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong code",
																	"TextMarkTextContent": "exposedObject"
																},
																{
																	"Type": "NodeText",
																	"Data": "​"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "被改变，并且有依赖这个"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong code",
																	"TextMarkTextContent": "bean"
																},
																{
																	"Type": "NodeText",
																	"Data": "​"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "的"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong code",
																	"TextMarkTextContent": "bean"
																},
																{
																	"Type": "NodeText",
																	"Data": "​"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "已经创建完成，就会报错。"
																}
															]
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20230402000311-c9go339",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230402000311-c9go339",
										"updated": "20230402000311"
									},
									"Children": [
										{
											"ID": "20230402000311-vdak7h0",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230402000311-vdak7h0",
												"updated": "20230402000311"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "那么"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "exposedObject"
												},
												{
													"Type": "NodeText",
													"Data": "​为什么会在"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "initializeBean"
												},
												{
													"Type": "NodeText",
													"Data": "​中被改变？\n来看一下"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "initializeBean"
												},
												{
													"Type": "NodeText",
													"Data": "​代码"
												}
											]
										},
										{
											"ID": "20230402000311-5o0dqqw",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"Properties": {
												"id": "20230402000311-5o0dqqw",
												"updated": "20230402000311"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```"
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "amF2YQ=="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "protected Object initializeBean(final String beanName, final Object bean, @Nullable RootBeanDefinition mbd) { \n\t……\n\tObject wrappedBean = bean;\n\tif (mbd == null || !mbd.isSynthetic()) { \n\t    //初始化前给BeanPostProcessor改变bean的机会\n\t\twrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);\n\t}\n\t……\n\tif (mbd == null || !mbd.isSynthetic()) { \n\t    //初始化后给BeanPostProcessor改变bean的机会\n\t\twrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);\n\t}\n\n\treturn wrappedBean;\n}\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```"
												}
											]
										},
										{
											"ID": "20230402000311-32p1bw8",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230402000311-32p1bw8",
												"updated": "20230402000311"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "所以，bean是有可能在这里被改变的。"
												}
											]
										}
									]
								},
								{
									"ID": "20230402000311-oew4znn",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230402000311-oew4znn",
										"updated": "20230402000311"
									},
									"Children": [
										{
											"ID": "20230402000311-5zfuwdk",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230402000311-5zfuwdk",
												"updated": "20230402000311"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "那为什么会导致报错？\n我们来设想一下，有"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "A"
												},
												{
													"Type": "NodeText",
													"Data": "​、"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "B"
												},
												{
													"Type": "NodeText",
													"Data": "​两个类互相循环引用。\n创建A的过程是这样的\n​"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "A-\u0026gt;B"
												},
												{
													"Type": "NodeText",
													"Data": "​ （创建"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "A"
												},
												{
													"Type": "NodeText",
													"Data": "​，必须先创建"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "B"
												},
												{
													"Type": "NodeText",
													"Data": "​）\n​"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "B-\u0026gt;A"
												},
												{
													"Type": "NodeText",
													"Data": "​（创建"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "B"
												},
												{
													"Type": "NodeText",
													"Data": "​，又必须先创建"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "A"
												},
												{
													"Type": "NodeText",
													"Data": "​，因为"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "A"
												},
												{
													"Type": "NodeText",
													"Data": "​的引用已经提前暴露了，假设对象号为"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "@1000"
												},
												{
													"Type": "NodeText",
													"Data": "​）\n此时"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "B"
												},
												{
													"Type": "NodeText",
													"Data": "​创建完成，"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "B"
												},
												{
													"Type": "NodeText",
													"Data": "​中的对象"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "A"
												},
												{
													"Type": "NodeText",
													"Data": "​为"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "@1000"
												},
												{
													"Type": "NodeText",
													"Data": "​\n现在"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "A"
												},
												{
													"Type": "NodeText",
													"Data": "​可以继续初始化了（"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "initializeBean"
												},
												{
													"Type": "NodeText",
													"Data": "​），很不碰巧的是，"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "A"
												},
												{
													"Type": "NodeText",
													"Data": "​在这里居然被改变了，变成了一个代理对象，对象号为"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "@1001"
												},
												{
													"Type": "NodeText",
													"Data": "​\n然后到了第二个处理"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "earlySingletonExposure"
												},
												{
													"Type": "NodeText",
													"Data": "​的地方，发现从缓存中拿到的对象和当前对象不相等了（"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "@1000"
												},
												{
													"Type": "NodeText",
													"Data": "​ != "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "@1001"
												},
												{
													"Type": "NodeText",
													"Data": "​）\n接着就看一下是否有依赖"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "A"
												},
												{
													"Type": "NodeText",
													"Data": "​的"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Bean"
												},
												{
													"Type": "NodeText",
													"Data": "​创建完成了，哎，发现还真的有，那就是"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "B"
												},
												{
													"Type": "NodeText",
													"Data": "​\n"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "然后想啊，"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong code",
													"TextMarkTextContent": "B"
												},
												{
													"Type": "NodeText",
													"Data": "​"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "中的"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong code",
													"TextMarkTextContent": "A"
												},
												{
													"Type": "NodeText",
													"Data": "​"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "和现在初始化完的"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong code",
													"TextMarkTextContent": "A"
												},
												{
													"Type": "NodeText",
													"Data": "​"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "它不一样啊，这个和单例的性质冲突了！所以，必定得报错！"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230402000311-knc14js",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230402000311-knc14js",
						"updated": "20230402000311"
					},
					"Children": [
						{
							"ID": "20230402000311-3jav6o5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230402000311-3jav6o5",
								"updated": "20230402000311"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "现象复现"
								},
								{
									"Type": "NodeText",
									"Data": "\n代码"
								}
							]
						},
						{
							"ID": "20230402000311-z1mq1zk",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230402000311-z1mq1zk",
								"updated": "20230402000311"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "@Component\npublic class A { \n    @Autowired\n    B b;\n}\n@Component\npublic class B { \n    @Autowired\n    A a;\n}\n@Component\npublic class C implements BeanPostProcessor { \n\n    @Nullable\n    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException { \n        if(beanName.equals(\"a\")){ \n            //返回一个新的代理对象回去 \n            return new CGLIBProxy(bean).createProxy();\n        }\n        return bean;\n    }\n\n    public class CGLIBProxy implements MethodInterceptor { \n\n        private Object obj;\n        public CGLIBProxy(Object obj){ \n            this.obj = obj;\n        }\n\n        public  Object createProxy(){ \n            Enhancer enhancer = new Enhancer();\n            enhancer.setSuperclass(obj.getClass());\n            enhancer.setCallback(new CGLIBProxy(obj));\n            return enhancer.create();\n        }\n\n        @Override\n        public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable { \n            System.out.println(\"----\" + method.getName() + \"方法开始----\");\n            Object res = method.invoke(obj, objects);\n            System.out.println(\"----\" + method.getName() + \"方法结束----\");\n            return res;\n        }\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20230402000311-ct646ez",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230402000311-ct646ez",
								"updated": "20230402000311"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "开始debug，创建"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "bean A"
								},
								{
									"Type": "NodeText",
									"Data": "​的时候，需要创建依赖"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "B"
								},
								{
									"Type": "NodeText",
									"Data": "​，在这里记住"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "A"
								},
								{
									"Type": "NodeText",
									"Data": "​的对象号"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "@3656"
								},
								{
									"Type": "NodeText",
									"Data": "​\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "在这里插入图片描述"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/20191223234347996-20230402000310-c0av7bn.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n接着创建"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "B"
								},
								{
									"Type": "NodeText",
									"Data": "​\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "在这里插入图片描述"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/20191223234431460-20230402000310-gtvkhcm.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n然后到第二个处理"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "earlySingletonExposure"
								},
								{
									"Type": "NodeText",
									"Data": "​的地方，发现"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "earlySingletonReference"
								},
								{
									"Type": "NodeText",
									"Data": "​为null，因为"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "B"
								},
								{
									"Type": "NodeText",
									"Data": "​还在"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "singletonFactories"
								},
								{
									"Type": "NodeText",
									"Data": "​中，所以第二级缓存是拿不到的。\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "在这里插入图片描述"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/20191223234519701-20230402000310-txu5nht.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "B"
								},
								{
									"Type": "NodeText",
									"Data": "​创建完成后，接着继续初始化"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "A"
								},
								{
									"Type": "NodeText",
									"Data": "​，被"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "BeanPostProcessor"
								},
								{
									"Type": "NodeText",
									"Data": "​拦截，改变了"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Bean"
								},
								{
									"Type": "NodeText",
									"Data": "​\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "在这里插入图片描述"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/2019122323465717-20230402000309-qu13q6l.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n到第二个处理"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "earlySingletonExposure"
								},
								{
									"Type": "NodeText",
									"Data": "​的地方，发现"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "bean"
								},
								{
									"Type": "NodeText",
									"Data": "​被改变了"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "在这里插入图片描述"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/20191223234748376-20230402000310-gsmdxv6.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n然后发现，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "B"
								},
								{
									"Type": "NodeText",
									"Data": "​已经创建完成，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "B"
								},
								{
									"Type": "NodeText",
									"Data": "​里面的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "A"
								},
								{
									"Type": "NodeText",
									"Data": "​也已经注入了\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "在这里插入图片描述"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/20191223234958358-20230402000310-5q2w1db.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n如果继续往下走，势必要出现两个同一类的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "bean"
								},
								{
									"Type": "NodeText",
									"Data": "​，不符合单例特性，所以直接报错\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "在这里插入图片描述"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/20191223235121867-20230402000310-m3c4kpy.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20230402000311-0qa0wwg",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230402000311-0qa0wwg",
						"updated": "20230402000311"
					},
					"Children": [
						{
							"ID": "20230402000311-ss5wdto",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230402000311-ss5wdto",
								"updated": "20230402000311"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "总结"
								}
							]
						},
						{
							"ID": "20230402000311-3rq9jpj",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230402000311-3rq9jpj",
								"updated": "20230402000311"
							},
							"Children": [
								{
									"ID": "20230402000311-lhmconp",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230402000311-lhmconp",
										"updated": "20230402000311"
									},
									"Children": [
										{
											"ID": "20230402000311-05a3kak",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230402000311-05a3kak",
												"updated": "20230402000311"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "因为spring提供了"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong code",
													"TextMarkTextContent": "BeanPostProcessor"
												},
												{
													"Type": "NodeText",
													"Data": "​"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "，所以在"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong code",
													"TextMarkTextContent": "bean"
												},
												{
													"Type": "NodeText",
													"Data": "​"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "的整个创建周期，都可能存在被改变的情况，所以需要很多的判断，这也是为什么"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong code",
													"TextMarkTextContent": "bean"
												},
												{
													"Type": "NodeText",
													"Data": "​"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "的创建源码看起来这么的复杂，因为考虑的东西非常多。"
												}
											]
										}
									]
								},
								{
									"ID": "20230402000311-oe8q75z",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230402000311-oe8q75z",
										"updated": "20230402000311"
									},
									"Children": [
										{
											"ID": "20230402000311-mmouh3l",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230402000311-mmouh3l",
												"updated": "20230402000311"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "​"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong code",
													"TextMarkTextContent": "doCreateBean"
												},
												{
													"Type": "NodeText",
													"Data": "​"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "中对"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong code",
													"TextMarkTextContent": "earlySingletonExposure"
												},
												{
													"Type": "NodeText",
													"Data": "​"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "的第一次处理是提前暴露引用，解决循环引用问题。第二次处理是防止对象被改变，造成的已创建对象中持有的对象和这个对象不一致。"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		}
	]
}