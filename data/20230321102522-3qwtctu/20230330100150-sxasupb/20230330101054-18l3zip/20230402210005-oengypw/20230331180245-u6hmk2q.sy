{
	"ID": "20230331180245-u6hmk2q",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230331180245-u6hmk2q",
		"title": "Spring的bean定义 4 : 合并了的bean定义--MergedBeanDefinition_安迪源文的博客-CSDN博客",
		"updated": "20230331180245"
	},
	"Children": [
		{
			"ID": "20230331180245-v28vhhh",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331180245-v28vhhh",
				"updated": "20230331180245"
			}
		},
		{
			"ID": "20230331180245-gcqxhbo",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230331180245-gcqxhbo",
				"updated": "20230331180245"
			},
			"Children": [
				{
					"ID": "20230331180245-47o0h51",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331180245-47o0h51",
						"updated": "20230331180245"
					},
					"Children": [
						{
							"ID": "20230331180245-1zv03u8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331180245-1zv03u8",
								"updated": "20230331180245"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/andy_zhang2007/article/details/86514320",
									"TextMarkTextContent": "https://blog.csdn.net/andy_zhang2007/article/details/86514320"
								}
							]
						}
					]
				},
				{
					"ID": "20230331180245-xhoxcot",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331180245-xhoxcot",
						"updated": "20230331180245"
					},
					"Children": [
						{
							"ID": "20230331180245-94r5237",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331180245-94r5237",
								"updated": "20230331180245"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "概述在Spring中,关于bean定义,其Java建模模型是接口BeanDefinition, 其变种有RootBeanDefinition，ChildBeanDefinition，还有GenericBeanDefinition，AnnotatedGenericBeanDefinition,ScannedGenericBeanDefinition等等。这些概念模型抽象了不同的关注点。关于这些概念..."
								}
							]
						}
					]
				},
				{
					"ID": "20230331180245-1vr57tw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331180245-1vr57tw",
						"updated": "20230331180245"
					},
					"Children": [
						{
							"ID": "20230331180245-mvrzfjz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331180245-mvrzfjz",
								"updated": "20230331180245"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2023-03-31 18:02:45"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331180245-0simm9r",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331180245-0simm9r",
				"updated": "20230331180245"
			}
		},
		{
			"ID": "20230331180245-5omuknx",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331180245-5omuknx",
				"updated": "20230331180245"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "概述"
				}
			]
		},
		{
			"ID": "20230331180245-84ij4y6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331180245-84ij4y6",
				"updated": "20230331180245"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Spring"
				},
				{
					"Type": "NodeText",
					"Data": "​中,关于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bean"
				},
				{
					"Type": "NodeText",
					"Data": "​定义,其"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Java"
				},
				{
					"Type": "NodeText",
					"Data": "​建模模型是接口"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BeanDefinition"
				},
				{
					"Type": "NodeText",
					"Data": "​, 其变种有"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "RootBeanDefinition"
				},
				{
					"Type": "NodeText",
					"Data": "​，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ChildBeanDefinition"
				},
				{
					"Type": "NodeText",
					"Data": "​，还有"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "GenericBeanDefinition"
				},
				{
					"Type": "NodeText",
					"Data": "​，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AnnotatedGenericBeanDefinition"
				},
				{
					"Type": "NodeText",
					"Data": "​,"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ScannedGenericBeanDefinition"
				},
				{
					"Type": "NodeText",
					"Data": "​等等。这些概念模型抽象了不同的关注点。关于这些概念模型，除了有概念，也有相应的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Java"
				},
				{
					"Type": "NodeText",
					"Data": "​建模模型，甚至还有通用的实现部分"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AbstractBeanDefinition"
				},
				{
					"Type": "NodeText",
					"Data": "​。但事实上，关于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BeanDefinition"
				},
				{
					"Type": "NodeText",
					"Data": "​，还有一个概念也很重要，这就是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MergedBeanDefinition"
				},
				{
					"Type": "NodeText",
					"Data": "​(中文也许应该翻译成\"合并了的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bean"
				},
				{
					"Type": "NodeText",
					"Data": "​定义\"?),但这个概念并没有相应的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Java"
				},
				{
					"Type": "NodeText",
					"Data": "​模型对应。但是它确实存在，并且"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Spring"
				},
				{
					"Type": "NodeText",
					"Data": "​专门为它提供了一个生命周期回调定义接口"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MergedBeanDefinitionPostProcessor"
				},
				{
					"Type": "NodeText",
					"Data": "​用于扩展。"
				}
			]
		},
		{
			"ID": "20230331180245-8e2vhlc",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331180245-8e2vhlc",
				"updated": "20230331180245"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MergedBeanDefinition"
				},
				{
					"Type": "NodeText",
					"Data": "​的生成"
				}
			]
		},
		{
			"ID": "20230331180245-mx90sxq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331180245-mx90sxq",
				"updated": "20230331180245"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们先从代码看一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MergedBeanDefinition"
				},
				{
					"Type": "NodeText",
					"Data": "​是怎么生成的 ? 下面是类"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AbstractBeanFactory"
				},
				{
					"Type": "NodeText",
					"Data": "​中"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bean"
				},
				{
					"Type": "NodeText",
					"Data": "​获取方法"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "doGetBean()"
				},
				{
					"Type": "NodeText",
					"Data": "​的伪代码 :"
				}
			]
		},
		{
			"ID": "20230331180245-19m4amx",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331180245-19m4amx",
				"updated": "20230331180245"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "protected \u003cT\u003e T doGetBean(final String name, @Nullable final Class\u003cT\u003e requiredType,\n\t\t\t@Nullable final Object[] args, boolean typeCheckOnly) throws BeansException { \n\t// ...\n\t// 这里根据bean名称获取MergedBeanDefinition，结果类型是RootBeanDefinition \n\tfinal RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);\n\t// ...\t\n\tcreateBean(beanName, mbd, args);\n\n\t// ...\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331180245-jul670s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331180245-jul670s",
				"updated": "20230331180245"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从上面代码可见，通过方法"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "getMergedLocalBeanDefinition()"
				},
				{
					"Type": "NodeText",
					"Data": "​，一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "RootBeanDefinition mbd"
				},
				{
					"Type": "NodeText",
					"Data": "​根据"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bean"
				},
				{
					"Type": "NodeText",
					"Data": "​名称生成了。我们进而跟踪"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "getMergedLocalBeanDefinition"
				},
				{
					"Type": "NodeText",
					"Data": "​的实现。如下 :"
				}
			]
		},
		{
			"ID": "20230331180245-203d6f7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331180245-203d6f7",
				"updated": "20230331180245"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\t/**\n\t * Return a merged RootBeanDefinition, traversing the parent bean definition\n\t * if the specified bean corresponds to a child bean definition.\n\t * @param beanName the name of the bean to retrieve the merged definition for\n\t * @return a (potentially merged) RootBeanDefinition for the given bean\n\t * @throws NoSuchBeanDefinitionException if there is no bean with the given name\n\t * @throws BeanDefinitionStoreException in case of an invalid bean definition\n\t */\n\tprotected RootBeanDefinition getMergedLocalBeanDefinition(String beanName) \n\tthrows BeansException { \n\t\t// Quick check on the concurrent map first, with minimal locking.\n\t\tRootBeanDefinition mbd = this.mergedBeanDefinitions.get(beanName);\n\t\tif (mbd != null) { \n\t\t\treturn mbd;\n\t\t}\n\t\treturn getMergedBeanDefinition(beanName, getBeanDefinition(beanName));\n\t}\n\n\t/**\n\t * Return a RootBeanDefinition for the given top-level bean, by merging with\n\t * the parent if the given bean's definition is a child bean definition.\n\t * @param beanName the name of the bean definition\n\t * @param bd the original bean definition (Root/ChildBeanDefinition)\n\t * @return a (potentially merged) RootBeanDefinition for the given bean\n\t * @throws BeanDefinitionStoreException in case of an invalid bean definition\n\t */\n\tprotected RootBeanDefinition getMergedBeanDefinition(String beanName, BeanDefinition bd)\n\t\t\tthrows BeanDefinitionStoreException { \n\n\t\treturn getMergedBeanDefinition(beanName, bd, null);\n\t}\n\n\t/**\n\t * Return a RootBeanDefinition for the given bean, by merging with the\n\t * parent if the given bean's definition is a child bean definition.\n\t * @param beanName the name of the bean definition\n\t * @param bd the original bean definition (Root/ChildBeanDefinition)\n\t * @param containingBd the containing bean definition in case of inner bean,\n\t * or null in case of a top-level bean\n\t * @return a (potentially merged) RootBeanDefinition for the given bean\n\t * @throws BeanDefinitionStoreException in case of an invalid bean definition\n\t */\t\n\tprotected RootBeanDefinition getMergedBeanDefinition(\n\t\t\tString beanName, BeanDefinition bd, @Nullable BeanDefinition containingBd)\n\t\t\tthrows BeanDefinitionStoreException { \n\n\t\tsynchronized (this.mergedBeanDefinitions) { \n\t\t\t// 准备一个RootBeanDefinition变量引用，用于记录要构建和最终要返回的BeanDefinition，\n\t\t\t// 这里根据上下文不难猜测 mbd 应该就是 mergedBeanDefinition 的缩写。\n\t\t\tRootBeanDefinition mbd = null;\n\n\t\t\t// Check with full lock now in order to enforce the same merged instance.\n\t\t\tif (containingBd == null) { \n\t\t\t\tmbd = this.mergedBeanDefinitions.get(beanName);\n\t\t\t}\n\n\t\t\tif (mbd == null) { \n\t\t\t\tif (bd.getParentName() == null) { \n\t\t\t\t\t// bd不是一个ChildBeanDefinition的情况,换句话讲，这 bd应该是 :\n\t\t\t\t\t// 1. 一个独立的 GenericBeanDefinition 实例，parentName 属性为null\n\t\t\t\t\t// 2. 或者是一个 RootBeanDefinition 实例，parentName 属性为null\n\t\t\t\t\t// 此时mbd直接使用一个bd的复制品\n\t\t\t\t\t// Use copy of given root bean definition.\n\t\t\t\t\tif (bd instanceof RootBeanDefinition) { \t\t\t\t\t\n\t\t\t\t\t\tmbd = ((RootBeanDefinition) bd).cloneBeanDefinition();\n\t\t\t\t\t}\n\t\t\t\t\telse { \n\t\t\t\t\t\tmbd = new RootBeanDefinition(bd);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse { \n\t\t\t\t\t// bd是一个ChildBeanDefinition的情况,\n\t\t\t\t\t// 这种情况下，需要将bd和其parent bean definition 合并到一起，\n\t\t\t\t\t// 形成最终的 mbd\n\t\t\t\t\t// 下面是获取bd的 parent bean definition 的过程，最终结果记录到 pbd，\n\t\t\t\t\t// 并且可以看到该过程中递归使用了getMergedBeanDefinition(), 为什么呢?\n\t\t\t\t\t// 因为 bd 的 parent bd 可能也是个ChildBeanDefinition，所以该过程\n\t\t\t\t\t// 需要递归处理\n\t\t\t\t\t// Child bean definition: needs to be merged with parent.\n\t\t\t\t\tBeanDefinition pbd;\n\t\t\t\t\ttry { \n\t\t\t\t\t\tString parentBeanName = transformedBeanName(bd.getParentName());\n\t\t\t\t\t\tif (!beanName.equals(parentBeanName)) { \n\t\t\t\t\t\t\tpbd = getMergedBeanDefinition(parentBeanName);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse { \n\t\t\t\t\t\t\tBeanFactory parent = getParentBeanFactory();\n\t\t\t\t\t\t\tif (parent instanceof ConfigurableBeanFactory) { \n\t\t\t\t\t\t\t\tpbd = ((ConfigurableBeanFactory) \n\t\t\t\t\t\t\t\t\tparent).getMergedBeanDefinition(parentBeanName);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse { \n\t\t\t\t\t\t\t\tthrow new NoSuchBeanDefinitionException(parentBeanName,\n\t\t\t\t\t\t\t\t\t\t\"Parent name '\" + parentBeanName + \n\t\t\t\t\t\t\t\t\t\t\"' is equal to bean name '\" + beanName +\n\t\t\t\t\t\t\t\"': cannot be resolved without an AbstractBeanFactory parent\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (NoSuchBeanDefinitionException ex) { \n\t\t\t\t\t\tthrow new BeanDefinitionStoreException(\n\t\t\t\t\t\t\tbd.getResourceDescription(), beanName,\n\t\t\t\t\t\t\t\t\"Could not resolve parent bean definition '\" + \n\t\t\t\t\t\t\t\tbd.getParentName() + \"'\", ex);\n\t\t\t\t\t}\n\t\t\t\t\t// Deep copy with overridden values.\n\t\t\t\t\t// 现在已经获取 bd 的parent bd到pbd，从上面的过程可以看出，这个pbd\n\t\t\t\t\t// 也是已经\"合并\"过的。\n\t\t\t\t\t// 这里根据pbd创建最终的mbd，然后再使用bd覆盖一次，\n\t\t\t\t\t// 这样就相当于mbd来自两个BeanDefinition:\n\t\t\t\t\t// 当前 BeanDefinition 及其合并的(\"Merged\")双亲 BeanDefinition,\n\t\t\t\t\t// 然后mbd就是针对当前bd的一个MergedBeanDefinition(合并的BeanDefinition)了。\n\t\t\t\t\tmbd = new RootBeanDefinition(pbd);\n\t\t\t\t\tmbd.overrideFrom(bd);\n\t\t\t\t}\n\n\t\t\t\t// Set default singleton scope, if not configured before.\n\t\t\t\tif (!StringUtils.hasLength(mbd.getScope())) { \n\t\t\t\t\tmbd.setScope(RootBeanDefinition.SCOPE_SINGLETON);\n\t\t\t\t}\n\n\t\t\t\t// A bean contained in a non-singleton bean cannot be a singleton itself.\n\t\t\t\t// Let's correct this on the fly here, since this might be the result of\n\t\t\t\t// parent-child merging for the outer bean, in which case the original \n\t\t\t\t// inner bean\n\t\t\t\t// definition will not have inherited the merged outer bean's singleton status.\n\t\t\t\tif (containingBd != null \u0026\u0026 !containingBd.isSingleton() \u0026\u0026 mbd.isSingleton()) { \n\t\t\t\t\tmbd.setScope(containingBd.getScope());\n\t\t\t\t}\n\n\t\t\t\t// Cache the merged bean definition for the time being\n\t\t\t\t// (it might still get re-merged later on in order to pick up metadata changes)\n\t\t\t\tif (containingBd == null \u0026\u0026 isCacheBeanMetadata()) { \n\t\t\t\t\tthis.mergedBeanDefinitions.put(beanName, mbd);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn mbd;\n\t\t}\n\t}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331180245-x2o79gd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331180245-x2o79gd",
				"updated": "20230331180245"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从上面的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MergedBeanDefinition"
				},
				{
					"Type": "NodeText",
					"Data": "​的获取过程可以看出，一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MergedBeanDefinition"
				},
				{
					"Type": "NodeText",
					"Data": "​其实就是一个\"合并了的BeanDefinition\"，最终以"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "RootBeanDefinition"
				},
				{
					"Type": "NodeText",
					"Data": "​的类型存在。"
				}
			]
		},
		{
			"ID": "20230331180245-da2yvvu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331180245-da2yvvu",
				"updated": "20230331180245"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "看完"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MergedBeanDefinition"
				},
				{
					"Type": "NodeText",
					"Data": "​的生成,我们接下来看它的作用。从上面的代码中，我们也可以看到一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MergedBeanDefinition"
				},
				{
					"Type": "NodeText",
					"Data": "​被根据"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bean"
				},
				{
					"Type": "NodeText",
					"Data": "​名称获取之后，传递到了方法"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "createBean()"
				},
				{
					"Type": "NodeText",
					"Data": "​用于创建"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bean"
				},
				{
					"Type": "NodeText",
					"Data": "​。"
				}
			]
		},
		{
			"ID": "20230331180245-yw7q3e1",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331180245-yw7q3e1",
				"updated": "20230331180245"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MergedBeanDefinition"
				},
				{
					"Type": "NodeText",
					"Data": "​的应用"
				}
			]
		},
		{
			"ID": "20230331180245-2ws094b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331180245-2ws094b",
				"updated": "20230331180245"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下面是类"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AbstractAutowireCapableBeanFactory"
				},
				{
					"Type": "NodeText",
					"Data": "​中"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bean"
				},
				{
					"Type": "NodeText",
					"Data": "​创建方法"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "createBean()"
				},
				{
					"Type": "NodeText",
					"Data": "​的实现，可以看到，针对传入的参数"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "RootBeanDefinition mbd"
				},
				{
					"Type": "NodeText",
					"Data": "​,也就是上面生成的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MergedBeanDefinition"
				},
				{
					"Type": "NodeText",
					"Data": "​,专门有一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "applyMergedBeanDefinitionPostProcessors()"
				},
				{
					"Type": "NodeText",
					"Data": "​调用，这里就是容器中注册的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MergedBeanDefinitionPostProcessor"
				},
				{
					"Type": "NodeText",
					"Data": "​的应用阶段 ："
				}
			]
		},
		{
			"ID": "20230331180245-4z2qzh3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331180245-4z2qzh3",
				"updated": "20230331180245"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, \n\tfinal @Nullable Object[] args)\tthrows BeanCreationException { \n        // ...\n\n\t\t// 创建bean POJO 对象\n\t\tinstanceWrapper = createBeanInstance(beanName, mbd, args);\n\n\t\t // ...      \n\t\t \n\t    // 修改 merged bean definition 的 BeanPostProcessor 的执行\n        // ==== 调用 MergedBeanDefinitionPostProcessor ====\n\t\tapplyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName); \n\t\n       // ...\n\n\t   // 填充 bean 属性:依赖注入处理，属性设置\n\t   populateBean(beanName, mbd, instanceWrapper);\n\n       // ...\n\t   \n\t   // 初始化 bean : 调用设置的初始化方法，接口定义的初始化方法，\n\t   // 以及相应的 pre-/post-init 生命周期回调函数\n\t   initializeBean(beanName, exposedObject, mbd);     \n\n\t   // ...\n\n\t   // 如果当前 bean 实现类有关销毁时的接口或者函数，将它进行相应的登记\n\t   // 供容器关闭时执行相应的回调函数\n       registerDisposableBeanIfNecessary(beanName, bean, mbd);                 \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331180245-0j1fujt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331180245-0j1fujt",
				"updated": "20230331180245"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "方法"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "applyMergedBeanDefinitionPostProcessors()"
				},
				{
					"Type": "NodeText",
					"Data": "​的实现如下："
				}
			]
		},
		{
			"ID": "20230331180245-lba8wb2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331180245-lba8wb2",
				"updated": "20230331180245"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\t// 找到容器中注册的所有BeanPostProcessor中每一个MergedBeanDefinitionPostProcessor，\n\t// 将它们应用到指定的RootBeanDefinition mbd上，这里 mbd 其实就是一个 MergedBeanDefinition。\n\tprotected void applyMergedBeanDefinitionPostProcessors(RootBeanDefinition mbd, \n\t\t\tClass\u003c?\u003e beanType, String beanName) { \n\t\tfor (BeanPostProcessor bp : getBeanPostProcessors()) { \n\t\t\tif (bp instanceof MergedBeanDefinitionPostProcessor) { \n\t\t\t\tMergedBeanDefinitionPostProcessor bdp = (MergedBeanDefinitionPostProcessor) bp;\n\t\t\t\tbdp.postProcessMergedBeanDefinition(mbd, beanType, beanName);\n\t\t\t}\n\t\t}\n\t}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331180245-9cwd3z0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331180245-9cwd3z0",
				"updated": "20230331180245"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从上面代码的代码我们只能看到，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MergedBeanDefinitionPostProcessor"
				},
				{
					"Type": "NodeText",
					"Data": "​会被应用到"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bean"
				},
				{
					"Type": "NodeText",
					"Data": "​,在它被填充属性之前。不过这还是有点抽象了，我们下面举一个例子，这里的作用就很清楚了："
				}
			]
		},
		{
			"ID": "20230331180245-id1pg8k",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331180245-id1pg8k",
				"updated": "20230331180245"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class AutowiredAnnotationBeanPostProcessor extends InstantiationAwareBeanPostProcessorAdapter\n\t\timplements MergedBeanDefinitionPostProcessor, PriorityOrdered, BeanFactoryAware { \n\t// ...\t\n\t// 在每个bean实例化后，初始化前执行，获取并记录该bean属性注入的元数据，在随后的属性注入时使用\n\t// 该方法由接口MergedBeanDefinitionPostProcessor定义\n\t@Override\n\tpublic void postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, \n\t\tClass\u003c?\u003e beanType, String beanName) { \n\t\t// 获取指定bean的属性注入元数据\n\t\tInjectionMetadata metadata = findAutowiringMetadata(beanName, beanType, null);\n\t\tmetadata.checkConfigMembers(beanDefinition);\n\t}\n\t// ...\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331180245-ssl2fi3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331180245-ssl2fi3",
				"updated": "20230331180245"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面的代码是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Spring"
				},
				{
					"Type": "NodeText",
					"Data": "​框架工具"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AutowiredAnnotationBeanPostProcessor"
				},
				{
					"Type": "NodeText",
					"Data": "​的实现代码片段，该工具实现了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MergedBeanDefinitionPostProcessor"
				},
				{
					"Type": "NodeText",
					"Data": "​,它在一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bean"
				},
				{
					"Type": "NodeText",
					"Data": "​的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "postProcessMergedBeanDefinition()"
				},
				{
					"Type": "NodeText",
					"Data": "​阶段，如上代码所示，获取该"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bean"
				},
				{
					"Type": "NodeText",
					"Data": "​的依赖注入元数据(哪些方法使用了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "@Autowired"
				},
				{
					"Type": "NodeText",
					"Data": "​,"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "@Inject"
				},
				{
					"Type": "NodeText",
					"Data": "​,"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "@Value"
				},
				{
					"Type": "NodeText",
					"Data": "​等等)，随后用于该"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bean"
				},
				{
					"Type": "NodeText",
					"Data": "​属性填充中依赖注入执行阶段的输入。"
				}
			]
		},
		{
			"ID": "20230331180245-pyzy7i4",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331180245-pyzy7i4",
				"updated": "20230331180245"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "总结"
				}
			]
		},
		{
			"ID": "20230331180245-zuiiqt7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331180245-zuiiqt7",
				"updated": "20230331180245"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "综上可见，一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MergedBeanDefinition"
				},
				{
					"Type": "NodeText",
					"Data": "​是这样一个载体:"
				}
			]
		},
		{
			"ID": "20230331180245-kpe90sz",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230331180245-kpe90sz",
				"updated": "20230331180245"
			},
			"Children": [
				{
					"ID": "20230331180245-58ugojz",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230331180245-58ugojz",
						"updated": "20230331180245"
					},
					"Children": [
						{
							"ID": "20230331180245-nxaxh6u",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331180245-nxaxh6u",
								"updated": "20230331180245"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "根据原始"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "BeanDefinition"
								},
								{
									"Type": "NodeText",
									"Data": "​及其可能存在的双亲"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "BeanDefinition"
								},
								{
									"Type": "NodeText",
									"Data": "​中的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "bean"
								},
								{
									"Type": "NodeText",
									"Data": "​定义信息\"合并\"而得来的一个"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "RootBeanDefinition"
								},
								{
									"Type": "NodeText",
									"Data": "​；"
								}
							]
						}
					]
				},
				{
					"ID": "20230331180245-r2t6wnz",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230331180245-r2t6wnz",
						"updated": "20230331180245"
					},
					"Children": [
						{
							"ID": "20230331180245-eolrjzp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331180245-eolrjzp",
								"updated": "20230331180245"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "每个"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Bean"
								},
								{
									"Type": "NodeText",
									"Data": "​的创建需要的是一个"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "MergedBeanDefinition"
								},
								{
									"Type": "NodeText",
									"Data": "​，也就是需要基于原始"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "BeanDefinition"
								},
								{
									"Type": "NodeText",
									"Data": "​及其双亲"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "BeanDefinition"
								},
								{
									"Type": "NodeText",
									"Data": "​信息得到一个信息\"合并\"之后的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "BeanDefinition"
								},
								{
									"Type": "NodeText",
									"Data": "​；"
								}
							]
						}
					]
				},
				{
					"ID": "20230331180245-yynrzqi",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230331180245-yynrzqi",
						"updated": "20230331180245"
					},
					"Children": [
						{
							"ID": "20230331180245-ik3jt8u",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331180245-ik3jt8u",
								"updated": "20230331180245"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Spring"
								},
								{
									"Type": "NodeText",
									"Data": "​框架同时提供了一个机会给框架其他部分，或者开发人员用于在"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "bean"
								},
								{
									"Type": "NodeText",
									"Data": "​创建过程中，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "MergedBeanDefinition"
								},
								{
									"Type": "NodeText",
									"Data": "​生成之后，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "bean"
								},
								{
									"Type": "NodeText",
									"Data": "​属性填充之前，对该"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "bean"
								},
								{
									"Type": "NodeText",
									"Data": "​和该"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "MergedBeanDefinition"
								},
								{
									"Type": "NodeText",
									"Data": "​做一次回调，相应的回调接口是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "MergedBeanDefinitionPostProcessor"
								},
								{
									"Type": "NodeText",
									"Data": "​。"
								}
							]
						}
					]
				},
				{
					"ID": "20230331180245-pxed6vp",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230331180245-pxed6vp",
						"updated": "20230331180245"
					},
					"Children": [
						{
							"ID": "20230331180245-oxlnlf7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331180245-oxlnlf7",
								"updated": "20230331180245"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "MergedBeanDefinition"
								},
								{
									"Type": "NodeText",
									"Data": "​没有相应的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Spring"
								},
								{
									"Type": "NodeText",
									"Data": "​建模，它是处于一个内部使用目的合并自其它"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "BeanDefinition"
								},
								{
									"Type": "NodeText",
									"Data": "​对象，其具体对象所使用的实现类类型是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "RootBeanDefinition"
								},
								{
									"Type": "NodeText",
									"Data": "​。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331180245-y6dmrtn",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331180245-y6dmrtn",
				"updated": "20230331180245"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "相关文章"
				}
			]
		},
		{
			"ID": "20230331180245-frop1dv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331180245-frop1dv",
				"updated": "20230331180245"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/andy_zhang2007/article/details/86377244",
					"TextMarkTextContent": "Spring BeanPostProcessor : AutowiredAnnotationBeanPostProcessor"
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/andy_zhang2007/article/details/85381148",
					"TextMarkTextContent": "Spring的bean定义 1 : 基础建模–接口BeanDefinition"
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/andy_zhang2007/article/details/85413055",
					"TextMarkTextContent": "Spring的bean定义 2 : 通用bean定义逻辑 – AbstractBeanDefinition"
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/andy_zhang2007/article/details/85421417",
					"TextMarkTextContent": "Spring的bean定义 3 : BeanDefinition实现类例子演示"
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/andy_zhang2007/article/details/86514320",
					"TextMarkTextContent": "Spring的bean定义 4 : 合并了的bean定义–MergedBeanDefinition"
				}
			]
		}
	]
}