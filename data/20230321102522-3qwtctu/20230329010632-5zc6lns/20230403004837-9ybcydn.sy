{
	"ID": "20230403004837-9ybcydn",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230403004837-9ybcydn",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230403004837-ytvtj6b\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230403004837-8fthwbr\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230403004837-ytvtj6b\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0}",
		"title": "Spring官网阅读 | 总结篇_程序员DMZ的博客-CSDN博客",
		"updated": "20230403223433"
	},
	"Children": [
		{
			"ID": "20230403004837-ytvtj6b",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230403004837-ytvtj6b",
				"updated": "20230403004837"
			}
		},
		{
			"ID": "20230403004837-rh58byv",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230403004837-rh58byv",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"ID": "20230403004837-20qmskp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230403004837-20qmskp",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"ID": "20230403004837-zpp6tp9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230403004837-zpp6tp9",
								"updated": "20230403004837"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://daimingzhi.blog.csdn.net/article/details/105502255",
									"TextMarkTextContent": "https://daimingzhi.blog.csdn.net/article/details/105502255"
								}
							]
						}
					]
				},
				{
					"ID": "20230403004837-mofa3k7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230403004837-mofa3k7",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"ID": "20230403004837-m0eqwn7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230403004837-m0eqwn7",
								"updated": "20230403004837"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "接近用了4个多月的时间，完成了整个《Spring官网阅读》系列的文章，本文主要对本系列所有的文章做一个总结，同时也将所有的目录汇总成一篇文章方便各位读者来阅读。下面这张图是我整个的写作大纲对应的文章目录汇总如下：Spring官网阅读（一）容器及实例化本文主要涉及到官网中的1.2,1.3节。主要介绍了什么是容器，容器如何工作。Spring官网阅读（二）（依赖注入及方法注入）本文..."
								}
							]
						}
					]
				},
				{
					"ID": "20230403004837-lu44taw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230403004837-lu44taw",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"ID": "20230403004837-ehmw7u4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230403004837-ehmw7u4",
								"updated": "20230403004837"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2023-04-03 00:48:37"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230403004837-l8awnvd",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230403004837-l8awnvd",
				"updated": "20230403004837"
			}
		},
		{
			"ID": "20230403004837-423zgzn",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230403004837-423zgzn",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230403004837-9vd2d7v",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-9vd2d7v",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "接近用了4个多月的时间，完成了整个《Spring官网阅读》系列的文章，本文主要对本系列所有的文章做一个总结，同时也将所有的目录汇总成一篇文章方便各位读者来阅读。"
						}
					]
				}
			]
		},
		{
			"ID": "20230403004837-86dck2t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230403004837-86dck2t",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下面这张图是我整个的写作大纲"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/20200414012636139-20230403004837-nlrnmyw.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230403004837-l65v6ie",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230403004837-l65v6ie",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对应的文章目录汇总如下："
				}
			]
		},
		{
			"ID": "20230403004837-rf101ao",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230403004837-rf101ao",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/qq_41907991/article/details/103589868",
					"TextMarkTextContent": "Spring官网阅读（一）容器及实例化"
				}
			]
		},
		{
			"ID": "20230403004837-zu9jorc",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230403004837-zu9jorc",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230403004837-n4nqcaz",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-n4nqcaz",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "本文主要涉及到官网中的"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "1.2"
						},
						{
							"Type": "NodeText",
							"Data": "​,"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "1.3"
						},
						{
							"Type": "NodeText",
							"Data": "​节。主要介绍了什么是容器，容器如何工作。"
						}
					]
				}
			]
		},
		{
			"ID": "20230403004837-ppynn1f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230403004837-ppynn1f",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/qq_41907991/article/details/103589884",
					"TextMarkTextContent": "Spring官网阅读（二）（依赖注入及方法注入）"
				}
			]
		},
		{
			"ID": "20230403004837-69q89sx",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230403004837-69q89sx",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230403004837-c1l1rcz",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-c1l1rcz",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "本文主要涉及到官网中的"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "1.4"
						},
						{
							"Type": "NodeText",
							"Data": "​小节，主要涉及到Spring的依赖注入"
						}
					]
				}
			]
		},
		{
			"ID": "20230403004837-5od6zqc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230403004837-5od6zqc",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/qq_41907991/article/details/103589903",
					"TextMarkTextContent": " Spring官网阅读（三）自动注入"
				}
			]
		},
		{
			"ID": "20230403004837-160cvom",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230403004837-160cvom",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230403004837-8ss4wjy",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-8ss4wjy",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "在对依赖注入跟方法注入有一定了解后，我们需要立马学习自动注入。通过这篇文章你会知道真正的"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "byName"
						},
						{
							"Type": "NodeText",
							"Data": "​跟"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "byType"
						},
						{
							"Type": "NodeText",
							"Data": "​。本文主要涉及到官网中的"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "1.4"
						},
						{
							"Type": "NodeText",
							"Data": "​小节"
						}
					]
				}
			]
		},
		{
			"ID": "20230403004837-2jn97wb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230403004837-2jn97wb",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/qq_41907991/article/details/103589939",
					"TextMarkTextContent": "Spring官网阅读（四）BeanDefinition（上）"
				}
			]
		},
		{
			"ID": "20230403004837-s7fvjo2",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230403004837-s7fvjo2",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230403004837-6bc23pl",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-6bc23pl",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "本文主要涉及到官网中的"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "1.3"
						},
						{
							"Type": "NodeText",
							"Data": "​及"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "1.5"
						},
						{
							"Type": "NodeText",
							"Data": "​中的一些补充知识。同时为我们"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "1.7"
						},
						{
							"Type": "NodeText",
							"Data": "​小节中"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "BeanDefinition"
						},
						{
							"Type": "NodeText",
							"Data": "​的合并做一些铺垫"
						}
					]
				}
			]
		},
		{
			"ID": "20230403004837-wb2uijv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230403004837-wb2uijv",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/qq_41907991/article/details/103866987",
					"TextMarkTextContent": "Spring官网阅读（五）BeanDefinition（下）"
				}
			]
		},
		{
			"ID": "20230403004837-yqkalx2",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230403004837-yqkalx2",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230403004837-g1ezrd2",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-g1ezrd2",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "上篇文章已经对BeanDefinition做了一系列的介绍，这篇文章我们开始学习BeanDefinition合并的一些知识，完善我们整个BeanDefinition的体系，Spring在创建一个bean时多次进行了BeanDefinition的合并，对这方面有所了解也是为以后阅读源码做准备。本文主要对应官网中的1.7小节"
						}
					]
				}
			]
		},
		{
			"ID": "20230403004837-bl9mvmj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230403004837-bl9mvmj",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/qq_41907991/article/details/103867027",
					"TextMarkTextContent": "Spring官网阅读（六）容器的扩展点（一）BeanFactoryPostProcessor"
				}
			]
		},
		{
			"ID": "20230403004837-6a3l2bp",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230403004837-6a3l2bp",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230403004837-qre87md",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-qre87md",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "之前的文章我们已经学习完了BeanDefinition的基本概念跟合并，其中多次提到了容器的扩展点，这篇文章我们就开始学习这方面的知识。这部分内容主要涉及官网中的1.8小结。按照官网介绍来说，容器的扩展点可以分类三类，BeanPostProcessor,BeanFactoryPostProcessor以及FactoryBean。本文我们主要学习BeanFactoryPostProcessor，对应官网中内容为1.8.2小节"
						}
					]
				}
			]
		},
		{
			"ID": "20230403004837-g2pm1sa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230403004837-g2pm1sa",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/qq_41907991/article/details/103867036",
					"TextMarkTextContent": "Spring官网阅读（七）容器的扩展点（二）FactoryBean"
				}
			]
		},
		{
			"ID": "20230403004837-fg1xgm8",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230403004837-fg1xgm8",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230403004837-3h8ua2v",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-3h8ua2v",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "在上篇文章中我们已经对容器的第一个扩展点（BeanFactoryPostProcessor）做了一系列的介绍。其中主要介绍了Spring容器中BeanFactoryPostProcessor的执行流程。已经Spring自身利用了BeanFactoryPostProcessor完成了什么功能，对于一些细节问题可能说的不够仔细，但是在当前阶段我想要做的主要是为我们以后学习源码打下基础。所以对于这些问题我们暂且不去过多纠结，待到源码学习阶段我们会进行更加细致的分析。"
						}
					]
				},
				{
					"ID": "20230403004837-rp1mz7p",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-rp1mz7p",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "在本篇文章中，我们将要学习的是容器的另一个扩展点（FactoryBean）,对于FactoryBean官网上的介绍甚短，但是如果我们对Spring的源码有一定了解，可以发现Spring在很多地方都对这种特殊的Bean做了处理。话不多说，我们开始进入正文。"
						}
					]
				}
			]
		},
		{
			"ID": "20230403004837-ol57j1a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230403004837-ol57j1a",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/qq_41907991/article/details/103867048",
					"TextMarkTextContent": "Spring官网阅读（八）容器的扩展点（三）（BeanPostProcessor）"
				}
			]
		},
		{
			"ID": "20230403004837-p7sk93q",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230403004837-p7sk93q",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230403004837-uby9hjp",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-uby9hjp",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "在前面两篇关于容器扩展点的文章中，我们已经完成了对BeanFactoryPostProcessor很FactoryBean的学习，对于BeanFactoryPostProcessor而言，它能让我们对容器中的扫描出来的BeanDefinition做出修改以达到扩展的目的，而对于FactoryBean而言，它提供了一种特殊的创建Bean的手段，能让我们将一个对象直接放入到容器中，成为Spring所管理的一个Bean。而我们今天将要学习的BeanPostProcessor不同于上面两个接口，它主要干预的是Spring中Bean的整个生命周期（实例化—属性填充—初始化—销毁），关于Bean的生命周期将在下篇文章中介绍，如果不熟悉暂且知道这个概念即可，下面进入我们今天的正文。"
						}
					]
				}
			]
		},
		{
			"ID": "20230403004837-khh2zwn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230403004837-khh2zwn",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/qq_41907991/article/details/104786530",
					"TextMarkTextContent": " Spring官网阅读（九）Spring中Bean的生命周期（上）"
				}
			]
		},
		{
			"ID": "20230403004837-gs0y70l",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230403004837-gs0y70l",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230403004837-xtohgc1",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-xtohgc1",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "在之前的文章中，我们一起学习过了官网上容器扩展点相关的知识，包括FactoryBean，BeanFactroyPostProcessor,BeanPostProcessor，其中BeanPostProcessor还剩一个很重要的知识点没有介绍，就是相关的BeanPostProcessor中的方法的执行时机。之所以在之前的文章中没有介绍是因为这块内容涉及到Bean的生命周期。在这篇文章中我们开始学习Bean的生命周期相关的知识，整个Bean的生命周期可以分为以下几个阶段："
						}
					]
				},
				{
					"ID": "20230403004837-wvdo4ux",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-wvdo4ux",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "实例化（得到一个还没有经过属性注入跟初始化的对象）\n属性注入（得到一个经过了属性注入但还没有初始化的对象）\n初始化（得到一个经过了初始化但还没有经过AOP的对象，AOP会在后置处理器中执行）\n销毁\n在上面几个阶段中，BeanPostProcessor将会穿插执行。而在初始化跟销毁阶段又分为两部分："
						}
					]
				},
				{
					"ID": "20230403004837-c9ir7nf",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-c9ir7nf",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "生命周期回调方法的执行\naware相关接口方法的执行\n这篇文章中，我们先完成Bean生命周期中，整个初始化阶段的学习，对于官网中的章节为1.6小结"
						}
					]
				}
			]
		},
		{
			"ID": "20230403004837-jszd2qu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230403004837-jszd2qu",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/qq_41907991/article/details/104786584",
					"TextMarkTextContent": "Spring官网阅读（十）Spring中Bean的生命周期（下）"
				}
			]
		},
		{
			"ID": "20230403004837-r4myx86",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230403004837-r4myx86",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230403004837-iwa0p4q",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-iwa0p4q",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "在上篇文章中，我们已经对Bean的生命周期做了简单的介绍，主要介绍了整个生命周期中的初始化阶段以及基于容器启动停止时LifeCycleBean的回调机制，另外对Bean的销毁过程也做了简单介绍。但是对于整个Bean的生命周期，这还只是一小部分，在这篇文章中，我们将学习完成剩下部分的学习，同时对之前的内容做一次复习。整个Bean的生命周期，按照我们之前的介绍，可以分为四部分"
						}
					]
				},
				{
					"ID": "20230403004837-jm8vss6",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-jm8vss6",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "实例化\n属性注入\n初始化\n销毁\n本文主要介绍实例化及属性注入阶段"
						}
					]
				}
			]
		},
		{
			"ID": "20230403004837-sxht11c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230403004837-sxht11c",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/qq_41907991/article/details/104890350",
					"TextMarkTextContent": " Spring官网阅读（十一）ApplicationContext详细介绍（上）"
				}
			]
		},
		{
			"ID": "20230403004837-ymrvi3h",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230403004837-ymrvi3h",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230403004837-coue403",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-coue403",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "在前面的文章中，我们已经完成了官网中关于IOC内容核心的部分。包括容器的概念，Spring创建Bean的模型BeanDefinition的介绍，容器的扩展点（BeanFactoryPostProcessor，FactroyBean，BeanPostProcessor）以及最重要的Bean的生命周期等。接下来大概还要花三篇文章完成对官网中第一大节的其它内容的学习，之所以要这么做，是笔者自己粗读了一篇源码后，再读一遍官网，发现源码中的很多细节以及难点都在官网中介绍了。所以这里先跟大家一起把官网中的内容都过一遍，也是为了更好的进入源码学习阶段。"
						}
					]
				},
				{
					"ID": "20230403004837-6znzzqg",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-6znzzqg",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "本文主要涉及到官网中的1.13,1.15,1.16小节中的内容以及第二大节的内容"
						}
					]
				}
			]
		},
		{
			"ID": "20230403004837-0rxwvaw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230403004837-0rxwvaw",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/qq_41907991/article/details/104934770",
					"TextMarkTextContent": "Spring官网阅读（十二）ApplicationContext详解（中）"
				}
			]
		},
		{
			"ID": "20230403004837-4rg14ku",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230403004837-4rg14ku",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230403004837-fa2m627",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-fa2m627",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "在上篇文章中我们已经对ApplicationContext的一部分内容做了介绍，ApplicationContext主要具有以下几个核心功能："
						}
					]
				},
				{
					"ID": "20230403004837-zzwqsj5",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-zzwqsj5",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "国际化\n借助Environment接口，完成了对Spring运行环境的抽象，可以返回环境中的属性，并能出现出现的占位符\n借助于Resource系列接口，完成对底层资源的访问及加载\n继承了ApplicationEventPublisher接口，能够进行事件发布监听\n负责创建、配置及管理Bean\n在上篇文章我们已经分析学习了1，2两点，这篇文章我们继续之前的学习"
						}
					]
				}
			]
		},
		{
			"ID": "20230403004837-xgnksi2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230403004837-xgnksi2",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/qq_41907991/article/details/105197581",
					"TextMarkTextContent": "Spring官网阅读（十三）ApplicationContext详解（下）"
				}
			]
		},
		{
			"ID": "20230403004837-49so6ii",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230403004837-49so6ii",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230403004837-4cl80wg",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-4cl80wg",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "在前面两篇文章中，我们已经对ApplicationContext的大部分内容做了介绍，包括国际化，Spring中的运行环境，Spring中的资源，Spring中的事件监听机制，还剩唯一一个BeanFactory相关的内容没有介绍，这篇文章我们就来介绍BeanFactory，这篇文章结束，关于ApplicationContext相关的内容我们也总算可以告一段落了。本文对应官网中的1.16及1.15小结"
						}
					]
				}
			]
		},
		{
			"ID": "20230403004837-rngshu9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230403004837-rngshu9",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/qq_41907991/article/details/105214244",
					"TextMarkTextContent": " Spring官网阅读（十四）Spring中的BeanWrapper及类型转换"
				}
			]
		},
		{
			"ID": "20230403004837-o8vl5iv",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230403004837-o8vl5iv",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230403004837-bljkyaw",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-bljkyaw",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "BeanWrapper是Spring中一个很重要的接口，Spring在通过配置信息创建对象时，第一步首先就是创建一个BeanWrapper。这篇文章我们就分析下这个接口，本文内容主要对应官网中的"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "3.3"
						},
						{
							"Type": "NodeText",
							"Data": "​及"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "3.4"
						},
						{
							"Type": "NodeText",
							"Data": "​小结"
						}
					]
				}
			]
		},
		{
			"ID": "20230403004837-ubhjq7q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230403004837-ubhjq7q",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/qq_41907991/article/details/105237926",
					"TextMarkTextContent": "Spring官网阅读（十五）Spring中的格式化（Formatter）"
				}
			]
		},
		{
			"ID": "20230403004837-dtaota3",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230403004837-dtaota3",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230403004837-y6iz2fl",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-y6iz2fl",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "在上篇文章中，我们已经学习过了Spring中的类型转换机制。现在我们考虑这样一个需求：在我们web应用中，我们经常需要将前端传入的字符串类型的数据转换成指定格式或者指定数据类型来满足我们调用需求，同样的，后端开发也需要将返回数据调整成指定格式或者指定类型返回到前端页面。这种情况下，Converter已经没法直接支撑我们的需求了。这个时候，格式化的作用就很明显了，这篇文章我们就来介绍Spring中格式化的一套体系。本文主要涉及官网中的3.5及3.6小结"
						}
					]
				}
			]
		},
		{
			"ID": "20230403004837-ywpqiwx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230403004837-ywpqiwx",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/qq_41907991/article/details/105333258",
					"TextMarkTextContent": "Spring官网阅读（十六）Spring中的数据绑定"
				}
			]
		},
		{
			"ID": "20230403004837-g1bs1w1",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230403004837-g1bs1w1",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230403004837-1oddt6y",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-1oddt6y",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "在前面的文章我们学习过了Spring中的类型转换以及格式化，对于这两个功能一个很重要的应用场景就是应用于我们在XML中配置的Bean的属性值上，如下："
						}
					]
				},
				{
					"ID": "20230403004837-xdji271",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-xdji271",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "​    ​ 1 2 3 4 5 在上面这种情况下，我们从XML中解析出来的值类型肯定是String类型，而对象中的属性为int类型，当Spring将配置中的数据应用到Bean上时，就调用了我们的类型转换器完成了String类型的字面值到int类型的转换。   那么除了在上面这种情况中使用了类型转换，还有哪些地方用到了呢？对了，就是本文要介绍的数据绑定–DataBinder。"
						}
					]
				}
			]
		},
		{
			"ID": "20230403004837-413ngof",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230403004837-413ngof",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/qq_41907991/article/details/105337481",
					"TextMarkTextContent": " Spring官网阅读（十七）Spring中的数据校验"
				}
			]
		},
		{
			"ID": "20230403004837-03bhccv",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230403004837-03bhccv",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230403004837-dhsylf9",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-dhsylf9",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "在前文中我们一起学习了Spring中的数据绑定，也就是整个DataBinder的体系，其中有提到DataBinder跟校验相关。可能对于Spring中的校验大部分同学跟我一一样，都只是知道可以通过@Valid / @Validated来对接口的入参进行校验，但是对于其底层的具体实现以及一些细节都不是很清楚，通过这篇文章我们就来彻底搞懂Spring中的校验机制。"
						}
					]
				},
				{
					"ID": "20230403004837-lfjdhrz",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-lfjdhrz",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "在学习Spring中某个功能时，往往要从Java本身出发。比如我们之前介绍过的Spring中的国际化（见《Spring官网阅读（十一）》）、Spring中的ResolvableType（见《Spring杂谈》系列文章）等等，它们都是对Java本身的封装，沿着这个思路，我们要学习Spring中的数据校验，必然要先对Java中的数据校验有一定了解。"
						}
					]
				}
			]
		},
		{
			"ID": "20230403004837-9znbfej",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230403004837-9znbfej",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/qq_41907991/article/details/105500421",
					"TextMarkTextContent": " Spring官网阅读（十八）Spring中的AOP "
				}
			]
		},
		{
			"ID": "20230403004837-55qwat8",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230403004837-55qwat8",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230403004837-29vd85j",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230403004837-29vd85j",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "本篇文章将作为整个Spring官网阅读笔记的最后一篇。如果要谈SpringFramework必定离不开两点"
						}
					]
				},
				{
					"ID": "20230403004837-8tmqcbm",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20230403004837-8tmqcbm",
						"updated": "20230403004837"
					},
					"Children": [
						{
							"ID": "20230403004837-uwbvgyi",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230403004837-uwbvgyi",
								"updated": "20230403004837"
							},
							"Children": [
								{
									"ID": "20230403004837-h6d3sk9",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230403004837-h6d3sk9",
										"updated": "20230403004837"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "IOC（控制反转）"
										}
									]
								}
							]
						},
						{
							"ID": "20230403004837-dwh91jo",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230403004837-dwh91jo",
								"updated": "20230403004837"
							},
							"Children": [
								{
									"ID": "20230403004837-6kljvlg",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230403004837-6kljvlg",
										"updated": "20230403004837"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "AOP（面向切面）\n在前面的文章中我们已经对IOC做过详细的介绍了，本文主要介绍AOP，关于其中的源码部分将在专门的源码专题介绍，本文主要涉及的是AOP的基本概念以及如何使用,本文主要涉及到官网中的第5、6两大章"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230403004837-ycgr5jc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230403004837-ycgr5jc",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "要是文章有帮助到你的话，记得点个赞吧！~"
				}
			]
		},
		{
			"ID": "20230403004837-8fthwbr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230403004837-8fthwbr",
				"updated": "20230403004837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "扫描下方二维码，关注我的公众号，回复加群，一起学习~\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/20200523082537145-20230403004837-o4gwg6m.jpg"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		}
	]
}