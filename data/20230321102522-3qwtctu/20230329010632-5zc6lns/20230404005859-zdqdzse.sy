{
	"ID": "20230404005859-zdqdzse",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230404005859-zdqdzse",
		"title": "吃透Java的博客",
		"updated": "20230404005933"
	},
	"Children": [
		{
			"ID": "20230404005859-88xqqmv",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230404005859-88xqqmv",
				"updated": "20230404005859"
			}
		},
		{
			"ID": "20230404005859-8ootimg",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230404005859-8ootimg",
				"updated": "20230404005859"
			},
			"Children": [
				{
					"ID": "20230404005859-rr1p0e7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-rr1p0e7",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-5k1ubmd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-5k1ubmd",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u013277209/category_10863472.html",
									"TextMarkTextContent": "https://blog.csdn.net/u013277209/category_10863472.html"
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-fajmvm0",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-fajmvm0",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-x1gr351",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-x1gr351",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "吃透Spring源码（二十三）：事物传播特性,吃透Spring源码（二十二）：事物执行流程,吃透Spring源码（二十一）：事物初始化流程之注解配置方式,spring,spring源码扩展,initPropertySou"
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-fs04ird",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-fs04ird",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-osd5eym",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-osd5eym",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2023-04-04 00:58:59"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230404005859-9kdec5h",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230404005859-9kdec5h",
				"updated": "20230404005859"
			}
		},
		{
			"ID": "20230404005859-ajbwv3j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230404005859-ajbwv3j",
				"updated": "20230404005859"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/20201014180756919-20230404005858-kvt70yy.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230404005859-uyjtpph",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230404005859-uyjtpph",
				"updated": "20230404005859"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "吃透Spring源码"
				}
			]
		},
		{
			"ID": "20230404005859-gi45q1l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230404005859-gi45q1l",
				"updated": "20230404005859"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/iconAddWhite-20230404005858-pl2ljzg.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "关注"
				}
			]
		},
		{
			"ID": "20230404005859-9uf6ze6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230404005859-9uf6ze6",
				"updated": "20230404005859"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Spring framework源码"
				}
			]
		},
		{
			"ID": "20230404005859-2ndmjsm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230404005859-2ndmjsm",
				"updated": "20230404005859"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "**                                   "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "关注数："
				},
				{
					"Type": "NodeText",
					"Data": "47**                                 文章数："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "23"
				},
				{
					"Type": "NodeText",
					"Data": "                                 文章阅读量："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "15635"
				},
				{
					"Type": "NodeText",
					"Data": "                                 文章收藏量："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "57"
				}
			]
		},
		{
			"ID": "20230404005859-m2yh2vi",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230404005859-m2yh2vi",
				"updated": "20230404005859"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "作者:             **                      吃透Java             **"
				}
			]
		},
		{
			"ID": "20230404005859-66p1h2x",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230404005859-66p1h2x",
				"updated": "20230404005859"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "             专注Java技术，每天都要努力一点点             \n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230404005859-7z3ywng",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230404005859-7z3ywng",
				"updated": "20230404005859"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "展开"
				}
			]
		},
		{
			"ID": "20230404005859-5gntkfa",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230404005859-5gntkfa",
				"updated": "20230404005859"
			},
			"Children": [
				{
					"ID": "20230404005859-meluiqs",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-meluiqs",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-q63ajpj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-q63ajpj",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u013277209/article/details/115022692",
									"TextMarkTextContent": "                                                     吃透Spring源码（二十三）：事物传播特性                                                                                                一，上篇源码总结关于异常回滚：如果有保存点，回滚到保存点。否则，如果当前是一个新事物（transaction != null \u0026amp;\u0026amp; newTransaction==true）,直接进行回滚。否则，设置全局回滚标记，如果既没有保存点，又不是新的事务，如果可以设置全局的回滚标记的话，就会设置。关于事物提交：如果在事务链中已经被标记回滚，那么不会尝试提交事务，直接回滚如果设置了全局回滚，则进行全局回滚如果是新事务（transaction != null \u0026amp;\u0026amp;                               原创                   ** 2021-03-20 09:44:12  · **                   **                     195 阅读  ·                    **                   **                     0 评论                     **                          "
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-6ezwnjo",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-6ezwnjo",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-f2p2apc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-f2p2apc",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u013277209/article/details/114996830",
									"TextMarkTextContent": "                                                     吃透Spring源码（二十二）：事物执行流程                                                                                                文章目录执行流程1，AOP拦截器入口2，TransactionInterceptor事物的核心处理一，获取事物1，`doGetTransaction()`获取当前事物2，如果当前已存在事物3，如果当前事物不存在二，挂起事物三，恢复事物四，执行目标方法五，异常回滚六，事物提交七，总结执行流程1，AOP拦截器入口测试类：public class TransactionTest {    public static void main(String[] args) {        Annotatio                              原创                   ** 2021-03-19 09:14:49  · **                   **                     288 阅读  ·                    **                   **                     0 评论                     **                          "
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-cjj99zw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-cjj99zw",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-o8sokg6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-o8sokg6",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u013277209/article/details/114886302",
									"TextMarkTextContent": "                                                     吃透Spring源码（二十一）：事物初始化流程之注解配置方式                                                                                                一，例子准备BookDao.javapublic class BookDao {    @Autowired    JdbcTemplate jdbcTemplate;    public JdbcTemplate getJdbcTemplate() {        return jdbcTemplate;    }    public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {        this.jdbcTemplat                              原创                   ** 2021-03-16 17:05:42  · **                   **                     243 阅读  ·                    **                   **                     0 评论                     **                          "
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-4wrzqkl",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-4wrzqkl",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-nlae3wo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-nlae3wo",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u013277209/article/details/114739792",
									"TextMarkTextContent": "                                                     吃透Spring源码（二十）：AOP拦截器链执行过程                                                                                                文章目录例子准备一，执行流程二，获取拦截器链三，执行拦截器链1，`ExposeInvocationInterceptor`2，AspectJAfterThrowingAdvice3，AfterReturningAdviceInterceptor4，AspectJAfterAdvice5，AspectJAroundAdvice6，MethodBeforeAdviceInterceptor7，返回到AspectJAroundAdvice8，返回到AspectJAfterAdvice9，返回到AfterRetur                              原创                   ** 2021-03-15 09:03:55  · **                   **                     585 阅读  ·                    **                   **                     1 评论                     **                          "
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-cws7jm4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-cws7jm4",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-sb5oys9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-sb5oys9",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u013277209/article/details/114707651",
									"TextMarkTextContent": "                                                     吃透Spring源码（十九）：CGLIB动态代理创建过程                                                                                                \t\tCGLIB(Code Generation Library)是一个开源项目！是一个强大的，高性能，高质量的Code生成类库，它可以在运行期扩展Java类与实现Java接口。\t\tCGLIB是一个强大的高性能的代码生成包。它广泛的被许多AOP的框架使用，例如Spring AOP为他们提供方法的interception（拦截）。CGLIB包的底层是通过使用一个小而快的字节码处理框架ASM，来转换字节码并生成新的类。除了CGLIB包，脚本语言例如Groovy和BeanShell，也是使用ASM来生成jav                              原创                   ** 2021-03-13 12:17:59  · **                   **                     737 阅读  ·                    **                   **                     0 评论                     **                          "
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-ldmi6up",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-ldmi6up",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-00f0vv0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-00f0vv0",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u013277209/article/details/114698993",
									"TextMarkTextContent": "                                                     吃透Spring源码（十八）：AOP创建过程之注解配置方式                                                                                                一，例子准备切面类：LogUtil.java@Aspect@Componentpublic class LogUtil {    @Pointcut(\u0026quot;execution(public Integer com.mashibing.aop.annotation.service.MyCalculator.*(Integer,Integer))\u0026quot;)    public void myPointCut(){}    @Around(\u0026quot;myPointCut()\u0026quot;)    public Object                              原创                   ** 2021-03-12 16:11:18  · **                   **                     330 阅读  ·                    **                   **                     2 评论                     **                          "
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-y0i1gdq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-y0i1gdq",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-g7hg7nj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-g7hg7nj",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u013277209/article/details/114678851",
									"TextMarkTextContent": "                                                     吃透Spring源码（十七）：AOP创建过程之XML配置方式                                                                                                一，例子准备切面类LogUtil.javapublic class LogUtil {    private int start(JoinPoint joinPoint){        //获取方法签名        Signature signature = joinPoint.getSignature();        //获取参数信息        Object[] args = joinPoint.getArgs();        System.out.println(\u0026quot;lo                              原创                   ** 2021-03-11 20:13:33  · **                   **                     281 阅读  ·                    **                   **                     1 评论                     **                          "
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-w48moni",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-w48moni",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-hi1m3sj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-hi1m3sj",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u013277209/article/details/114642436",
									"TextMarkTextContent": "                                                     吃透Spring源码（十六）：ConfigurationClassPostProcessor详细介绍                                                                                                一，ConfigurationClassPostProcessor简介ConfigurationClassPostProcessor是一个后置处理器的类，主要功能是参与BeanFactory的建造，主要功能如下：解析加了@Configuration的配置类解析@ComponentScan扫描的包解析@ComponentScans扫描的包解析@Import注解ConfigurationClassPostProcessor类图：ConfigurationClassPostProcessor                               原创                   ** 2021-03-10 18:19:44  · **                   **                     785 阅读  ·                    **                   **                     1 评论                     **                          "
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-jjhigq1",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-jjhigq1",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-83ow0jw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-83ow0jw",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u013277209/article/details/114594589",
									"TextMarkTextContent": "                                                     吃透Spring源码（十五）：invokeBeanFactoryPostProcessors 执行流程                                                                                                进入源码之前先来了解一下BeanFactoryPostProcessor和BeanDefinitionRegistryPostProcessorBeanFactoryPostProcessor：主要针对的操作对象是BeanFactory，主要是对BeanFactory的修改。BeanDefinitionRegistryPostProcessor：是BeanFactoryPostProcessor的子接口，主要针对的操作对象是BeanDefinitionpublic interface BeanFa                              原创                   ** 2021-03-09 18:41:43  · **                   **                     284 阅读  ·                    **                   **                     2 评论                     **                          "
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-sumktsj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-sumktsj",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-od11f41",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-od11f41",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u013277209/article/details/111593453",
									"TextMarkTextContent": "                                                     吃透Spring源码（十四）：动态代理JDK实现方式源码分析                                                                                                JDK动态代理**所谓动态代理是指：在程序运行期间根据需要动态创建代理类及其实例来完成具体的功能。**动态代理主要分为JDK动态代理和cglib动态代理两大类，本文主要对JDK动态代理进行探讨。使用步骤新建接口新建一个接口实现类实现代理类回调接口InvocationHandler通过Proxy.newProxyInstance()方法创建代理类使用案例1，新建HelloWord接口public interface HelloWord {    void sayHello();                                 原创                   ** 2020-12-23 16:41:38  · **                   **                     272 阅读  ·                    **                   **                     0 评论                     **                          "
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-uxpddn2",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-uxpddn2",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-oer1psn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-oer1psn",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u013277209/article/details/110824128",
									"TextMarkTextContent": "                                                     吃透Spring源码（十三）：Spring循环依赖源码分析                                                                                                一，循环依赖1，什么是循环依赖循环依赖其实就是循环引用，也就是两个或则两个以上的bean互相持有对方，最终形成闭环。比如A依赖于B，B依赖于C，C又依赖于A。在Spring中一般分为构造器循环依赖和filed属性循环依赖。2，构造器循环依赖实例化A对象需要依赖B对象，实例化B对象需要依赖A对象，所以最终两个都实例化不了。@Componentpublic class A {    private B b;    public A(B b) {        this.b = b;                                原创                   ** 2020-12-07 18:07:09  · **                   **                     531 阅读  ·                    **                   **                     0 评论                     **                          "
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-iy4jl87",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-iy4jl87",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-y14k6yq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-y14k6yq",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u013277209/article/details/110651253",
									"TextMarkTextContent": "                                                     吃透Spring源码（十二）：Spring initializeBean源码分析                                                                                                一，initializeBean方法概述Spring中的initializeBean()方法是doCreateBean方法三部曲的最后一步，完成initializeBean()则整个bean的创建过程才算完成，我们来看一下bean的创建过程doCreateBean()方法中三部曲：实例化（createBeanInstance），填充属性（populateBean），初始化（initializeBean）。public abstract class AbstractAutowireCapableBeanF                              原创                   ** 2020-12-04 15:53:48  · **                   **                     495 阅读  ·                    **                   **                     3 评论                     **                          "
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-wsn3b6c",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-wsn3b6c",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-8yxf89b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-8yxf89b",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u013277209/article/details/110235934",
									"TextMarkTextContent": "                                                     吃透Spring源码（十一）：Spring属性填充populateBean源码分析                                                                                                一，属性填充分类Spring实例化前面我们已经分析过了，实例化之后，紧接着就是对属性进行填充了，属性填充主要是对自动注入(autowired)的处理，我们大致可以把他分为三类：autowireByName：通过名字对属性填充。autowireByType：通过类型对属性填充。@Autowired：通过bean的后置处理器AutowiredAnnotationBeanPostProcessor对@Autowired注解属性填充我们来看一下具体源码：\tprotected void populat                              原创                   ** 2020-11-27 16:33:39  · **                   **                     1217 阅读  ·                    **                   **                     0 评论                     **                          "
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-fgyh1lp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-fgyh1lp",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-brjme02",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-brjme02",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u013277209/article/details/109780513",
									"TextMarkTextContent": "                                                     吃透Spring源码（九）：Spring实例化(createBeanInstance)源码解析                                                                                                一，createBeanInstance()方法概述createBeanInstance 是Spring实例化的核心代码，它根据不同的情况会调用四种实例化方法：obtainFromSupplier()：通过Supplier实例化。instantiateUsingFactoryMethod()：通过工厂方法实例化。autowireConstructor()：用合适的构造函数实例化。instantiateBean()：用无参构造函数实例化。protected BeanWrapper create                              原创                   ** 2020-11-18 18:02:16  · **                   **                     736 阅读  ·                    **                   **                     1 评论                     **                          "
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-msj75wz",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-msj75wz",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-u043i6l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-u043i6l",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u013277209/article/details/109804892",
									"TextMarkTextContent": "                                                     吃透Spring源码（十）：Spring实例化Bean的五种方式源码解析                                                                                                一，概述对于我们Java来说，创建对象无非就是new或者通过反射两种方式。Spring中实例化对象一般是通过反射来实现的，但是Spring的强大之处不仅仅在于它为Java开发者提供了极大便利，更在于它的开放式架构，使得用户可以拥有最大扩展Spring的能力。我们大致可以总结出以下五种实例化bean的方式：实现InstantiationAwareBeanPostProcessor接口实现FactoryBean接口通过Supplier接口工厂方法factory-method通过反射二，实现                              原创                   ** 2020-11-19 11:01:35  · **                   **                     587 阅读  ·                    **                   **                     9 评论                     **                          "
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-4t83a5s",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-4t83a5s",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-hea9j87",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-hea9j87",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u013277209/article/details/109742074",
									"TextMarkTextContent": "                                                     吃透Spring源码（八）：Spring中FactoryBean真相揭秘                                                                                                一，FactoryBean和BeanFactoryFactoryBean：首先它是一个Bean，但又不仅仅是一个Bean。它是一个能生产或修饰对象生成的工厂Bean，类似于设计模式中的工厂模式和装饰器模式。它能在需要的时候生产一个对象，且不仅仅限于它自身，它能返回任何Bean的实例。BeanFactory：是Spring中Bean工厂的顶层接口，也是我们常说的SpringIOC容器，它定下了IOC容器的一些规范和常用方法并管理着Spring中所有的Bean。二，FactoryBean揭秘定义一个                              原创                   ** 2020-11-17 14:34:17  · **                   **                     375 阅读  ·                    **                   **                     0 评论                     **                          "
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-ep62rrf",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-ep62rrf",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-aq0jtgu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-aq0jtgu",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u013277209/article/details/109726758",
									"TextMarkTextContent": "                                                     吃透Spring源码（七）：自定义类型转换器                                                                                                一，ConversionService转换服务一般来说，用户可以使⽤用内置的或者⾃己实现Converter接⼝来实现类型转换，ConversionService类接口内部调用Converter接口实现类来实现类型转换。1，ConversionService接口类型转换的服务接口，这是转换系统的入口，调用convert(Object, Class)进行一次线程安全的类型转换。public interface ConversionService {\t// 判断能否进行类型转换\tboolean c                              原创                   ** 2020-11-16 18:24:07  · **                   **                     1028 阅读  ·                    **                   **                     0 评论                     **                          "
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-bp142cp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-bp142cp",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-h7ff18s",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-h7ff18s",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u013277209/article/details/109581507",
									"TextMarkTextContent": "                                                     吃透Spring源码（六）：spring事件通知机制源码解析                                                                                                一，Spring事件机制Spring 中的事件通知机制就是观察者模式的一种实现。观察者是 ApplicationListener，可以实现接口定义观察者，也可以使用注解@EventListener定义观察者。观察者感兴趣的是某种状态的变化，这种状态变化使用 ApplicationEvent 来传达，也就是事件对象。我们说的 Spring 中的事件，就是 ApplicationEvent。在事件中，被观察者可以认为是发出事件的一方，只有在状态变化时才发布事件。当有状态发生变化时，发布者调用 Applicat                              原创                   ** 2020-11-09 17:09:39  · **                   **                     615 阅读  ·                    **                   **                     1 评论                     **                          "
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-w60l8yg",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-w60l8yg",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-p25b2ax",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-p25b2ax",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u013277209/article/details/109487922",
									"TextMarkTextContent": "                                                     吃透Spring源码（五）：spring中Beanefinition完全解析                                                                                                大家用过spring的应该都知道BeanDefinition是记录bean的定义信息的，但是我们看源码时会发现，源码中通过BeanDefinition接口派生出来好多类，比如GenericBeanDefinition,AnnotatedGenericBeanDefinition,RootBeanDefinition等等，那么他们之间有什么区别，都是在什么情况下用到的呢？这篇文章就带大家一起探讨。1，BeanDefinition常用类关系图2，BeanDefinition接口BeanDefinitio                              原创                   ** 2020-11-04 15:40:19  · **                   **                     803 阅读  ·                    **                   **                     1 评论                     **                          "
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-l9iabjq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-l9iabjq",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-ecty759",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-ecty759",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u013277209/article/details/109201533",
									"TextMarkTextContent": "                                                     吃透Spring源码（四）：自定义属性编辑器PropertyEditor                                                                                                Spring的强大之处不仅仅在于它为Java开发者提供了极大便利，更在于它的开放式架构，使得用户可以拥有最大扩展Spring的能力。我们在xml定义bean时，输入的内容都是字符串。spring会根据已经注册好的属性编辑器解析这些字符串，实例化成对应的类型。一，源码相关1，创建默认的propertyEditorRegister在AbstractApplicationContext的refresh()方法的prepareBeanFactory()方法中创建一个默认的PropertyEditorR.                              原创                   ** 2020-10-21 15:43:24  · **                   **                     778 阅读  ·                    **                   **                     2 评论                     **                          "
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-haw1q9p",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-haw1q9p",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-1r65ajo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-1r65ajo",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u013277209/article/details/109183125",
									"TextMarkTextContent": "                                                     吃透Spring源码（二）：customizeBeanFactory方法扩展点                                                                                                Spring的强大之处不仅仅在于它为Java开发者提供了极大便利，更在于它的开放式架构，使得用户可以拥有最大扩展Spring的能力。protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) {\t\t// 如果属性allowBeanDefinitionOverriding不为空，设置给beanFactory对象相应属性，是否允许覆盖同名称的不同定义的对象\t\tif (this.allowBeanDefiniti.                              原创                   ** 2020-10-20 17:00:38  · **                   **                     1215 阅读  ·                    **                   **                     3 评论                     **                          "
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-jybnhya",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-jybnhya",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-6u3zxgf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-6u3zxgf",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u013277209/article/details/109186619",
									"TextMarkTextContent": "                                                     吃透Spring源码（三）：自定义配置文件标签                                                                                                Spring的强大之处不仅仅在于它为Java开发者提供了极大便利，更在于它的开放式架构，使得用户可以拥有最大扩展Spring的能力。我们在用xml定义spring信息时，默认的element只包含beans，bean，import，alias这四个，其它任何标签都属于自定义标签，均需要引入相应的命名空间，如：context，aop标签等。protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate del.                              原创                   ** 2020-10-21 10:11:57  · **                   **                     368 阅读  ·                    **                   **                     2 评论                     **                          "
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-ps1ciru",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-ps1ciru",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-w9nhbz2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-w9nhbz2",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u013277209/article/details/109177452",
									"TextMarkTextContent": "                                                     吃透Spring源码（一）：initPropertySources方法扩展点                                                                                                Spring的强大之处不仅仅在于它为Java开发者提供了极大便利，更在于它的开放式架构，使得用户可以拥有最大扩展Spring的能力。protected void initPropertySources() {\t\t// For subclasses: do nothing by default.\t}在AbstractApplicationContext类中有一个initPropertySources方法是留给子类扩展，它是在refresh()的第一个方法prepareRefresh();方法中调.                              原创                   ** 2020-10-20 12:02:47  · **                   **                     2888 阅读  ·                    **                   **                     0 评论                     **                          "
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-g2rqfwf",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-g2rqfwf",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-txiogwt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-txiogwt",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/badge-20230404005858-foq3007.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=11010502030143",
									"TextMarkTextContent": "公安备案号11010502030143"
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-7q3fnwu",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-7q3fnwu",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-c2jc9z2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-c2jc9z2",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "http://beian.miit.gov.cn/publish/query/indexFirst.action",
									"TextMarkTextContent": "京ICP备19004658号"
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-peioymw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-peioymw",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-1y813tv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-1y813tv",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://csdnimg.cn/release/live_fe/culture_license.png",
									"TextMarkTextContent": "京网文〔2020〕1039-165号"
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-86arcsa",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-86arcsa",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-v3ueir8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-v3ueir8",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://csdnimg.cn/cdn/content-toolbar/csdn-ICP.png",
									"TextMarkTextContent": "经营性网站备案信息"
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-7r0hq5a",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-7r0hq5a",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-sugwngh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-sugwngh",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "http://www.bjjubao.org/",
									"TextMarkTextContent": "北京互联网违法和不良信息举报中心"
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-wjx0k83",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-wjx0k83",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-y50a44k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-y50a44k",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://download.csdn.net/tutelage/home",
									"TextMarkTextContent": "家长监护"
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-axjkxxz",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-axjkxxz",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-9cypy2f",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-9cypy2f",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "http://www.cyberpolice.cn/",
									"TextMarkTextContent": "网络110报警服务"
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-38z5ylk",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-38z5ylk",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-hzi09pk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-hzi09pk",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "http://www.12377.cn/",
									"TextMarkTextContent": "中国互联网举报中心"
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-phazht4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-phazht4",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-3q4mwug",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-3q4mwug",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://chrome.google.com/webstore/detail/csdn%E5%BC%80%E5%8F%91%E8%80%85%E5%8A%A9%E6%89%8B/kfkdboecolemdjodhmhmcibjocfopejo?hl=zh-CN",
									"TextMarkTextContent": "Chrome商店下载"
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-xbmte01",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-xbmte01",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-nddmut5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-nddmut5",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/blogdevteam/article/details/126135357",
									"TextMarkTextContent": "账号管理规范"
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-eiqr1ay",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-eiqr1ay",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-1u4nhqr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-1u4nhqr",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://www.csdn.net/company/index.html#statement",
									"TextMarkTextContent": "版权与免责声明"
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-lpdesak",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-lpdesak",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-79rvduv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-79rvduv",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/blogdevteam/article/details/90369522",
									"TextMarkTextContent": "版权申诉"
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-2tzi9oz",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-2tzi9oz",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-chx6454",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-chx6454",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://img-home.csdnimg.cn/images/20220705052819.png",
									"TextMarkTextContent": "出版物许可证"
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-udllt6c",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-udllt6c",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-3vmsskj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-3vmsskj",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://img-home.csdnimg.cn/images/20210414021142.jpg",
									"TextMarkTextContent": "营业执照"
								}
							]
						}
					]
				},
				{
					"ID": "20230404005859-a019p94",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404005859-a019p94",
						"updated": "20230404005859"
					},
					"Children": [
						{
							"ID": "20230404005859-qxtbqe0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404005859-qxtbqe0",
								"updated": "20230404005859"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "©1999-2023北京创新乐知网络技术有限公司"
								}
							]
						}
					]
				}
			]
		}
	]
}