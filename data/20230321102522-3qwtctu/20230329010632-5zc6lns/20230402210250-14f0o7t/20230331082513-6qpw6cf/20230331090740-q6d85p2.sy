{
	"ID": "20230331090740-q6d85p2",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230331090740-q6d85p2",
		"title": "Spring源码分析二十四 ： cglib 的代理过程_猫吻鱼的博客-CSDN博客",
		"updated": "20230331090740"
	},
	"Children": [
		{
			"ID": "20230331090740-k76wtkw",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331090740-k76wtkw",
				"updated": "20230331090740"
			}
		},
		{
			"ID": "20230331090740-dxpwbru",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230331090740-dxpwbru",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"ID": "20230331090740-3vcfjuy",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331090740-3vcfjuy",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-kgty47u",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-kgty47u",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/119823785",
									"TextMarkTextContent": "https://blog.csdn.net/qq_36882793/article/details/119823785"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-cgii3sj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331090740-cgii3sj",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-9npxlgp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-9npxlgp",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一、前言在 Spring Aop 中，存在 Advice、 PointCut、Advisor 三个角色。其中存在DynamicIntroductionAdvice ：IntroductionAdvisor二、动态引介 Demohttps://blog.csdn.net/f641385712/article/details/89303088"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-cmjylee",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331090740-cmjylee",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-xkfoh9l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-xkfoh9l",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2023-03-31 09:07:40"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331090740-azxe3dv",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331090740-azxe3dv",
				"updated": "20230331090740"
			}
		},
		{
			"ID": "20230331090740-08b31z4",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331090740-08b31z4",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "文章目录"
				}
			]
		},
		{
			"ID": "20230331090740-5jaoluj",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230331090740-5jaoluj",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"ID": "20230331090740-eua7s4w",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331090740-eua7s4w",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-dxgw57p",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-dxgw57p",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/119823785#_2",
									"TextMarkTextContent": "一、前言"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-2btx5w4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331090740-2btx5w4",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-uxx6k6j",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230331090740-uxx6k6j",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"ID": "20230331090740-nhekrir",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331090740-nhekrir",
										"updated": "20230331090740"
									},
									"Children": [
										{
											"ID": "20230331090740-4mjskq7",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331090740-4mjskq7",
												"updated": "20230331090740"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/119823785#1__orgspringframeworkcglibproxyCallback_31",
													"TextMarkTextContent": "1. org.springframework.cglib.proxy.Callback"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-za0uykb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331090740-za0uykb",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-6obaf8m",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-6obaf8m",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/119823785#_54",
									"TextMarkTextContent": "二、代理对象的创建"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-1udgtd5",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331090740-1udgtd5",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-m10n8zh",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230331090740-m10n8zh",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"ID": "20230331090740-wteniex",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331090740-wteniex",
										"updated": "20230331090740"
									},
									"Children": [
										{
											"ID": "20230331090740-97w4ytm",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331090740-97w4ytm",
												"updated": "20230331090740"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/119823785#1_CglibAopProxygetCallbacks_121",
													"TextMarkTextContent": "1. CglibAopProxy#getCallbacks"
												}
											]
										}
									]
								},
								{
									"ID": "20230331090740-zwjopm7",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331090740-zwjopm7",
										"updated": "20230331090740"
									},
									"Children": [
										{
											"ID": "20230331090740-c3g3tat",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331090740-c3g3tat",
												"updated": "20230331090740"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/119823785#2_ProxyCallbackFilter_224",
													"TextMarkTextContent": "2. ProxyCallbackFilter"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-jl3clok",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331090740-jl3clok",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-oia0ahj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-oia0ahj",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/119823785#Cglib__327",
									"TextMarkTextContent": "三、Cglib 的拦截器"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-hhkgdiq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331090740-hhkgdiq",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-184nso7",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230331090740-184nso7",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"ID": "20230331090740-9ssa136",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331090740-9ssa136",
										"updated": "20230331090740"
									},
									"Children": [
										{
											"ID": "20230331090740-5m9488f",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331090740-5m9488f",
												"updated": "20230331090740"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/119823785#1_aopInterceptor_345",
													"TextMarkTextContent": "1. aopInterceptor"
												}
											]
										}
									]
								},
								{
									"ID": "20230331090740-vqpv4cs",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331090740-vqpv4cs",
										"updated": "20230331090740"
									},
									"Children": [
										{
											"ID": "20230331090740-2m27u08",
											"Type": "NodeList",
											"ListData": {},
											"Properties": {
												"id": "20230331090740-2m27u08",
												"updated": "20230331090740"
											},
											"Children": [
												{
													"ID": "20230331090740-nh8m51n",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230331090740-nh8m51n",
														"updated": "20230331090740"
													},
													"Children": [
														{
															"ID": "20230331090740-z28o229",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230331090740-z28o229",
																"updated": "20230331090740"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "a",
																	"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/119823785#11_ProxyFactorygetInterceptorsAndDynamicInterceptionAdvice_407",
																	"TextMarkTextContent": "1.1 ProxyFactory#getInterceptorsAndDynamicInterceptionAdvice"
																}
															]
														}
													]
												},
												{
													"ID": "20230331090740-2twxxvk",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230331090740-2twxxvk",
														"updated": "20230331090740"
													},
													"Children": [
														{
															"ID": "20230331090740-624b1qi",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230331090740-624b1qi",
																"updated": "20230331090740"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "a",
																	"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/119823785#12_CglibMethodInvocationproceed_518",
																	"TextMarkTextContent": "1.2 CglibMethodInvocation#proceed"
																}
															]
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20230331090740-xnze5to",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331090740-xnze5to",
										"updated": "20230331090740"
									},
									"Children": [
										{
											"ID": "20230331090740-6npxq9v",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331090740-6npxq9v",
												"updated": "20230331090740"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/119823785#2_targetInterceptor_571",
													"TextMarkTextContent": "2. targetInterceptor"
												}
											]
										}
									]
								},
								{
									"ID": "20230331090740-ohlbflw",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331090740-ohlbflw",
										"updated": "20230331090740"
									},
									"Children": [
										{
											"ID": "20230331090740-tvzkmgd",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331090740-tvzkmgd",
												"updated": "20230331090740"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/119823785#3_SerializableNoOp_669",
													"TextMarkTextContent": "3. SerializableNoOp"
												}
											]
										}
									]
								},
								{
									"ID": "20230331090740-e9n3jdm",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331090740-e9n3jdm",
										"updated": "20230331090740"
									},
									"Children": [
										{
											"ID": "20230331090740-cxs37wv",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331090740-cxs37wv",
												"updated": "20230331090740"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/119823785#4_StaticDispatcher_677",
													"TextMarkTextContent": "4. StaticDispatcher"
												}
											]
										}
									]
								},
								{
									"ID": "20230331090740-0y3re9r",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331090740-0y3re9r",
										"updated": "20230331090740"
									},
									"Children": [
										{
											"ID": "20230331090740-6kl7kjn",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331090740-6kl7kjn",
												"updated": "20230331090740"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/119823785#5_AdvisedDispatcher_697",
													"TextMarkTextContent": "5. AdvisedDispatcher"
												}
											]
										}
									]
								},
								{
									"ID": "20230331090740-qiloi7t",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331090740-qiloi7t",
										"updated": "20230331090740"
									},
									"Children": [
										{
											"ID": "20230331090740-o0au6b1",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331090740-o0au6b1",
												"updated": "20230331090740"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/119823785#6_EqualsInterceptor_718",
													"TextMarkTextContent": "6. EqualsInterceptor"
												}
											]
										}
									]
								},
								{
									"ID": "20230331090740-k4ep0eo",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331090740-k4ep0eo",
										"updated": "20230331090740"
									},
									"Children": [
										{
											"ID": "20230331090740-4s9ofiw",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331090740-4s9ofiw",
												"updated": "20230331090740"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/119823785#7_HashCodeInterceptor_752",
													"TextMarkTextContent": "7. HashCodeInterceptor"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-g6o6swo",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331090740-g6o6swo",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-ogfzxxx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-ogfzxxx",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/119823785#_771",
									"TextMarkTextContent": "四、总结"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331090740-c1l66m2",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331090740-c1l66m2",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一、前言"
				}
			]
		},
		{
			"ID": "20230331090740-ts1hjuj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-ts1hjuj",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本文是笔者阅读Spring源码的记录文章，由于本人技术水平有限，在文章中难免出现错误，如有发现，感谢各位指正。在阅读过程中也创建了一些衍生文章，衍生文章的意义是因为自己在看源码的过程中，部分知识点并不了解或者对某些知识点产生了兴趣，所以为了更好的阅读源码，所以开设了衍生篇的文章来更好的对这些知识点进行进一步的学习。"
				}
			]
		},
		{
			"ID": "20230331090740-u7i6qsz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-u7i6qsz",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "全集目录："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/106440723",
					"TextMarkTextContent": "Spring源码分析：全集整理"
				}
			]
		},
		{
			"ID": "20230331090740-xmoum1z",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331090740-xmoum1z",
				"updated": "20230331090740"
			}
		},
		{
			"ID": "20230331090740-7m39gn7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-7m39gn7",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本文系列："
				}
			]
		},
		{
			"ID": "20230331090740-vukdfjc",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230331090740-vukdfjc",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"ID": "20230331090740-83q4oc8",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230331090740-83q4oc8",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-ugqp0zu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-ugqp0zu",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/106745317",
									"TextMarkTextContent": "Spring源码分析十一：@Aspect方式的AOP上篇 - @EnableAspectJAutoProxy"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-tt20qiz",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230331090740-tt20qiz",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-ystm8b8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-ystm8b8",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/107070159",
									"TextMarkTextContent": "Spring源码分析十二：@Aspect方式的AOP中篇 - getAdvicesAndAdvisorsForBean"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-3zk30a8",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230331090740-3zk30a8",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-3w3zfaz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-3w3zfaz",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/107164934",
									"TextMarkTextContent": "Spring源码分析十三：@Aspect方式的AOP下篇 - createProxy"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-p7urysm",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230331090740-p7urysm",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-52rvm4g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-52rvm4g",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/119823785",
									"TextMarkTextContent": "Spring源码分析二十四：cglib 的代理过程"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331090740-6xdq2ww",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-6xdq2ww",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本文衍生篇："
				}
			]
		},
		{
			"ID": "20230331090740-53swnz8",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230331090740-53swnz8",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"ID": "20230331090740-bevh3xa",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230331090740-bevh3xa",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-fv24594",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-fv24594",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/105464984",
									"TextMarkTextContent": "Spring 源码分析衍生篇九 ： AOP源码分析 - 基础篇"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-qy7s86x",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230331090740-qy7s86x",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-h8c1z8q",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-h8c1z8q",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/119874208",
									"TextMarkTextContent": "Spring 源码分析衍生篇十二 ：AOP 中的引介增强"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331090740-qty57w1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-qty57w1",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "补充篇："
				}
			]
		},
		{
			"ID": "20230331090740-9a4jt37",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230331090740-9a4jt37",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"ID": "20230331090740-8uu5fa3",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230331090740-8uu5fa3",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-tj8lbkp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-tj8lbkp",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/117568863",
									"TextMarkTextContent": "Spring 源码分析补充篇三 ：Spring Aop 的关键类"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331090740-99jihi4",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331090740-99jihi4",
				"updated": "20230331090740"
			}
		},
		{
			"ID": "20230331090740-sjn9uci",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-sjn9uci",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本文主要内容来分析 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://so.csdn.net/so/search?q=Cglib\u0026spm=1001.2101.3001.7020",
					"TextMarkTextContent": "Cglib"
				},
				{
					"Type": "NodeText",
					"Data": " 的代理创建和调用过程。由于Spring Aop 的部分内容在之前的文章中有所提及，所以这里并不会从头叙述整个 Aop 过程。"
				}
			]
		},
		{
			"ID": "20230331090740-2zh1qlx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-2zh1qlx",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Spring "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://so.csdn.net/so/search?q=Aop\u0026spm=1001.2101.3001.7020",
					"TextMarkTextContent": "Aop"
				},
				{
					"Type": "NodeText",
					"Data": " 中会通过 自动代理创建器来创建代理类 AbstractAutoProxyCreator#createProxy，其中可选的有两种， Jdk 动态代理和 Cglib 动态代理，这里我们来看一下 cglib 动态代理。"
				}
			]
		},
		{
			"ID": "20230331090740-7mzismp",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331090740-7mzismp",
				"updated": "20230331090740"
			}
		},
		{
			"ID": "20230331090740-acrnf3f",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331090740-acrnf3f",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1. org.springframework.cglib.proxy.Callback"
				}
			]
		},
		{
			"ID": "20230331090740-kuk2ptx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-kuk2ptx",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "该部分内容参考： "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong a",
					"TextMarkAHref": "https://blog.csdn.net/NEW_BUGGER/article/details/106350998",
					"TextMarkTextContent": "https://blog.csdn.net/NEW_BUGGER/article/details/106350998"
				}
			]
		},
		{
			"ID": "20230331090740-l2zq8ci",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-l2zq8ci",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "callback可以认为是cglib用于生成字节码的实现手段，cglib一共实现了6种callback，用于对代理类目标进行不同手段的代理，非常灵活，具体如下："
				}
			]
		},
		{
			"ID": "20230331090740-ndtm9gu",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230331090740-ndtm9gu",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"ID": "20230331090740-omvs6i4",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230331090740-omvs6i4",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-6rf1d2z",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-6rf1d2z",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Dispatcher"
								},
								{
									"Type": "NodeText",
									"Data": " ：实现Dispatcher接口，要求实现loadObject方法，返回期望的代理类。值的一提的是，loadobject方法在每次调用被拦截方法的时候都会被调用一次。"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-b3q2cdo",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230331090740-b3q2cdo",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-a13azdm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-a13azdm",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "FixedValue"
								},
								{
									"Type": "NodeText",
									"Data": " ：实现FixedValue接口，该callback同样要求实现一个loadobject方法，只不过需要注意的是该loadobject方法相同与重写了被代理类的相应方法，因为在被代理之后，FixedValue callback只会调用loadobject，而不会再调用代理目标类的相应方法！"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-uqqz21w",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230331090740-uqqz21w",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-8errh18",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-8errh18",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "InvocationHandler"
								},
								{
									"Type": "NodeText",
									"Data": " ：需要实现InvocationHandler接口，实现invoke对象，该拦截传入了proxy对象，用于自定义实现，与MethodInterceptor相似，慎用method的invoke方法。切忌不要造成循环调用"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-9l5zipl",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230331090740-9l5zipl",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-yy1a20l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-yy1a20l",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "LazyLoader"
								},
								{
									"Type": "NodeText",
									"Data": " ：实现LazyLoader的loadObject方法，返回对象实例，该实例只有第一次调用的时候进行初始化，之后不再重新调用，proxy类初始化时进行了成员的赋值，之后使用该成员进行调用父类方法"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-nfse512",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230331090740-nfse512",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-iehazsw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-iehazsw",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "MethodInterceptor"
								},
								{
									"Type": "NodeText",
									"Data": " ：实现MethodInterceptor的intercept，实现被代理对象的逻辑植入。也是最常用的callback"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-13jah89",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20230331090740-13jah89",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-z0ujtrf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-z0ujtrf",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "NoOp"
								},
								{
									"Type": "NodeText",
									"Data": " ：通过接口声明了一个单例对象，该代理不对被代理类执行任何操作"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331090740-yj07msl",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331090740-yj07msl",
				"updated": "20230331090740"
			}
		},
		{
			"ID": "20230331090740-lckppoi",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331090740-lckppoi",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二、代理对象的创建"
				}
			]
		},
		{
			"ID": "20230331090740-yh6hzdt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-yh6hzdt",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Spring Aop 的代理对象创建在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CglibAopProxy#getProxy(java.lang.ClassLoader)"
				},
				{
					"Type": "NodeText",
					"Data": "​ 中完成。其实现如下："
				}
			]
		},
		{
			"ID": "20230331090740-amof409",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331090740-amof409",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\t@Override\n\tpublic Object getProxy(@Nullable ClassLoader classLoader) { \n\t\ttry { \n\t\t\tClass\u003c?\u003e rootClass = this.advised.getTargetClass();\n\t\t\tAssert.state(rootClass != null, \"Target class must be available for creating a CGLIB proxy\");\n\n\t\t\tClass\u003c?\u003e proxySuperClass = rootClass;\n\t\t\t// 如果当前类名中包含 “$$” 则被认定为是 cglib 类。\n\t\t\tif (rootClass.getName().contains(ClassUtils.CGLIB_CLASS_SEPARATOR)) { \n\t\t\t\tproxySuperClass = rootClass.getSuperclass();\n\t\t\t\tClass\u003c?\u003e[] additionalInterfaces = rootClass.getInterfaces();\n\t\t\t\tfor (Class\u003c?\u003e additionalInterface : additionalInterfaces) { \n\t\t\t\t\tthis.advised.addInterface(additionalInterface);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Validate the class, writing log messages as necessary.\n\t\t\t// 校验方法的合法性，但仅仅打印了日志\n\t\t\tvalidateClassIfNecessary(proxySuperClass, classLoader);\n\n\t\t\t// Configure CGLIB Enhancer...\n\t\t\t// 配置 Enhancer\n\t\t\tEnhancer enhancer = createEnhancer();\n\t\t\tif (classLoader != null) { \n\t\t\t\tenhancer.setClassLoader(classLoader);\n\t\t\t\tif (classLoader instanceof SmartClassLoader \u0026\u0026\n\t\t\t\t\t\t((SmartClassLoader) classLoader).isClassReloadable(proxySuperClass)) { \n\t\t\t\t\tenhancer.setUseCache(false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tenhancer.setSuperclass(proxySuperClass);\n\t\t\tenhancer.setInterfaces(AopProxyUtils.completeProxiedInterfaces(this.advised));\n\t\t\tenhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);\n\t\t\tenhancer.setStrategy(new ClassLoaderAwareGeneratorStrategy(classLoader));\n\t\t\t// 1. 获取代理的回调方法集合\n\t\t\tCallback[] callbacks = getCallbacks(rootClass);\n\t\t\tClass\u003c?\u003e[] types = new Class\u003c?\u003e[callbacks.length];\n\t\t\tfor (int x = 0; x \u003c types.length; x++) { \n\t\t\t\ttypes[x] = callbacks[x].getClass();\n\t\t\t}\n\t\t\t// fixedInterceptorMap only populated at this point, after getCallbacks call above\n\t\t\t// 2. 添加 Callback 过滤器。\n\t\t\tenhancer.setCallbackFilter(new ProxyCallbackFilter(\n\t\t\t\t\tthis.advised.getConfigurationOnlyCopy(), this.fixedInterceptorMap, this.fixedInterceptorOffset));\n\t\t\tenhancer.setCallbackTypes(types);\n\n\t\t\t// Generate the proxy class and create a proxy instance.\n\t\t\t// 创建代理对象\n\t\t\treturn createProxyClassAndInstance(enhancer, callbacks);\n\t\t}\n\t\t...\n\t}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331090740-7yp1mb9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-7yp1mb9",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里我们知道 CglibAopProxy#getCallbacks 会返回一个Callback集合，而 Cglib 的代理对象是通过 ProxyCallbackFilter 中的策略来确定什么场景下使用不同的 Callback。"
				}
			]
		},
		{
			"ID": "20230331090740-n2fg03r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-n2fg03r",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因此下面我们来看一下这两个类的具体实现："
				}
			]
		},
		{
			"ID": "20230331090740-x0gn3c9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331090740-x0gn3c9",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1. CglibAopProxy#getCallbacks"
				}
			]
		},
		{
			"ID": "20230331090740-9l34f7k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-9l34f7k",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "CglibAopProxy#getCallbacks 是生成代理类的 Callback。具体实现如下："
				}
			]
		},
		{
			"ID": "20230331090740-1tucreq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331090740-1tucreq",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\t// 上面可以很明显知道，CallBack是代理增强的关键实现。\n\tprivate Callback[] getCallbacks(Class\u003c?\u003e rootClass) throws Exception { \n\t\t// Parameters used for optimization choices...\n\t\t// 是否暴露代理类\n\t\tboolean exposeProxy = this.advised.isExposeProxy();\n\t\t// 是否被冻结\n\t\tboolean isFrozen = this.advised.isFrozen();\n\t\t// 是否静态类，这里的静态并非指静态类，而是每次调用返回的实例都是否是不可变的\n\t\t// 如单例模式的bean就是静态，而多例模式下的bean就不是静态\n\t\tboolean isStatic = this.advised.getTargetSource().isStatic();\n\n\t\t// Choose an \"aop\" interceptor (used for AOP calls).\n\t\t// 创建 Aop 拦截器\n\t\tCallback aopInterceptor = new DynamicAdvisedInterceptor(this.advised);\n\n\t\t// Choose a \"straight to target\" interceptor. (used for calls that are\n\t\t// unadvised but can return this). May be required to expose the proxy.\n\t\tCallback targetInterceptor;\n\t\t// 根据是否包括和 静态，来生成不同的拦截器\n\t\tif (exposeProxy) { \n\t\t\ttargetInterceptor = (isStatic ?\n\t\t\t\t\tnew StaticUnadvisedExposedInterceptor(this.advised.getTargetSource().getTarget()) :\n\t\t\t\t\tnew DynamicUnadvisedExposedInterceptor(this.advised.getTargetSource()));\n\t\t}\n\t\telse { \n\t\t\ttargetInterceptor = (isStatic ?\n\t\t\t\t\tnew StaticUnadvisedInterceptor(this.advised.getTargetSource().getTarget()) :\n\t\t\t\t\tnew DynamicUnadvisedInterceptor(this.advised.getTargetSource()));\n\t\t}\n\n\t\t// Choose a \"direct to target\" dispatcher (used for\n\t\t// unadvised calls to static targets that cannot return this).\n\t\tCallback targetDispatcher = (isStatic ?\n\t\t\t\tnew StaticDispatcher(this.advised.getTargetSource().getTarget()) : new SerializableNoOp());\n\t\t// 回调集合。其中包含aopInterceptor 中包含了 Aspect 的增强\n\t\t//  advisedDispatcher 用于判断如果method是Advised.class声明的，则使用AdvisedDispatcher进行分发\n\t\tCallback[] mainCallbacks = new Callback[] { \n\t\t\t\taopInterceptor,  // for normal advice\n\t\t\t\ttargetInterceptor,  // invoke target without considering advice, if optimized\n\t\t\t\tnew SerializableNoOp(),  // no override for methods mapped to this\n\t\t\t\ttargetDispatcher, this.advisedDispatcher,\n\t\t\t\tnew EqualsInterceptor(this.advised),\n\t\t\t\tnew HashCodeInterceptor(this.advised)\n\t\t};\n\n\t\tCallback[] callbacks;\n\t\t// 如果类是静态 \u0026\u0026 配置冻结。则准备做一些优化策略\n\t\tif (isStatic \u0026\u0026 isFrozen) { \n\t\t\tMethod[] methods = rootClass.getMethods();\n\t\t\tCallback[] fixedCallbacks = new Callback[methods.length];\n\t\t\tthis.fixedInterceptorMap = new HashMap\u003c\u003e(methods.length);\n\n\t\t\t// TODO: small memory optimization here (can skip creation for methods with no advice)\n\t\t\t// 遍历所有的方法\n\t\t\tfor (int x = 0; x \u003c methods.length; x++) { \n\t\t\t\tMethod method = methods[x];\n\t\t\t\t// 获取适用于当前方法的拦截器和动态拦截建议\n\t\t\t\tList\u003cObject\u003e chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, rootClass);\n\t\t\t\t// 封装成  callback\n\t\t\t\tfixedCallbacks[x] = new FixedChainStaticTargetInterceptor(\n\t\t\t\t\t\tchain, this.advised.getTargetSource().getTarget(), this.advised.getTargetClass());\n\t\t\t\t// 保存，此时的key 为 method， value 为当前方法适用的增强。\n\t\t\t\tthis.fixedInterceptorMap.put(method, x);\n\t\t\t}\n\n\t\t\t// Now copy both the callbacks from mainCallbacks\n\t\t\t// and fixedCallbacks into the callbacks array.\n\t\t\tcallbacks = new Callback[mainCallbacks.length + fixedCallbacks.length];\n\t\t\tSystem.arraycopy(mainCallbacks, 0, callbacks, 0, mainCallbacks.length);\n\t\t\tSystem.arraycopy(fixedCallbacks, 0, callbacks, mainCallbacks.length, fixedCallbacks.length);\n\t\t\tthis.fixedInterceptorOffset = mainCallbacks.length;\n\t\t}\n\t\telse { \n\t\t\tcallbacks = mainCallbacks;\n\t\t}\n\t\treturn callbacks;\n\t}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331090740-sayjkfa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-sayjkfa",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里我们注意 Callback数组的组成：Callback数组是由 mainCallbacks + fixedInterceptorMap 组成。"
				}
			]
		},
		{
			"ID": "20230331090740-lzb2cxs",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230331090740-lzb2cxs",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"ID": "20230331090740-cag9me2",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230331090740-cag9me2",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-dt8uh95",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-dt8uh95",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "mainCallbacks 数组如下，为固定的七个。具体我们后面分析。"
								}
							]
						},
						{
							"ID": "20230331090740-lgjeuon",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230331090740-lgjeuon",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "\t\tCallback[] mainCallbacks = new Callback[] { \n\t\t\t\taopInterceptor,  // for normal advice\n\t\t\t\ttargetInterceptor,  // invoke target without considering advice, if optimized\n\t\t\t\tnew SerializableNoOp(),  // no override for methods mapped to this\n\t\t\t\ttargetDispatcher, this.advisedDispatcher,\n\t\t\t\tnew EqualsInterceptor(this.advised),\n\t\t\t\tnew HashCodeInterceptor(this.advised)\n\t\t};\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-s8zwuyu",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230331090740-s8zwuyu",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-yubbedm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-yubbedm",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "fixedInterceptorMap 是 Spring 在静态类 和 配置冻结情况下所做的优化。当类是静态类则表示当前类单例 \u0026\u0026 配置冻结则表示配置不会变动。那么此时方法的拦截器可以提前获取并保存到 FixedChainStaticTargetInterceptor 中。ProxyCallbackFilter 中判断如果method 在 fixedInterceptorMap 中存在，则可以直接从 fixedInterceptorMap 中获取到适用于该方法的增强，而不需要再次查找。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331090740-3comrsf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-3comrsf",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "注"
				},
				{
					"Type": "NodeText",
					"Data": "​： 这里的所说的静态是 根据 TargetSource#isStatic 方法判断，标志用户返回当前bean是否为静态的，比如常见的单例bean就是静态的，而原型模式下就是动态的。这里这个方法的主要作用是，对于静态的bean，spring是会对其进行缓存的，在多次使用TargetSource获取目标bean对象的时候，其获取的总是同一个对象，通过这种方式提高效率。"
				}
			]
		},
		{
			"ID": "20230331090740-fcw1s67",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331090740-fcw1s67",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2. ProxyCallbackFilter"
				}
			]
		},
		{
			"ID": "20230331090740-czxyi66",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-czxyi66",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ProxyCallbackFilter 是 CglibAopProxy 的内部类，用来作为 Cglib CallBack 过滤器，在不同的场景下选择不同的 Callback执行增强策略。下面我们来看看 ProxyCallbackFilter#accept 的具体实现 ："
				}
			]
		},
		{
			"ID": "20230331090740-co2gukr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331090740-co2gukr",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\n\t// Constants for CGLIB callback array indices\n\t// 这里是 Callback 数组的下标。\n\tprivate static final int AOP_PROXY = 0;\n\tprivate static final int INVOKE_TARGET = 1;\n\tprivate static final int NO_OVERRIDE = 2;\n\tprivate static final int DISPATCH_TARGET = 3;\n\tprivate static final int DISPATCH_ADVISED = 4;\n\tprivate static final int INVOKE_EQUALS = 5;\n\tprivate static final int INVOKE_HASHCODE = 6;\n\n\tprivate static class ProxyCallbackFilter implements CallbackFilter { \n\t\t// 返回是 Callback 数组的下标\n\t\t@Override\n\t\tpublic int accept(Method method) { \n\t\t\t// 1. 如果当前方法被 final 修饰，则不代理该方法\n\t\t\tif (AopUtils.isFinalizeMethod(method)) { \n\t\t\t\tlogger.trace(\"Found finalize() method - using NO_OVERRIDE\");\n\t\t\t\treturn NO_OVERRIDE;\n\t\t\t}\n\t\t\t// 2. 如果当前方法不透明 \u0026\u0026 该方法是 Advised 接口声明的方法\n\t\t\tif (!this.advised.isOpaque() \u0026\u0026 method.getDeclaringClass().isInterface() \u0026\u0026\n\t\t\t\t\tmethod.getDeclaringClass().isAssignableFrom(Advised.class)) { \n\t\t\t\treturn DISPATCH_ADVISED;\n\t\t\t}\n\t\t\t// We must always proxy equals, to direct calls to this.\n\t\t\t// 3. equals 方法 \n\t\t\tif (AopUtils.isEqualsMethod(method)) { \n\t\t\t\treturn INVOKE_EQUALS;\n\t\t\t}\n\t\t\t// We must always calculate hashCode based on the proxy.\n\t\t\t// 4. hashcode 方法\n\t\t\tif (AopUtils.isHashCodeMethod(method)) { \n\t\t\t\treturn INVOKE_HASHCODE;\n\t\t\t}\n\t\t\t// 获取代理目标类的 Class\n\t\t\tClass\u003c?\u003e targetClass = this.advised.getTargetClass();\n\t\t\t// Proxy is not yet available, but that shouldn't matter.\n\t\t\t// 获取适用于当前类的 拦截器和动态拦截建议\n\t\t\tList\u003c?\u003e chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);\n\t\t\tboolean haveAdvice = !chain.isEmpty();\n\t\t\tboolean exposeProxy = this.advised.isExposeProxy();\n\t\t\tboolean isStatic = this.advised.getTargetSource().isStatic();\n\t\t\tboolean isFrozen = this.advised.isFrozen();\n\t\t\t// 5. 如果存在适用于当前类的拦截器和建议 || 配置没有被冻结\n\t\t\tif (haveAdvice || !isFrozen) { \n\t\t\t\t// If exposing the proxy, then AOP_PROXY must be used.\n\t\t\t\t// 5.1 暴露代理类\n\t\t\t\tif (exposeProxy) { \n\t\t\t\t\treturn AOP_PROXY;\n\t\t\t\t}\n\t\t\t\t// 5.2 类为静态 \u0026\u0026 配置冻结 \u0026\u0026 固定拦截器中保存了该方法的配置\n\t\t\t\t// 检查是否有固定的拦截器来服务这个方法, 这里使用了 fixedInterceptorMap 做了一些优化\n\t\t\t\t// fixedInterceptorMap  key 为 Method， value 为 Integer 保存了拦截器下标。这里针对某些方法固定使用某个拦截器，不需要再动态匹配。\n\t\t\t\tif (isStatic \u0026\u0026 isFrozen \u0026\u0026 this.fixedInterceptorMap.containsKey(method)) { \n\t\t\t\t\tint index = this.fixedInterceptorMap.get(method);\n\t\t\t\t\treturn (index + this.fixedInterceptorOffset);\n\t\t\t\t}\n\t\t\t\telse { \n\t\t\t\t\t// 5.3 否则还是使用 AOP_PROXY\n\t\t\t\t\treturn AOP_PROXY;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse { // 6. 到这里说明当前方法没有建议 \u0026\u0026 配置冻结\n\t\t\n\t\t\t\t// 6.1. 暴露当前代理类 \u0026\u0026 代理类不是静态\n\t\t\t\tif (exposeProxy || !isStatic) { \n\t\t\t\t\treturn INVOKE_TARGET;\n\t\t\t\t}\n\t\t\t\t// 6.2. 如果方法返回类型还是代理类类型\n\t\t\t\tClass\u003c?\u003e returnType = method.getReturnType();\n\t\t\t\tif (targetClass != null \u0026\u0026 returnType.isAssignableFrom(targetClass)) { \n\t\t\t\t\treturn INVOKE_TARGET;\n\t\t\t\t}\n\t\t\t\telse { \n\t\t\t\t\t// 6.3 DISPATCH_TARGET\n\t\t\t\t\treturn DISPATCH_TARGET;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t...\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331090740-e1r10mq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-e1r10mq",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里总结如下："
				}
			]
		},
		{
			"ID": "20230331090740-1lin4ce",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230331090740-1lin4ce",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"ID": "20230331090740-mggtm4i",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230331090740-mggtm4i",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-arypycj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-arypycj",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果method 被 final 修饰，则无法代理，返回 2 ，执行 SerializableNoOp，即代理不会做任何事。"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-pxgfxdi",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230331090740-pxgfxdi",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-c14wmwg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-c14wmwg",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果 method 是 Advised 接口声明的方法，返回 4。执行AdvisedDispatcher"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-na35lg3",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230331090740-na35lg3",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-me5wa8w",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-me5wa8w",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果 method 是 equals 方法，返回 5， 执行 EqualsInterceptor"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-2gplpwy",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230331090740-2gplpwy",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-9h5f71w",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-9h5f71w",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果 method 是 hashCode 方法，返回 6，执行 HashCodeInterceptor"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-1harvol",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230331090740-1harvol",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-mvr8ct9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-mvr8ct9",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果存在当前方法的拦截器或动态建议 || 配置未冻结 ："
								}
							]
						},
						{
							"ID": "20230331090740-fhch2b6",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20230331090740-fhch2b6",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"ID": "20230331090740-71niv62",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20230331090740-71niv62",
										"updated": "20230331090740"
									},
									"Children": [
										{
											"ID": "20230331090740-ghznws7",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331090740-ghznws7",
												"updated": "20230331090740"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果需要暴露代理对象，返回 0。执行 DynamicAdvisedInterceptor。这是常规的逻辑"
												}
											]
										}
									]
								},
								{
									"ID": "20230331090740-qz0j2po",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20230331090740-qz0j2po",
										"updated": "20230331090740"
									},
									"Children": [
										{
											"ID": "20230331090740-8jm9rbv",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331090740-8jm9rbv",
												"updated": "20230331090740"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果 类静态 \u0026\u0026 配置冻结 \u0026\u0026 fixedInterceptorMap 中缓存了该方法，则使用 fixedInterceptorMap 中的 Callback，返回计算出来的下标。执行的是在 CglibAopProxy#getCallbacks中包装的 FixedChainStaticTargetInterceptor 类型"
												}
											]
										}
									]
								},
								{
									"ID": "20230331090740-mi7zjmk",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "My4=",
										"Num": 3
									},
									"Properties": {
										"id": "20230331090740-mi7zjmk",
										"updated": "20230331090740"
									},
									"Children": [
										{
											"ID": "20230331090740-koitu6t",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331090740-koitu6t",
												"updated": "20230331090740"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "不满足5.2 的情况执行返回0。执行 DynamicAdvisedInterceptor。这是常规的逻辑"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-i01rppu",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20230331090740-i01rppu",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-pet4gt2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-pet4gt2",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果不存在当前方法的拦截器或动态建议 \u0026\u0026 配置已经冻结 ："
								}
							]
						},
						{
							"ID": "20230331090740-4ivgptr",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20230331090740-4ivgptr",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"ID": "20230331090740-vl9btc9",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20230331090740-vl9btc9",
										"updated": "20230331090740"
									},
									"Children": [
										{
											"ID": "20230331090740-h6bd4g8",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331090740-h6bd4g8",
												"updated": "20230331090740"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果需要暴露代理对象 || 对象非静态 ，返回1。这里根据情况的不同可以为StaticUnadvisedExposedInterceptor、DynamicUnadvisedExposedInterceptor、StaticUnadvisedInterceptor、DynamicUnadvisedInterceptor，本质上没有多少区别，主要是对 exposeProxy 属性的处理"
												}
											]
										}
									]
								},
								{
									"ID": "20230331090740-na8fqsk",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20230331090740-na8fqsk",
										"updated": "20230331090740"
									},
									"Children": [
										{
											"ID": "20230331090740-t7121hk",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331090740-t7121hk",
												"updated": "20230331090740"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果代理对象类型派生于 方法返回类型，返回 1。同上"
												}
											]
										}
									]
								},
								{
									"ID": "20230331090740-x2ohs8e",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "My4=",
										"Num": 3
									},
									"Properties": {
										"id": "20230331090740-x2ohs8e",
										"updated": "20230331090740"
									},
									"Children": [
										{
											"ID": "20230331090740-9w8kzty",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331090740-9w8kzty",
												"updated": "20230331090740"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "不满足6.2 返回 3。如果是静态类执行 StaticDispatcher， 否则执行 SerializableNoOp。"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331090740-cbagt8w",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331090740-cbagt8w",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "三、Cglib 的拦截器"
				}
			]
		},
		{
			"ID": "20230331090740-893sq4b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-893sq4b",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面我们看到 Cglib 默认的 mainCallbacks 如下："
				}
			]
		},
		{
			"ID": "20230331090740-l1wnykp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331090740-l1wnykp",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\t\tCallback[] mainCallbacks = new Callback[] { \n\t\t\t\taopInterceptor,  // for normal advice\n\t\t\t\ttargetInterceptor,  // invoke target without considering advice, if optimized\n\t\t\t\tnew SerializableNoOp(),  // no override for methods mapped to this\n\t\t\t\ttargetDispatcher, this.advisedDispatcher,\n\t\t\t\tnew EqualsInterceptor(this.advised),\n\t\t\t\tnew HashCodeInterceptor(this.advised)\n\t\t};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331090740-6a87p2o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-6a87p2o",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下面我们逐一来看："
				}
			]
		},
		{
			"ID": "20230331090740-pylgrot",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331090740-pylgrot",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1. aopInterceptor"
				}
			]
		},
		{
			"ID": "20230331090740-f0l5y5c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-f0l5y5c",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "aopInterceptor 的实现类是 DynamicAdvisedInterceptor，实现了MethodInterceptor 接口 用来处理常规的代理逻辑。结构如下：\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/7742c967d8304a9d988da278430d56cf-20230331090740-0o3nd5g.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230331090740-sqzfd3f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-sqzfd3f",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们直接来看看 DynamicAdvisedInterceptor#intercept 的具体实现，如下："
				}
			]
		},
		{
			"ID": "20230331090740-1cugcfm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331090740-1cugcfm",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\t@Override\n\t@Nullable\n\tpublic Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable { \n\t\tObject oldProxy = null;\n\t\tboolean setProxyContext = false;\n\t\tObject target = null;\n\t\t// 获取目标数据\n\t\tTargetSource targetSource = this.advised.getTargetSource();\n\t\ttry { \n\t\t\t// 如果暴露代理对象，则设置到全局上下文中\n\t\t\tif (this.advised.exposeProxy) { \n\t\t\t\t// Make invocation available if necessary.\n\t\t\t\toldProxy = AopContext.setCurrentProxy(proxy);\n\t\t\t\tsetProxyContext = true;\n\t\t\t}\n\t\t\t// Get as late as possible to minimize the time we \"own\" the target, in case it comes from a pool...\n\t\t\t// 获取目标对象\n\t\t\ttarget = targetSource.getTarget();\n\t\t\tClass\u003c?\u003e targetClass = (target != null ? target.getClass() : null);\n\t\t\t// 1. 获取 适用于当前类的当前方法的 获取拦截器和动态拦截建议\n\t\t\tList\u003cObject\u003e chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);\n\t\t\tObject retVal;\n\t\t\t// 如果没有建议链则说明对该方法不需要增强，直接调用即可\n\t\t\tif (chain.isEmpty() \u0026\u0026 Modifier.isPublic(method.getModifiers())) { \n\t\t\t\t// 即当前 args 的参数类型可能与实际方法调用的类型有些区别，这里转换成实际方法的参数类型。特别是，如果给定的可变参数数组与方法中声明的可变参数的数组类型不匹配。\n\t\t\t\tObject[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);\n\t\t\t\t// 调用目标类的目标方法\n\t\t\t\tretVal = methodProxy.invoke(target, argsToUse);\n\t\t\t}\n\t\t\telse { \n\t\t\t\t// We need to create a method invocation...\n\t\t\t\t// 2. 创建一个 方法调用类，里面封装了相关信息，然后通过 proceed 方法调用\n\t\t\t\tretVal = new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed();\n\t\t\t}\n\t\t\t// 处理返回值。 即，如果返回值还是 target。则替换为 代理的proxy\n\t\t\tretVal = processReturnType(proxy, target, method, retVal);\n\t\t\treturn retVal;\n\t\t}\n\t\tfinally { \n\t\t\tif (target != null \u0026\u0026 !targetSource.isStatic()) { \n\t\t\t\ttargetSource.releaseTarget(target);\n\t\t\t}\n\t\t\tif (setProxyContext) { \n\t\t\t\t// Restore old proxy.\n\t\t\t\tAopContext.setCurrentProxy(oldProxy);\n\t\t\t}\n\t\t}\n\t}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331090740-wfnwnui",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-wfnwnui",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注释已经写的比较清楚，这里我们关注下面两点："
				}
			]
		},
		{
			"ID": "20230331090740-746ov37",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230331090740-746ov37",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"ID": "20230331090740-wwoj4lt",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230331090740-wwoj4lt",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-hgeuxyj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-hgeuxyj",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass)"
								},
								{
									"Type": "NodeText",
									"Data": "​ ： 这里的 this.advised 实现是 ProxyFactory"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-ogzg16n",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230331090740-ogzg16n",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-xvvl9l2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-xvvl9l2",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed()"
								},
								{
									"Type": "NodeText",
									"Data": "​ ：这里的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "CglibMethodInvocation#proceed"
								},
								{
									"Type": "NodeText",
									"Data": "​ 方法完成了拦截器链的调用。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331090740-1y4buwt",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331090740-1y4buwt",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.1 ProxyFactory#getInterceptorsAndDynamicInterceptionAdvice"
				}
			]
		},
		{
			"ID": "20230331090740-0o357ri",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-0o357ri",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ProxyFactory#getInterceptorsAndDynamicInterceptionAdvice"
				},
				{
					"Type": "NodeText",
					"Data": "​ 是获取当前方法的 拦截器和动态拦截建议，在上面也多次调用。其实现在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AdvisedSupport#getInterceptorsAndDynamicInterceptionAdvice"
				},
				{
					"Type": "NodeText",
					"Data": "​ 中，如下："
				}
			]
		},
		{
			"ID": "20230331090740-2bqz8bn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331090740-2bqz8bn",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\t// \t// 当前 this 为 ProxyFactory，所以这里的缓存是作用域是在 ProxyFactory中，如果换一个 ProxyFactory则需要重新加载一次。\n\tpublic List\u003cObject\u003e getInterceptorsAndDynamicInterceptionAdvice(Method method, @Nullable Class\u003c?\u003e targetClass) { \n\t\t// 生成方法的key\n\t\tMethodCacheKey cacheKey = new MethodCacheKey(method);\n\t\t// 从缓存中获取该方法的 拦截器和动态拦截建议\n\t\tList\u003cObject\u003e cached = this.methodCache.get(cacheKey);\n\t\tif (cached == null) { \n\t\t\t// 缓存没有命中则重新获取\n\t\t\tcached = this.advisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice(\n\t\t\t\t\tthis, method, targetClass);\n\t\t\t// 将获取到的 拦截器和动态拦截建议 放入缓存中。\n\t\t\tthis.methodCache.put(cacheKey, cached);\n\t\t}\n\t\treturn cached;\n\t}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331090740-gn72dxt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-gn72dxt",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "this.advisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice"
				},
				{
					"Type": "NodeText",
					"Data": "​ 调用的是\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "DefaultAdvisorChainFactory#getInterceptorsAndDynamicInterceptionAdvice"
				},
				{
					"Type": "NodeText",
					"Data": "​，其实现如下："
				}
			]
		},
		{
			"ID": "20230331090740-i3k01r8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331090740-i3k01r8",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\t@Override\n\tpublic List\u003cObject\u003e getInterceptorsAndDynamicInterceptionAdvice(\n\t\t\tAdvised config, Method method, @Nullable Class\u003c?\u003e targetClass) { \n\n\t\tAdvisorAdapterRegistry registry = GlobalAdvisorAdapterRegistry.getInstance();\n\t\tAdvisor[] advisors = config.getAdvisors();\n\t\tList\u003cObject\u003e interceptorList = new ArrayList\u003c\u003e(advisors.length);\n\t\tClass\u003c?\u003e actualClass = (targetClass != null ? targetClass : method.getDeclaringClass());\n\t\tBoolean hasIntroductions = null;\n\t\t// 遍历所有的 Advisor，这里的 Advisor 是 ProxyFactory 中保存的\n\t\tfor (Advisor advisor : advisors) { \n\t\t\t/******* 1. PointcutAdvisor 顾问类型的处理 *******/\n\t\t\t// 如果是切点顾问\n\t\t\tif (advisor instanceof PointcutAdvisor) { \n\t\t\t\t// Add it conditionally.\n\t\t\t\tPointcutAdvisor pointcutAdvisor = (PointcutAdvisor) advisor;\n\t\t\t\t// 如果经过 预过滤 || 当前顾问 匹配当前类\n\t\t\t\tif (config.isPreFiltered() || pointcutAdvisor.getPointcut().getClassFilter().matches(actualClass)) { \n\t\t\t\t\t// 判断当前方法是否匹配\n\t\t\t\t\tMethodMatcher mm = pointcutAdvisor.getPointcut().getMethodMatcher();\n\t\t\t\t\tboolean match;\n\t\t\t\t\tif (mm instanceof IntroductionAwareMethodMatcher) { \n\t\t\t\t\t\tif (hasIntroductions == null) { \n\t\t\t\t\t\t\thasIntroductions = hasMatchingIntroductions(advisors, actualClass);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = ((IntroductionAwareMethodMatcher) mm).matches(method, actualClass, hasIntroductions);\n\t\t\t\t\t}\n\t\t\t\t\telse { \n\t\t\t\t\t\tmatch = mm.matches(method, actualClass);\n\t\t\t\t\t}\n\t\t\t\t\t// 如果方法也匹配，则认为当前顾问适用于当前方法\n\t\t\t\t\tif (match) { \n\t\t\t\t\t\t// 获取顾问中的 方法拦截器。这里会将部分不合适的类型转换为合适的拦截器\n\t\t\t\t\t\tMethodInterceptor[] interceptors = registry.getInterceptors(advisor);\n\t\t\t\t\t\t// runtime 为 true， 表明是动态调用，即每次调用都需要执行一次判断。\n\t\t\t\t\t\tif (mm.isRuntime()) { \n\t\t\t\t\t\t\t// 动态调用将 拦截器包装成 InterceptorAndDynamicMethodMatcher\n\t\t\t\t\t\t\tfor (MethodInterceptor interceptor : interceptors) { \n\t\t\t\t\t\t\t\tinterceptorList.add(new InterceptorAndDynamicMethodMatcher(interceptor, mm));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse { \n\t\t\t\t\t\t\t// 否则直接添加\n\t\t\t\t\t\t\tinterceptorList.addAll(Arrays.asList(interceptors));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (advisor instanceof IntroductionAdvisor) { \n\t\t\t\t/******* 2. IntroductionAdvisor 顾问类型的处理 *******/\n\t\t\t\t// 如果是引介顾问类型\n\t\t\t\tIntroductionAdvisor ia = (IntroductionAdvisor) advisor;\n\t\t\t\t// 预过滤 || 调用类匹配\n\t\t\t\tif (config.isPreFiltered() || ia.getClassFilter().matches(actualClass)) { \n\t\t\t\t\t// 直接添加\n\t\t\t\t\tInterceptor[] interceptors = registry.getInterceptors(advisor);\n\t\t\t\t\tinterceptorList.addAll(Arrays.asList(interceptors));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse { \n\t\t\t\t/******* 3. 其他顾问类型的处理 *******/\n\t\t\t\t// 直接添加\n\t\t\t\tInterceptor[] interceptors = registry.getInterceptors(advisor);\n\t\t\t\tinterceptorList.addAll(Arrays.asList(interceptors));\n\t\t\t}\n\t\t}\n\t\t// 返回拦截器集合\n\t\treturn interceptorList;\n\t}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331090740-kaxgg0y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-kaxgg0y",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面的逻辑还是比较清楚，如下："
				}
			]
		},
		{
			"ID": "20230331090740-981078c",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230331090740-981078c",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"ID": "20230331090740-46ueyfc",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230331090740-46ueyfc",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-3d0oj3y",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-3d0oj3y",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "遍历 当前 ProxyFactory 中所有的顾问 Advisor 集合。这个Advisor 集合来自于 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "AbstractAutoProxyCreator#createProxy"
								},
								{
									"Type": "NodeText",
									"Data": "​ 中的设值。"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-3hymjzf",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230331090740-3hymjzf",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-er2afle",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-er2afle",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "下面会根据 Advisor 的类型分开匹配："
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-1h8b7vu",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230331090740-1h8b7vu",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-io02mod",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-io02mod",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对于 PointcutAdvisor 类型顾问，则需要匹配调用类和调用方法。"
								}
							]
						},
						{
							"ID": "20230331090740-30f93ja",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20230331090740-30f93ja",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"ID": "20230331090740-797iplq",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20230331090740-797iplq",
										"updated": "20230331090740"
									},
									"Children": [
										{
											"ID": "20230331090740-lphmpmn",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331090740-lphmpmn",
												"updated": "20230331090740"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "进行类和方法的匹配，如果都匹配则认为 Advisor 适用于当前方法。"
												}
											]
										}
									]
								},
								{
									"ID": "20230331090740-eovndow",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20230331090740-eovndow",
										"updated": "20230331090740"
									},
									"Children": [
										{
											"ID": "20230331090740-9ie6agq",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331090740-9ie6agq",
												"updated": "20230331090740"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "随后通过 runtime 参数判断了当前拦截器是否是动态拦截器。"
												}
											]
										}
									]
								},
								{
									"ID": "20230331090740-mfswffo",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "My4=",
										"Num": 3
									},
									"Properties": {
										"id": "20230331090740-mfswffo",
										"updated": "20230331090740"
									},
									"Children": [
										{
											"ID": "20230331090740-pbrwnab",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331090740-pbrwnab",
												"updated": "20230331090740"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果是动态拦截器则封装成 InterceptorAndDynamicMethodMatcher类型保存到集合中。所谓的动态拦截器，即每次调用时都会判断一次是否可以执行增强。"
												}
											]
										}
									]
								},
								{
									"ID": "20230331090740-2zm2hsx",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "NC4=",
										"Num": 4
									},
									"Properties": {
										"id": "20230331090740-2zm2hsx",
										"updated": "20230331090740"
									},
									"Children": [
										{
											"ID": "20230331090740-50rq0h1",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331090740-50rq0h1",
												"updated": "20230331090740"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果不是动态拦截器则直接添加到 拦截器集合中，随后将拦截器集合返回。"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-elkm3pv",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230331090740-elkm3pv",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-diq5c8j",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-diq5c8j",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对于 IntroductionAdvisor 类型顾问，该类型是引介顾问，并不会精确到方法级别，所以对调用类进行校验，如果匹配则认为适用。"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-z2p0t9o",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230331090740-z2p0t9o",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-6dbksqv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-6dbksqv",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对于 IntroductionAdvisor 类型顾问，直接添加。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331090740-57ppq2w",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331090740-57ppq2w",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.2 CglibMethodInvocation#proceed"
				}
			]
		},
		{
			"ID": "20230331090740-86xh87y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-86xh87y",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "CglibMethodInvocation#proceed 调用其父类方法 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ReflectiveMethodInvocation#proceed"
				},
				{
					"Type": "NodeText",
					"Data": "​，作用为 执行了过滤器链流程，其实现如下："
				}
			]
		},
		{
			"ID": "20230331090740-eirx35a",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331090740-eirx35a",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\t@Override\n\t@Nullable\n\tpublic Object proceed() throws Throwable { \n\t\t// We start with an index of -1 and increment early.\n\t\t// 如果所有拦截器执行结束，调用真正的方法\n\t\tif (this.currentInterceptorIndex == this.interceptorsAndDynamicMethodMatchers.size() - 1) { \n\t\t\treturn invokeJoinpoint();\n\t\t}\n\t\t// 获取下一个拦截器\n\t\tObject interceptorOrInterceptionAdvice =\n\t\t\t\tthis.interceptorsAndDynamicMethodMatchers.get(++this.currentInterceptorIndex);\n\t\t// 如果是动态拦截器\n\t\tif (interceptorOrInterceptionAdvice instanceof InterceptorAndDynamicMethodMatcher) { \n\t\t\t// Evaluate dynamic method matcher here: static part will already have\n\t\t\t// been evaluated and found to match.\n\t\t\tInterceptorAndDynamicMethodMatcher dm =\n\t\t\t\t\t(InterceptorAndDynamicMethodMatcher) interceptorOrInterceptionAdvice;\n\t\t\tClass\u003c?\u003e targetClass = (this.targetClass != null ? this.targetClass : this.method.getDeclaringClass());\n\t\t\t// 判断调用是否匹配，如果匹配则调用拦截器方法\n\t\t\tif (dm.methodMatcher.matches(this.method, targetClass, this.arguments)) { \n\t\t\t\treturn dm.interceptor.invoke(this);\n\t\t\t}\n\t\t\telse { \n\t\t\t\t// Dynamic matching failed.\n\t\t\t\t// Skip this interceptor and invoke the next in the chain.\n\t\t\t\t// 否则递归执行下一个拦截器\n\t\t\t\treturn proceed();\n\t\t\t}\n\t\t}\n\t\telse { \n\t\t\t// 非动态调用直接调用拦截器方法。\n\t\t\treturn ((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(this);\n\t\t}\n\t}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331090740-bzvbe7o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-bzvbe7o",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ProxyFactory#getInterceptorsAndDynamicInterceptionAdvice"
				},
				{
					"Type": "NodeText",
					"Data": "​ 返回的拦截器集合保存到了 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "interceptorsAndDynamicMethodMatchers"
				},
				{
					"Type": "NodeText",
					"Data": "​ 中， "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "currentInterceptorIndex"
				},
				{
					"Type": "NodeText",
					"Data": "​ 记录执行到哪个拦截器。"
				}
			]
		},
		{
			"ID": "20230331090740-3bbisce",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-3bbisce",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其逻辑简述如下："
				}
			]
		},
		{
			"ID": "20230331090740-y9o3a10",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230331090740-y9o3a10",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"ID": "20230331090740-ignoqf7",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230331090740-ignoqf7",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-nqkem9r",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-nqkem9r",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "判断 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "this.currentInterceptorIndex == this.interceptorsAndDynamicMethodMatchers.size() - 1"
								},
								{
									"Type": "NodeText",
									"Data": "​ 是否成立，如果成立，则说明当前拦截器链已经执行结束，开始执行目标对象的目标放啊"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-upd908s",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230331090740-upd908s",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-l2p0bf8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-l2p0bf8",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "否则从 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "interceptorsAndDynamicMethodMatchers"
								},
								{
									"Type": "NodeText",
									"Data": "​ 中获取下一个拦截器。"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-44jqrr1",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230331090740-44jqrr1",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-3gkvygu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-3gkvygu",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果拦截器类型是 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "InterceptorAndDynamicMethodMatcher"
								},
								{
									"Type": "NodeText",
									"Data": "​ 则认为动态匹配，需要每次调用前调用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "MethodMatcher#matches(java.lang.reflect.Method, java.lang.Class\u0026lt;?\u0026gt;, java.lang.Object...)"
								},
								{
									"Type": "NodeText",
									"Data": "​ 方法判断是否匹配，如果匹配则执行该拦截器，否则递归回到第一步找下一个拦截器。"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-nuadd9e",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230331090740-nuadd9e",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-8navu8e",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-8navu8e",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果拦截器类型不是 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "InterceptorAndDynamicMethodMatcher"
								},
								{
									"Type": "NodeText",
									"Data": "​ ，则直接执行该拦截器即可。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331090740-1jho46l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-1jho46l",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关于动态拦截的内容，在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/117568863",
					"TextMarkTextContent": "Spring 源码分析补充篇三 ：Spring Aop 的关键类"
				},
				{
					"Type": "NodeText",
					"Data": " 中所有提及。"
				}
			]
		},
		{
			"ID": "20230331090740-1pnafx1",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331090740-1pnafx1",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2. targetInterceptor"
				}
			]
		},
		{
			"ID": "20230331090740-8ste1yh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-8ste1yh",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "targetInterceptor 实现了 MethodInterceptor 接口，当方法没有适用拦截器和动态拦截建议 则可能使用该拦截器。aopInterceptor 在不同的情况下有不同的实现类，其规则如下："
				}
			]
		},
		{
			"ID": "20230331090740-vy6z526",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331090740-vy6z526",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\t// 如果需要暴露代理类，则需要在执行前将代理类保存到 AOP上下文 中，\n\t// 而 StaticUnadvisedExposedInterceptor 和 DynamicUnadvisedExposedInterceptor 中完成了此操作。\n\tif (exposeProxy) { \n\t\ttargetInterceptor = (isStatic ?\n\t\t\t\t// 如果是静态,直接将 getTarget 对象传入，因为对象不可变。否则传入 TargetSource 由拦截器在内部获取。\n\t\t\t\tnew StaticUnadvisedExposedInterceptor(this.advised.getTargetSource().getTarget()) :\n\t\t\t\tnew DynamicUnadvisedExposedInterceptor(this.advised.getTargetSource()));\n\t}\n\telse { \n\t\ttargetInterceptor = (isStatic ?\n\t\t\t\tnew StaticUnadvisedInterceptor(this.advised.getTargetSource().getTarget()) :\n\t\t\t\tnew DynamicUnadvisedInterceptor(this.advised.getTargetSource()));\n\t}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331090740-6cr9dfu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-6cr9dfu",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "即："
				}
			]
		},
		{
			"ID": "20230331090740-qshp2hl",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230331090740-qshp2hl",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"ID": "20230331090740-pt3w38x",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230331090740-pt3w38x",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-xndx1hz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-xndx1hz",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果 exposeProxy = true \u0026\u0026 代理类是静态 ： StaticUnadvisedExposedInterceptor"
								}
							]
						},
						{
							"ID": "20230331090740-k4unds4",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230331090740-k4unds4",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "\t\t@Override\n\t\t@Nullable\n\t\tpublic Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable { \n\t\t\tObject oldProxy = null;\n\t\t\ttry { \n\t\t\t\t// 切换当前AOP上下文的 代理类对象\n\t\t\t\toldProxy = AopContext.setCurrentProxy(proxy);\n\t\t\t\tObject retVal = methodProxy.invoke(this.target, args);\n\t\t\t\treturn processReturnType(proxy, this.target, method, retVal);\n\t\t\t}\n\t\t\tfinally { \n\t\t\t\t// 重置回上下文对象\n\t\t\t\tAopContext.setCurrentProxy(oldProxy);\n\t\t\t}\n\t\t}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-50hg5v1",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230331090740-50hg5v1",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-1mrocba",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-1mrocba",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果 exposeProxy = true \u0026\u0026 代理类不是静态：DynamicUnadvisedExposedInterceptor"
								}
							]
						},
						{
							"ID": "20230331090740-04vr8hr",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230331090740-04vr8hr",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "\t\t@Override\n\t\t@Nullable\n\t\tpublic Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable { \n\t\t\tObject oldProxy = null;\n\t\t\tObject target = this.targetSource.getTarget();\n\t\t\ttry { \n\t\t\t\toldProxy = AopContext.setCurrentProxy(proxy);\n\t\t\t\tObject retVal = methodProxy.invoke(target, args);\n\t\t\t\treturn processReturnType(proxy, target, method, retVal);\n\t\t\t}\n\t\t\tfinally { \n\t\t\t\tAopContext.setCurrentProxy(oldProxy);\n\t\t\t\tif (target != null) { \n\t\t\t\t\tthis.targetSource.releaseTarget(target);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-plhy8l7",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230331090740-plhy8l7",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-zel1c38",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-zel1c38",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果 exposeProxy = false \u0026\u0026 代理类是静态： StaticUnadvisedInterceptor"
								}
							]
						},
						{
							"ID": "20230331090740-4b3rk96",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230331090740-4b3rk96",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "\t\t@Override\n\t\t@Nullable\n\t\tpublic Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable { \n\t\t\tObject retVal = methodProxy.invoke(this.target, args);\n\t\t\treturn processReturnType(proxy, this.target, method, retVal);\n\t\t}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-046czlb",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230331090740-046czlb",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-pfu9g2j",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-pfu9g2j",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果 exposeProxy = false \u0026\u0026 代理类不是静态：DynamicUnadvisedInterceptor"
								}
							]
						},
						{
							"ID": "20230331090740-0xm2cvs",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230331090740-0xm2cvs",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "\t\t@Override\n\t\t@Nullable\n\t\tpublic Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable { \n\t\t\tObject target = this.targetSource.getTarget();\n\t\t\ttry { \n\t\t\t\tObject retVal = methodProxy.invoke(target, args);\n\t\t\t\treturn processReturnType(proxy, target, method, retVal);\n\t\t\t}\n\t\t\tfinally { \n\t\t\t\tif (target != null) { \n\t\t\t\t\tthis.targetSource.releaseTarget(target);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331090740-8oiyznq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-8oiyznq",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "注"
				},
				{
					"Type": "NodeText",
					"Data": "​： 这里的所说的静态是 根据 TargetSource#isStatic 方法判断，标志用户返回当前bean是否为静态的，比如常见的单例bean就是静态的，而原型模式下就是动态的。这里这个方法的主要作用是，对于静态的bean，spring是会对其进行缓存的，在多次使用TargetSource获取目标bean对象的时候，其获取的总是同一个对象，通过这种方式提高效率。"
				}
			]
		},
		{
			"ID": "20230331090740-r33wllh",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331090740-r33wllh",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3. SerializableNoOp"
				}
			]
		},
		{
			"ID": "20230331090740-urqj07l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-urqj07l",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SerializableNoOp 没有做任何事。用于无需代理或无法代理的方法。"
				}
			]
		},
		{
			"ID": "20230331090740-evr6wy3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331090740-evr6wy3",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\tpublic static class SerializableNoOp implements NoOp, Serializable { \n\t}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331090740-4zd27ml",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331090740-4zd27ml",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4. StaticDispatcher"
				}
			]
		},
		{
			"ID": "20230331090740-pjqygq5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-pjqygq5",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "StaticDispatcher 是静态类情况下的懒加载策略，其实现如下："
				}
			]
		},
		{
			"ID": "20230331090740-14ctu05",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331090740-14ctu05",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\tprivate static class StaticDispatcher implements Dispatcher, Serializable { \n\n\t\t@Nullable\n\t\tprivate final Object target;\n\n\t\tpublic StaticDispatcher(@Nullable Object target) { \n\t\t\tthis.target = target;\n\t\t}\n\n\t\t@Override\n\t\t@Nullable\n\t\tpublic Object loadObject() { \n\t\t\treturn this.target;\n\t\t}\n\t}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331090740-sjm0wvx",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331090740-sjm0wvx",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5. AdvisedDispatcher"
				}
			]
		},
		{
			"ID": "20230331090740-oixtjiq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-oixtjiq",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "AdvisedDispatcher 仍为懒加载策略。 调用时机为代理类调用的是 Advised 接口声明的方法时，其实现如下："
				}
			]
		},
		{
			"ID": "20230331090740-ay7rqdd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331090740-ay7rqdd",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\t/**\n\t * Dispatcher for any methods declared on the Advised class.\n\t */\n\tprivate static class AdvisedDispatcher implements Dispatcher, Serializable { \n\n\t\tprivate final AdvisedSupport advised;\n\n\t\tpublic AdvisedDispatcher(AdvisedSupport advised) { \n\t\t\tthis.advised = advised;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object loadObject() { \n\t\t\treturn this.advised;\n\t\t}\n\t}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331090740-qqgasz9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331090740-qqgasz9",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "6. EqualsInterceptor"
				}
			]
		},
		{
			"ID": "20230331090740-3bzbi2i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-3bzbi2i",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "EqualsInterceptor 用于处理 equals 方法的调用，其实现如下："
				}
			]
		},
		{
			"ID": "20230331090740-vksle52",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331090740-vksle52",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\tprivate static class EqualsInterceptor implements MethodInterceptor, Serializable { \n\n\t\tprivate final AdvisedSupport advised;\n\n\t\tpublic EqualsInterceptor(AdvisedSupport advised) { \n\t\t\tthis.advised = advised;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) { \n\t\t\tObject other = args[0];\n\t\t\tif (proxy == other) { \n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (other instanceof Factory) { \n\t\t\t\tCallback callback = ((Factory) other).getCallback(INVOKE_EQUALS);\n\t\t\t\tif (!(callback instanceof EqualsInterceptor)) { \n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tAdvisedSupport otherAdvised = ((EqualsInterceptor) callback).advised;\n\t\t\t\treturn AopProxyUtils.equalsInProxy(this.advised, otherAdvised);\n\t\t\t}\n\t\t\telse { \n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331090740-vzupo2l",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331090740-vzupo2l",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "7. HashCodeInterceptor"
				}
			]
		},
		{
			"ID": "20230331090740-kp9jdvx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-kp9jdvx",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "HashCodeInterceptor用于处理 hashcode 方法的调用，其实现如下："
				}
			]
		},
		{
			"ID": "20230331090740-8f8mo51",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331090740-8f8mo51",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\tprivate static class HashCodeInterceptor implements MethodInterceptor, Serializable { \n\n\t\tprivate final AdvisedSupport advised;\n\n\t\tpublic HashCodeInterceptor(AdvisedSupport advised) { \n\t\t\tthis.advised = advised;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) { \n\t\t\treturn CglibAopProxy.class.hashCode() * 13 + this.advised.getTargetSource().hashCode();\n\t\t}\n\t}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331090740-bb6t4ps",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331090740-bb6t4ps",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "四、总结"
				}
			]
		},
		{
			"ID": "20230331090740-7pcolp1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-7pcolp1",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们这里总结一下Spring Aop Cglib 的代理过程："
				}
			]
		},
		{
			"ID": "20230331090740-9q14ueg",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230331090740-9q14ueg",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"ID": "20230331090740-mg456um",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230331090740-mg456um",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-rpm1xsw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-rpm1xsw",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Spring 服务启动后，会加载自动代理创建器 AbstractAutoProxyCreator。AbstractAutoProxyCreator有多个实现类，不过主体逻辑基本相同，这里就用 AbstractAutoProxyCreator 表述。"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-dp4m2px",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230331090740-dp4m2px",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-24dm038",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-24dm038",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在 Spring Bean 创建过程中，AbstractAutoProxyCreator 会从容器中获取 Advisor 集合，并判断是否有适用于当前Bean 的Advisor 集合。如果存在，则调用 AbstractAutoProxyCreator#createProxy 准备开始创建该 Bean的 代理。"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-yj6vg0c",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230331090740-yj6vg0c",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-htd1t2w",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-htd1t2w",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "创建代理前会做一些准备工作，如：创建当前Bean对应的 ProxyFactory ，并将适用 的Advisor 赋值给 ProxyFactory 等。随后通过 ProxyFactory#getProxy(java.lang.ClassLoader) 创建代理对象。"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-lpahb5o",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230331090740-lpahb5o",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-hopeyuw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-hopeyuw",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Spring Bean 代理的创建可以选择 Jdk动态代理和 Cglib 动态代理，本文分析 Cglib 过程，因此这里假定Bean 使用 Cglib 代理。所以这里选择 CglibAopProxy#getProxy(java.lang.ClassLoader) 创建代理对象"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-8znltwa",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230331090740-8znltwa",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-e2yn19f",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-e2yn19f",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在 CglibAopProxy#getProxy(java.lang.ClassLoader) 在创建代理对象时会添加 Callback集合用于代理对象调用时的增强操作，并且会添加代理回调过滤器 ProxyCallbackFilter 来选择使用合适的 Callback 来操作 。"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-iez1mtv",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20230331090740-iez1mtv",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-51tuuel",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-51tuuel",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当代理对象调用某个方法时，会通过 ProxyCallbackFilter 来选择合适的Callback 执行。如常规的调用会执行 DynamicAdvisedInterceptor 。"
								}
							]
						}
					]
				},
				{
					"ID": "20230331090740-3vyrmnc",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ny4=",
						"Num": 7
					},
					"Properties": {
						"id": "20230331090740-3vyrmnc",
						"updated": "20230331090740"
					},
					"Children": [
						{
							"ID": "20230331090740-k7q60t8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331090740-k7q60t8",
								"updated": "20230331090740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在 DynamicAdvisedInterceptor 中会遍历当前 ProxyFactory 中的 Advisor 集合（这里的 Advisor集合就是第三步的准备工作中 保存到 ProxyFactory 中的)，挑选出适合当前调用方法的 Advisor 依次执行，最后执行真正的方法。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331090740-q2q8sba",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331090740-q2q8sba",
				"updated": "20230331090740"
			}
		},
		{
			"ID": "20230331090740-l7bgn9w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331090740-l7bgn9w",
				"updated": "20230331090740"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "以上：内容部分参考"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong a",
					"TextMarkAHref": "https://blog.csdn.net/difffate/article/details/70552056",
					"TextMarkTextContent": "https://blog.csdn.net/difffate/article/details/70552056"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong a",
					"TextMarkAHref": "https://blog.csdn.net/Q_AN1314/article/details/79724334",
					"TextMarkTextContent": "https://blog.csdn.net/Q_AN1314/article/details/79724334"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong a",
					"TextMarkAHref": "https://blog.csdn.net/m0_46125280/article/details/103854884",
					"TextMarkTextContent": "https://blog.csdn.net/m0_46125280/article/details/103854884"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong a",
					"TextMarkAHref": "https://blog.csdn.net/NEW_BUGGER/article/details/106350998",
					"TextMarkTextContent": "https://blog.csdn.net/NEW_BUGGER/article/details/106350998"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "如有侵扰，联系删除。 内容仅用于自我记录学习使用。如有错误，欢迎指正"
				}
			]
		}
	]
}