{
	"ID": "20230331082747-xdxj9pg",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230331082747-xdxj9pg",
		"title": "Spring源码分析衍生篇四：后处理器 BeanPostProcessor_猫吻鱼的博客-CSDN博客",
		"updated": "20230331082747"
	},
	"Children": [
		{
			"ID": "20230331082747-ts07273",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331082747-ts07273",
				"updated": "20230331082747"
			}
		},
		{
			"ID": "20230331082747-ico6xwv",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230331082747-ico6xwv",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"ID": "20230331082747-0j7mfcm",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331082747-0j7mfcm",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-dk08zxt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331082747-dk08zxt",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/106040809",
									"TextMarkTextContent": "https://blog.csdn.net/qq_36882793/article/details/106040809"
								}
							]
						}
					]
				},
				{
					"ID": "20230331082747-2dbzn0k",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331082747-2dbzn0k",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-zmpgcew",
							"Type": "NodeHeading",
							"HeadingLevel": 1,
							"Properties": {
								"id": "20230331082747-zmpgcew",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一、前言本文是 Spring源码分析："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/105800112",
									"TextMarkTextContent": "单例bean的获取 - createBean"
								},
								{
									"Type": "NodeText",
									"Data": "  的衍生文章。主要是因为本人菜鸡，在分析源码的过程中还有一些其他的内容不理解，故开设衍生篇来完善内容以学习。"
								}
							]
						}
					]
				},
				{
					"ID": "20230331082747-n1k618m",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331082747-n1k618m",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-j0dntou",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331082747-j0dntou",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2023-03-31 08:27:47"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331082747-05dbqlf",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331082747-05dbqlf",
				"updated": "20230331082747"
			}
		},
		{
			"ID": "20230331082747-prudtbj",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331082747-prudtbj",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "文章目录"
				}
			]
		},
		{
			"ID": "20230331082747-k5xqiw0",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230331082747-k5xqiw0",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"ID": "20230331082747-dtbn7oi",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331082747-dtbn7oi",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-nikicbj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331082747-nikicbj",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/106040809#_1",
									"TextMarkTextContent": "一、前言"
								}
							]
						}
					]
				},
				{
					"ID": "20230331082747-z2ql6l2",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331082747-z2ql6l2",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-7l6f38p",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331082747-7l6f38p",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/106040809#BeanPostProcessor_3",
									"TextMarkTextContent": "二、BeanPostProcessor"
								}
							]
						}
					]
				},
				{
					"ID": "20230331082747-5ronhsn",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331082747-5ronhsn",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-kovsdnp",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230331082747-kovsdnp",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"ID": "20230331082747-ahdjhnd",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331082747-ahdjhnd",
										"updated": "20230331082747"
									},
									"Children": [
										{
											"ID": "20230331082747-wbtckg7",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331082747-wbtckg7",
												"updated": "20230331082747"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/106040809#1__BeanPostProcessor_6",
													"TextMarkTextContent": "1. 什么是 BeanPostProcessor"
												}
											]
										}
									]
								},
								{
									"ID": "20230331082747-i2591vd",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331082747-i2591vd",
										"updated": "20230331082747"
									},
									"Children": [
										{
											"ID": "20230331082747-g51dz7x",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331082747-g51dz7x",
												"updated": "20230331082747"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/106040809#2_BeanPostProcessor___10",
													"TextMarkTextContent": "2. BeanPostProcessor 的种类"
												}
											]
										}
									]
								},
								{
									"ID": "20230331082747-t4ifc3z",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331082747-t4ifc3z",
										"updated": "20230331082747"
									},
									"Children": [
										{
											"ID": "20230331082747-lvzl5nx",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331082747-lvzl5nx",
												"updated": "20230331082747"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/106040809#3_BeanPostProcessor__16",
													"TextMarkTextContent": "3. BeanPostProcessor 的创建"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230331082747-5tph7s2",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331082747-5tph7s2",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-5nwvvhd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331082747-5nwvvhd",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/106040809#_46",
									"TextMarkTextContent": "三、基本介绍"
								}
							]
						}
					]
				},
				{
					"ID": "20230331082747-f0sqfn0",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331082747-f0sqfn0",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-w3gd5ky",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331082747-w3gd5ky",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/106040809#_112",
									"TextMarkTextContent": "四、源码中的调用场景"
								}
							]
						}
					]
				},
				{
					"ID": "20230331082747-tquon27",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331082747-tquon27",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-97yi8tf",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230331082747-97yi8tf",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"ID": "20230331082747-il2m8pu",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331082747-il2m8pu",
										"updated": "20230331082747"
									},
									"Children": [
										{
											"ID": "20230331082747-e958wjs",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331082747-e958wjs",
												"updated": "20230331082747"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/106040809#1_InstantiationAwareBeanPostProcessor_153",
													"TextMarkTextContent": "1. InstantiationAwareBeanPostProcessor"
												}
											]
										}
									]
								},
								{
									"ID": "20230331082747-ksxru3n",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331082747-ksxru3n",
										"updated": "20230331082747"
									},
									"Children": [
										{
											"ID": "20230331082747-d83vjlh",
											"Type": "NodeList",
											"ListData": {},
											"Properties": {
												"id": "20230331082747-d83vjlh",
												"updated": "20230331082747"
											},
											"Children": [
												{
													"ID": "20230331082747-f1ewcii",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230331082747-f1ewcii",
														"updated": "20230331082747"
													},
													"Children": [
														{
															"ID": "20230331082747-cyrpw9o",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230331082747-cyrpw9o",
																"updated": "20230331082747"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "a",
																	"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/106040809#11_IBPpostProcessBeforeInstantiation_156",
																	"TextMarkTextContent": "1.1. IBP.postProcessBeforeInstantiation"
																}
															]
														}
													]
												},
												{
													"ID": "20230331082747-dtsv8z4",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230331082747-dtsv8z4",
														"updated": "20230331082747"
													},
													"Children": [
														{
															"ID": "20230331082747-m6yp9ot",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230331082747-m6yp9ot",
																"updated": "20230331082747"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "a",
																	"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/106040809#12_IBPpostProcessAfterInstantiation__IBPpostProcessProperties__IBPpostProcessPropertyValues_195",
																	"TextMarkTextContent": "1.2. IBP.postProcessAfterInstantiation \u0026amp; IBP.postProcessProperties \u0026amp; IBP.postProcessPropertyValues"
																}
															]
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20230331082747-j0bs38j",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331082747-j0bs38j",
										"updated": "20230331082747"
									},
									"Children": [
										{
											"ID": "20230331082747-4397w85",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331082747-4397w85",
												"updated": "20230331082747"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/106040809#2_BeanPostProcessor_250",
													"TextMarkTextContent": "2. BeanPostProcessor"
												}
											]
										}
									]
								},
								{
									"ID": "20230331082747-873759f",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331082747-873759f",
										"updated": "20230331082747"
									},
									"Children": [
										{
											"ID": "20230331082747-nsp13dz",
											"Type": "NodeList",
											"ListData": {},
											"Properties": {
												"id": "20230331082747-nsp13dz",
												"updated": "20230331082747"
											},
											"Children": [
												{
													"ID": "20230331082747-m0r3eke",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230331082747-m0r3eke",
														"updated": "20230331082747"
													},
													"Children": [
														{
															"ID": "20230331082747-oqdsmr9",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230331082747-oqdsmr9",
																"updated": "20230331082747"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "a",
																	"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/106040809#21_BPpostProcessBeforeInitialization_251",
																	"TextMarkTextContent": "2.1. BP.postProcessBeforeInitialization"
																}
															]
														}
													]
												},
												{
													"ID": "20230331082747-q8ec3uo",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230331082747-q8ec3uo",
														"updated": "20230331082747"
													},
													"Children": [
														{
															"ID": "20230331082747-b0h1bvu",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20230331082747-b0h1bvu",
																"updated": "20230331082747"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "a",
																	"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/106040809#22_BPpostProcessAfterInitialization_276",
																	"TextMarkTextContent": "2.2. BP.postProcessAfterInitialization"
																}
															]
														}
													]
												},
												{
													"ID": "20230331082747-aky2cro",
													"Type": "NodeListItem",
													"ListData": {
														"BulletChar": 42,
														"Marker": "Kg=="
													},
													"Properties": {
														"id": "20230331082747-aky2cro",
														"updated": "20230331082747"
													},
													"Children": [
														{
															"ID": "20230331082747-4my685q",
															"Type": "NodeList",
															"ListData": {},
															"Properties": {
																"id": "20230331082747-4my685q",
																"updated": "20230331082747"
															},
															"Children": [
																{
																	"ID": "20230331082747-9rnbzdi",
																	"Type": "NodeListItem",
																	"ListData": {
																		"BulletChar": 42,
																		"Marker": "Kg=="
																	},
																	"Properties": {
																		"id": "20230331082747-9rnbzdi",
																		"updated": "20230331082747"
																	},
																	"Children": [
																		{
																			"ID": "20230331082747-z2hdh27",
																			"Type": "NodeParagraph",
																			"Properties": {
																				"id": "20230331082747-z2hdh27",
																				"updated": "20230331082747"
																			},
																			"Children": [
																				{
																					"Type": "NodeTextMark",
																					"TextMarkType": "a",
																					"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/106040809#221_resolveBeforeInstantiation_286",
																					"TextMarkTextContent": "2.2.1 resolveBeforeInstantiation"
																				}
																			]
																		}
																	]
																},
																{
																	"ID": "20230331082747-gqdtsyy",
																	"Type": "NodeListItem",
																	"ListData": {
																		"BulletChar": 42,
																		"Marker": "Kg=="
																	},
																	"Properties": {
																		"id": "20230331082747-gqdtsyy",
																		"updated": "20230331082747"
																	},
																	"Children": [
																		{
																			"ID": "20230331082747-q9yljam",
																			"Type": "NodeParagraph",
																			"Properties": {
																				"id": "20230331082747-q9yljam",
																				"updated": "20230331082747"
																			},
																			"Children": [
																				{
																					"Type": "NodeTextMark",
																					"TextMarkType": "a",
																					"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/106040809#222_initializeBean_294",
																					"TextMarkTextContent": "2.2.2 initializeBean"
																				}
																			]
																		}
																	]
																},
																{
																	"ID": "20230331082747-kypmhi3",
																	"Type": "NodeListItem",
																	"ListData": {
																		"BulletChar": 42,
																		"Marker": "Kg=="
																	},
																	"Properties": {
																		"id": "20230331082747-kypmhi3",
																		"updated": "20230331082747"
																	},
																	"Children": [
																		{
																			"ID": "20230331082747-mxkv0wd",
																			"Type": "NodeParagraph",
																			"Properties": {
																				"id": "20230331082747-mxkv0wd",
																				"updated": "20230331082747"
																			},
																			"Children": [
																				{
																					"Type": "NodeTextMark",
																					"TextMarkType": "a",
																					"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/106040809#223_postProcessObjectFromFactoryBean_298",
																					"TextMarkTextContent": "2.2.3 postProcessObjectFromFactoryBean"
																				}
																			]
																		}
																	]
																}
															]
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20230331082747-1z0coze",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230331082747-1z0coze",
										"updated": "20230331082747"
									},
									"Children": [
										{
											"ID": "20230331082747-t0jz6q0",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230331082747-t0jz6q0",
												"updated": "20230331082747"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "a",
													"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/106040809#3_SmartInstantiationAwareBeanPostProcessor_303",
													"TextMarkTextContent": "3. SmartInstantiationAwareBeanPostProcessor"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331082747-9s4qfdd",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331082747-9s4qfdd",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一、前言"
				}
			]
		},
		{
			"ID": "20230331082747-9n0at6r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-9n0at6r",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本文是 Spring源码分析："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/105800112",
					"TextMarkTextContent": "单例bean的获取 - createBean"
				},
				{
					"Type": "NodeText",
					"Data": " 的衍生文章。主要是因为本人菜鸡，在分析源码的过程中还有一些其他的内容不理解，故开设衍生篇来完善内容以学习。"
				}
			]
		},
		{
			"ID": "20230331082747-b62m9xk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331082747-b62m9xk",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二、BeanPostProcessor"
				}
			]
		},
		{
			"ID": "20230331082747-rkcpgbj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-rkcpgbj",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "所谓的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BeanPostProcessor"
				},
				{
					"Type": "NodeText",
					"Data": "​ 翻译过来就是Bean后处理器。实际上Spring还有一类后处理器"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BeanFactoryPostProcessor"
				},
				{
					"Type": "NodeText",
					"Data": "​，源码还没看到这，暂不分析。"
				}
			]
		},
		{
			"ID": "20230331082747-psxeieg",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331082747-psxeieg",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1. 什么是 BeanPostProcessor"
				}
			]
		},
		{
			"ID": "20230331082747-zd5cjz9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-zd5cjz9",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BeanPostProcessor"
				},
				{
					"Type": "NodeText",
					"Data": "​ 是 Spring提供给我们的一个非常重要的扩展接口，并且Spring内部的很多功能也是通过 BeanPostProcessor 来完成的(目前看到最典型的就是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AnnotationAwareAspectJAutoProxyCreator"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的 注入)。"
				}
			]
		},
		{
			"ID": "20230331082747-8w3ue7g",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331082747-8w3ue7g",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2. BeanPostProcessor 的种类"
				}
			]
		},
		{
			"ID": "20230331082747-u5o31vi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-u5o31vi",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BeanPostProcessor"
				},
				{
					"Type": "NodeText",
					"Data": "​ 在Spring 中的子类非常多(idea 显是有46个)，比如"
				}
			]
		},
		{
			"ID": "20230331082747-5d5ed86",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230331082747-5d5ed86",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"ID": "20230331082747-gh8fijk",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331082747-gh8fijk",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-wfez6rz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331082747-wfez6rz",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "InstantiationAwareBeanPostProcessorAdapter"
								},
								{
									"Type": "NodeText",
									"Data": "​ ： 在Spring 的bean加载过程中起了非常重要的作用"
								}
							]
						}
					]
				},
				{
					"ID": "20230331082747-lxgji6g",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331082747-lxgji6g",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-0vh38n5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331082747-0vh38n5",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "AnnotationAwareAspectJAutoProxyCreator"
								},
								{
									"Type": "NodeText",
									"Data": "​ ： bean 创建过程中的 属性注入时起作用"
								}
							]
						}
					]
				},
				{
					"ID": "20230331082747-jzl2bg5",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331082747-jzl2bg5",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-rc5qspc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331082747-rc5qspc",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "AspectJAwareAdvisorAutoProxyCreator"
								},
								{
									"Type": "NodeText",
									"Data": "​ ： Aspect 的 AOP 功能实现也全仰仗BeanPostProcessor 的特性。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331082747-hs3n37n",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331082747-hs3n37n",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3. BeanPostProcessor 的创建"
				}
			]
		},
		{
			"ID": "20230331082747-tw5llp1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-tw5llp1",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "个人认为 Bean的 创建时可以认为分为两个过程： 一是Bean对应的BeanDefinition 的创建。二是Bean 实例的创建。"
				}
			]
		},
		{
			"ID": "20230331082747-jf1oau8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-jf1oau8",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因为在 Spring容器中，Bean的创建并非仅仅通过反射创建就结束了，在创建过程中，需要考虑到Bean针对Spring容器中的一些属性，所以BeanDefinition 中不仅仅包含了 Bean Class 文件信息，还包含了 当前Bean在Spring容器中的一些属性，比如在容器中的作用域、是否懒加载、别名等信息。当Bean 进行实例化创建时需要依赖于对应的BeanDefinition 提供对应的信息。"
				}
			]
		},
		{
			"ID": "20230331082747-k61ewvd",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331082747-k61ewvd",
				"updated": "20230331082747"
			}
		},
		{
			"ID": "20230331082747-tbgzni7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-tbgzni7",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "BeanDefinition 的创建在 Spring 启动时对 BeanFactoryPostProcessor 的处理。\n详参："
				}
			]
		},
		{
			"ID": "20230331082747-r4nr0fi",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230331082747-r4nr0fi",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"ID": "20230331082747-f4oea1w",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230331082747-f4oea1w",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-q6kkdon",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331082747-q6kkdon",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/106447003",
									"TextMarkTextContent": "Spring源码分析二：BeanFactoryPostProcessor 的处理"
								}
							]
						}
					]
				},
				{
					"ID": "20230331082747-4d78pfo",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230331082747-4d78pfo",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-e5kclu5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331082747-e5kclu5",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/106558290",
									"TextMarkTextContent": "Spring 源码分析衍生篇八 ：ConfigurationClassPostProcessor 上篇"
								}
							]
						}
					]
				},
				{
					"ID": "20230331082747-njdjm4g",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230331082747-njdjm4g",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-gvr1o7c",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331082747-gvr1o7c",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/106652607",
									"TextMarkTextContent": "Spring 源码分析衍生篇九 ：ConfigurationClassPostProcessor 下篇"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331082747-wio2t0n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-wio2t0n",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Bean 实例的创建在Spring 启动时的收尾工作，详参:"
				}
			]
		},
		{
			"ID": "20230331082747-j43bajc",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230331082747-j43bajc",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"ID": "20230331082747-s1qcptv",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230331082747-s1qcptv",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-p5pvpyn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331082747-p5pvpyn",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/106441853",
									"TextMarkTextContent": "Spring源码分析一：容器的刷新 - refresh()"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331082747-1vyuktp",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331082747-1vyuktp",
				"updated": "20230331082747"
			}
		},
		{
			"ID": "20230331082747-i0cxsky",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-i0cxsky",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "而由于 BeanPostProcessor 是参与了 Bean 创建过程。所以其创建一定在普通 Bean 之前。实际上 BeanPostProcessor 的创建时在 Spring 启动时容器刷新的时候"
				},
				{
					"Type": "NodeText",
					"Data": "​。"
				}
			]
		},
		{
			"ID": "20230331082747-1qq19sy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-1qq19sy",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "BeanPostProcessor 的 BeanDefinition 创建时机和普通 Bean没有区别，都是在Spring 启动时的BeanFactoryPostProcessor 中完成(确切的说是 ConfigurationClassPostProcessor 中完成)。"
				}
			]
		},
		{
			"ID": "20230331082747-eqdtsjv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-eqdtsjv",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "而BeanPostProcessor 的实例创建要优先于普通bean创建，Spring启动过程中会调用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": ".AbstractApplicationContext#registerBeanPostProcessors"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法。 在这个方法中，Spring 会从容器中获取到所有BeanPostProcessor 类型的beanName， 通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "beanFactory.getBean"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法获取到对应实例，进行排序后注册到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BeanFactory.beanPostProcessors"
				},
				{
					"Type": "NodeText",
					"Data": "​ 属性中，其中 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BeanFactory.beanPostProcessors"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的定义如下"
				}
			]
		},
		{
			"ID": "20230331082747-5cmo2gd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331082747-5cmo2gd",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\tprivate final List\u003cBeanPostProcessor\u003e beanPostProcessors = new BeanPostProcessorCacheAwareList();\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331082747-spcee7t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-spcee7t",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当容器需要执行 BeanPostProcessor 方法时可以直接从 beanPostProcessors 中获取即可。\n关于 refresh 方法的介绍，详参: "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/qq_36882793/article/details/106441853",
					"TextMarkTextContent": "Spring源码分析一：容器的刷新 - refresh()"
				}
			]
		},
		{
			"ID": "20230331082747-6wn25de",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331082747-6wn25de",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "三、基本介绍"
				}
			]
		},
		{
			"ID": "20230331082747-kk1cc9w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-kk1cc9w",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "日常使用中，我们一般编写一个类来实现 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BeanPostProcessor"
				},
				{
					"Type": "NodeText",
					"Data": "​ 或者 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "InstantiationAwareBeanPostProcessor"
				},
				{
					"Type": "NodeText",
					"Data": "​ 接口，根据每个方法的调用时机，来完成响应的工作。\n下面介绍一下接口方法，这里通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "InstantiationAwareBeanPostProcessor"
				},
				{
					"Type": "NodeText",
					"Data": "​ 接口来介绍 。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "InstantiationAwareBeanPostProcessor"
				},
				{
					"Type": "NodeText",
					"Data": "​ 是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BeanPostProcessor"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的子接口，在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BeanPostProcessor"
				},
				{
					"Type": "NodeText",
					"Data": "​ 基础上又扩展了三个方法。"
				}
			]
		},
		{
			"ID": "20230331082747-3klafns",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331082747-3klafns",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Component\npublic class DemoPostProcesser implements InstantiationAwareBeanPostProcessor { \n\n    //InstantiationAwareBeanPostProcessor 提供的方法， 在 Class\u003cT\u003e -\u003e T 的转换过程中\n    // 此时bean还没创建，可以通过这方法代替 Spring 容器创建的方法\n    @Override\n    public Object postProcessBeforeInstantiation(Class\u003c?\u003e beanClass, String beanName) throws BeansException { \n        System.out.println(\"DemoPostProcesser.postProcessBeforeInstantiation   ###  1\");\n        return null;\n    }\n\n    //InstantiationAwareBeanPostProcessor 提供的方法， 返回的值代表是否需要继续注入属性，\n    // 如果返回true，则会调用postProcessProperties和postProcessPropertyValues 来注入属性\n    // 此时bean已经创建，属性尚未注入\n    @Override\n    public boolean postProcessAfterInstantiation(Object bean, String beanName) throws BeansException { \n        System.out.println(\"DemoPostProcesser.postProcessAfterInstantiation   ###  2\");\n        return true;\n    }\n    //InstantiationAwareBeanPostProcessor 提供的方法，可以在这个方法中进行bean属性的注入，Aop 就是在此方法中进行了代理的创建\n    // 只有postProcessAfterInstantiation 返回true 时才会调用\n    @Override\n    public PropertyValues postProcessProperties(PropertyValues pvs, Object bean, String beanName) throws BeansException { \n        System.out.println(\"DemoPostProcesser.postProcessProperties   ###  3\");\n        return pvs;\n    }\n    //InstantiationAwareBeanPostProcessor 提供的方法，可以在这个方法中进行bean属性的注入, 这个方法已经过时，使用postProcessProperties 代理\n    // 只有postProcessAfterInstantiation 返回true 时 且 postProcessProperties 返回 null 时调用\n    @Override\n    public PropertyValues postProcessPropertyValues(PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName) throws BeansException { \n        System.out.println(\"DemoPostProcesser.postProcessPropertyValues   ###  4\");\n        return pvs;\n    }\n\n    // BeanPostProcessor 提供的方法，在bean初始化前调用，这时候的bean大体已经创建完成了，在完成一些其他属性的注入\n    @Override\n    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { \n        System.out.println(\"DemoPostProcesser.postProcessBeforeInitialization   ###  5\");\n        return bean;\n    }\n    // BeanPostProcessor 提供的方法，在bean初始化后调用，这时候的bean 已经创建完成了\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException { \n        System.out.println(\"DemoPostProcesser.postProcessAfterInitialization   ###  6\");\n        return bean;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331082747-q7fjk01",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-q7fjk01",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其调用顺序也和标注相同\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/20200518221140881-20230331082747-pnsoqqk.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "注意："
				}
			]
		},
		{
			"ID": "20230331082747-3j4kfon",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-3j4kfon",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里可以看到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "postProcessPropertyValues"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法并没有调用，因为对于一个 过时的方法 没必要必须要调用它，前面也提到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "postProcessAfterInstantiation"
				},
				{
					"Type": "NodeText",
					"Data": "​ 返回true 并且 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "postProcessProperties"
				},
				{
					"Type": "NodeText",
					"Data": "​ 返回不为null 才会调用该方法，这里"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "postProcessProperties"
				},
				{
					"Type": "NodeText",
					"Data": "​ 返回不为null ，所以不会调用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "postProcessPropertyValues"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法"
				}
			]
		},
		{
			"ID": "20230331082747-zhv5e9f",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331082747-zhv5e9f",
				"updated": "20230331082747"
			}
		},
		{
			"ID": "20230331082747-4unba1p",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331082747-4unba1p",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "四、源码中的调用场景"
				}
			]
		},
		{
			"ID": "20230331082747-9msrm63",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-9msrm63",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下面为了方便描述，进行一些简化写法，为了后面描述方便"
				}
			]
		},
		{
			"ID": "20230331082747-58161va",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-58161va",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "BP : BeanPostProcessorIBP : InstantiationAwareBeanPostProcessorSBP : SmartInstantiationAwareBeanPostProcessor"
				}
			]
		},
		{
			"ID": "20230331082747-4c4ihng",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331082747-4c4ihng",
				"updated": "20230331082747"
			}
		},
		{
			"ID": "20230331082747-62fv8kg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-62fv8kg",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其结构如下图：\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/2020051822044829-20230331082747-46poz95.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230331082747-fvehwws",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331082747-fvehwws",
				"updated": "20230331082747"
			}
		},
		{
			"ID": "20230331082747-72soh3h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-72soh3h",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里就不具体贴出多少代码。简单解释一下调用场景"
				}
			]
		},
		{
			"ID": "20230331082747-a8249vj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-a8249vj",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Spring 在启动过程中，会将所有实现了 BeanPostProcessor 接口的子类保存到 AbstractBeanFactory 中的 beanPostProcessors 集合中，如下："
				}
			]
		},
		{
			"ID": "20230331082747-n35sgch",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331082747-n35sgch",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "private final List\u003cBeanPostProcessor\u003e beanPostProcessors = new CopyOnWriteArrayList\u003c\u003e();\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331082747-q24wbjb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-q24wbjb",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在适当的时候(这个适当的时候就根据 每个接口方法定义的意义来判断)， Spring会获取 所有的BeanPostProcessor 子类集合，即 beanPostProcessors ，经过类型过滤后，调用对应的方法。比如，就是对 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法的调用流程(其余方法的调用也类似)："
				}
			]
		},
		{
			"ID": "20230331082747-ga1p12a",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331082747-ga1p12a",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\tprotected Object applyBeanPostProcessorsBeforeInstantiation(Class\u003c?\u003e beanClass, String beanName) { \n\t\tfor (BeanPostProcessor bp : getBeanPostProcessors()) { \n\t\t// 因为只有 InstantiationAwareBeanPostProcessor  类型才有postProcessBeforeInstantiation 方法，所以这里要判断一下是不是 InstantiationAwareBeanPostProcessor   类型\n\t\t\tif (bp instanceof InstantiationAwareBeanPostProcessor) { \n\t\t\t\tInstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;\n\t\t\t\tObject result = ibp.postProcessBeforeInstantiation(beanClass, beanName);\n\t\t\t\tif (result != null) { \n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331082747-9zf9ljp",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331082747-9zf9ljp",
				"updated": "20230331082747"
			}
		},
		{
			"ID": "20230331082747-c0eguea",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331082747-c0eguea",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1. InstantiationAwareBeanPostProcessor"
				}
			]
		},
		{
			"ID": "20230331082747-dazvqbv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-dazvqbv",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下面来介绍在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Spring 创建流程中"
				},
				{
					"Type": "NodeText",
					"Data": " 每个方法的实际调用位置："
				}
			]
		},
		{
			"ID": "20230331082747-g8aj0dz",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331082747-g8aj0dz",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.1. IBP.postProcessBeforeInstantiation"
				}
			]
		},
		{
			"ID": "20230331082747-l86y1vk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-l86y1vk",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "IBP.postProcessBeforeInstantiation"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法在 Bean 创建 之前调用，我所理解的目的是替换Spring 容器创建bean， 当 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "IBP.postProcessBeforeInstantiation"
				},
				{
					"Type": "NodeText",
					"Data": "​ 返回不为null时，则不会再通过Spring 创建bean，而是使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "IBP.postProcessBeforeInstantiation"
				},
				{
					"Type": "NodeText",
					"Data": "​ 返回的bean。"
				}
			]
		},
		{
			"ID": "20230331082747-dwxeqet",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331082747-dwxeqet",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\t\t\t...\n\t\t\t// 该方法中 调用了postProcessBeforeInstantiation 方法，并且可能调用 postProcessAfterInitialization 方法\n\t\t\tObject bean = resolveBeforeInstantiation(beanName, mbdToUse);\n\t\t\tif (bean != null) { \n\t\t\t\treturn bean;\n\t\t\t}\n\t\t\t...\n\t\t\t// 真正去创建bean\n\t\t\tObject beanInstance = doCreateBean(beanName, mbdToUse, args);\n\t\t\t...\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331082747-f9giket",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-f9giket",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "resolveBeforeInstantiation"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法内容如下，可以看到 当 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "applyBeanPostProcessorsBeforeInstantiation"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法("
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "applyBeanPostProcessorsBeforeInstantiation"
				},
				{
					"Type": "NodeText",
					"Data": "​ 调用了 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "postProcessBeforeInstantiation"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法) 返回值不为 null，则会调用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "applyBeanPostProcessorsAfterInitialization"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法，从而调用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "postProcessAfterInitialization"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法。因为这里bean返回不为null，则代表bean创建成功了，就会调用创建成功后的方法，即 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "postProcessAfterInitialization"
				},
				{
					"Type": "NodeText",
					"Data": "​。"
				}
			]
		},
		{
			"ID": "20230331082747-pv7oobs",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331082747-pv7oobs",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\tprotected Object resolveBeforeInstantiation(String beanName, RootBeanDefinition mbd) { \n\t\tObject bean = null;\n\t\tif (!Boolean.FALSE.equals(mbd.beforeInstantiationResolved)) { \n\t\t\t// Make sure bean class is actually resolved at this point.\n\t\t\tif (!mbd.isSynthetic() \u0026\u0026 hasInstantiationAwareBeanPostProcessors()) { \n\t\t\t\tClass\u003c?\u003e targetType = determineTargetType(beanName, mbd);\n\t\t\t\tif (targetType != null) { \n\t\t\t\t\tbean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);\n\t\t\t\t\tif (bean != null) { \n\t\t\t\t\t\tbean = applyBeanPostProcessorsAfterInitialization(bean, beanName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tmbd.beforeInstantiationResolved = (bean != null);\n\t\t}\n\t\treturn bean;\n\t}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331082747-t7sczym",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-t7sczym",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里需要注意，在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "resolveBeforeInstantiation"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法中，当 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bean ！= null"
				},
				{
					"Type": "NodeText",
					"Data": "​ 时 调用了 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "applyBeanPostProcessorsAfterInitialization"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法，即 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BP.postProcessAfterInitialization"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法。这是因为如果 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bean != null"
				},
				{
					"Type": "NodeText",
					"Data": "​， 则说明 bean 的创建已经完成，那么这里则是最后调用bean 的后置处理的机会，即调用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BP.postProcessAfterInitialization"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法的最后机会。"
				}
			]
		},
		{
			"ID": "20230331082747-7tcwje1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331082747-7tcwje1",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.2. IBP.postProcessAfterInstantiation \u0026 IBP.postProcessProperties \u0026 IBP.postProcessPropertyValues"
				}
			]
		},
		{
			"ID": "20230331082747-w4ty6w5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-w4ty6w5",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "I"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BP.postProcessAfterInstantiation"
				},
				{
					"Type": "NodeText",
					"Data": "​ 、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "IBP.postProcessProperties"
				},
				{
					"Type": "NodeText",
					"Data": "​ 、 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "IBP.postProcessPropertyValues"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的调用场景只有一处，在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AbstractAutowireCapableBeanFactory#populateBean"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法中，此时bean已经创建完成，正在进行属性注入。而 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "IBP.postProcessAfterInstantiation"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的返回值决定是否继续注入"
				}
			]
		},
		{
			"ID": "20230331082747-thoenev",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-thoenev",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "大致代码如下"
				}
			]
		},
		{
			"ID": "20230331082747-mawp7w5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331082747-mawp7w5",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "protected void populateBean(String beanName, RootBeanDefinition mbd, @Nullable BeanWrapper bw) { \n\t\t...\n\t\t// 调用 postProcessAfterInstantiation 方法吗，如果返回false，直接return;\n\t\tif (!mbd.isSynthetic() \u0026\u0026 hasInstantiationAwareBeanPostProcessors()) { \n\t\t\tfor (BeanPostProcessor bp : getBeanPostProcessors()) { \n\t\t\t\tif (bp instanceof InstantiationAwareBeanPostProcessor) { \n\t\t\t\t\tInstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;\n\t\t\t\t\tif (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) { \n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t... \n\t\tif (hasInstAwareBpps) { \n\t\t\tif (pvs == null) { \n\t\t\t\tpvs = mbd.getPropertyValues();\n\t\t\t}\n\t\t\tfor (BeanPostProcessor bp : getBeanPostProcessors()) { \n\t\t\t\tif (bp instanceof InstantiationAwareBeanPostProcessor) { \n\t\t\t\t\tInstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;\n\t\t\t\t\t// 调用 postProcessProperties 注入属性\n\t\t\t\t\tPropertyValues pvsToUse = ibp.postProcessProperties(pvs, bw.getWrappedInstance(), beanName);\n\t\t\t\t\tif (pvsToUse == null) { \n\t\t\t\t\t\tif (filteredPds == null) { \n\t\t\t\t\t\t\tfilteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 调用 postProcessPropertyValues 注入属性\n\t\t\t\t\t\tpvsToUse = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);\n\t\t\t\t\t\tif (pvsToUse == null) { \n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpvs = pvsToUse;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t...\n\t}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331082747-b576v9t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-b576v9t",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过代码我们可以比较清楚的看到整体逻辑："
				}
			]
		},
		{
			"ID": "20230331082747-ny2qa97",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230331082747-ny2qa97",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"ID": "20230331082747-28faek0",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230331082747-28faek0",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-97mnvdk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331082747-97mnvdk",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "若"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "IBP.postProcessAfterInstantiation"
								},
								{
									"Type": "NodeText",
									"Data": "​ 返回true，才会执行下面步骤"
								}
							]
						}
					]
				},
				{
					"ID": "20230331082747-rxyk9qq",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230331082747-rxyk9qq",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-1fxw941",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331082747-1fxw941",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "调用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "IBP.postProcessProperties"
								},
								{
									"Type": "NodeText",
									"Data": "​ 注入属性，"
								}
							]
						}
					]
				},
				{
					"ID": "20230331082747-mhs0vc7",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230331082747-mhs0vc7",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-5w00yx7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331082747-5w00yx7",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "若"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "IBP.postProcessProperties"
								},
								{
									"Type": "NodeText",
									"Data": "​ 返回为null，才会执行下面步骤"
								}
							]
						}
					]
				},
				{
					"ID": "20230331082747-m5vfmwt",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230331082747-m5vfmwt",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-sf83z6a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331082747-sf83z6a",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "调用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "IBP.postProcessPropertyValues"
								},
								{
									"Type": "NodeText",
									"Data": "​ 注入属性"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331082747-rbm7na9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331082747-rbm7na9",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2. BeanPostProcessor"
				}
			]
		},
		{
			"ID": "20230331082747-7a5ixjf",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331082747-7a5ixjf",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.1. BP.postProcessBeforeInitialization"
				}
			]
		},
		{
			"ID": "20230331082747-brn1sd5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-brn1sd5",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "BP."
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "postProcessBeforeInitialization"
				},
				{
					"Type": "NodeText",
					"Data": "​ 调用时机是bean已经创建完成，但是尚未初始化，即一些属性配置尚未完成(我看到的就一个 init-method 的配置)。使用场景也只有一处，即\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AbstractAutowireCapableBeanFactory#initializeBean(String, Object, RootBeanDefinition)"
				},
				{
					"Type": "NodeText",
					"Data": "​。"
				}
			]
		},
		{
			"ID": "20230331082747-dgdgs5z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-dgdgs5z",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "程序走到这里，代表 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "resolveBeforeInstantiation"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法 中的 IBP."
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "postProcessBeforeInstantiation"
				},
				{
					"Type": "NodeText",
					"Data": "​ 并未代理 bean的创建，在这里则是由Spring 创建的bean的时候来调用。"
				}
			]
		},
		{
			"ID": "20230331082747-awx5gk9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-awx5gk9",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码如下，"
				}
			]
		},
		{
			"ID": "20230331082747-plmxipm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230331082747-plmxipm",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\tprotected Object initializeBean(final String beanName, final Object bean, @Nullable RootBeanDefinition mbd) { \n\t\t....\n\t\t// 调用 BP.postProcessBeforeInitialization\n\t\tif (mbd == null || !mbd.isSynthetic()) { \n\t\t\twrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);\n\t\t}\n\t\t// 初始化属性，貌似就初始化了 一个 init-method\n\t\t...\n\t\tif (mbd == null || !mbd.isSynthetic()) { \n\t\t\t// 调用 BP.postProcessAfterInitialization\n\t\t\twrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);\n\t\t}\n\n\t\treturn wrappedBean;\n\t}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230331082747-xaat8ge",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230331082747-xaat8ge",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.2. BP.postProcessAfterInitialization"
				}
			]
		},
		{
			"ID": "20230331082747-r7i3ltm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-r7i3ltm",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "IBP.postProcessAfterInitialization"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的调用都被封装到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AbstractAutowireCapableBeanFactory#applyBeanPostProcessorsAfterInitialization"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法中。\n而"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "applyBeanPostProcessorsAfterInitialization"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法的调用"
				}
			]
		},
		{
			"ID": "20230331082747-vvyfdte",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-vvyfdte",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "applyBeanPostProcessorsAfterInitialization"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法在下面三个方法中调用："
				}
			]
		},
		{
			"ID": "20230331082747-efxmh3t",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230331082747-efxmh3t",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"ID": "20230331082747-11dv3ph",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331082747-11dv3ph",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-q2v70yf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331082747-q2v70yf",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "AbstractAutowireCapableBeanFactory#resolveBeforeInstantiation"
								}
							]
						}
					]
				},
				{
					"ID": "20230331082747-lsav9qh",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331082747-lsav9qh",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-940016j",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331082747-940016j",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "AbstractAutowireCapableBeanFactory#initializeBean(String, Object, RootBeanDefinition)"
								}
							]
						}
					]
				},
				{
					"ID": "20230331082747-hl6ormc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331082747-hl6ormc",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-4q7wdhe",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331082747-4q7wdhe",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "AbstractAutowireCapableBeanFactory#postProcessObjectFromFactoryBean"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331082747-2t9zxzw",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331082747-2t9zxzw",
				"updated": "20230331082747"
			}
		},
		{
			"ID": "20230331082747-idqzbyi",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230331082747-idqzbyi",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.2.1 resolveBeforeInstantiation"
				}
			]
		},
		{
			"ID": "20230331082747-fut9iya",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-fut9iya",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "resolveBeforeInstantiation"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法的调用有如下三处"
				}
			]
		},
		{
			"ID": "20230331082747-f4gz6kc",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230331082747-f4gz6kc",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"ID": "20230331082747-izj5y22",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331082747-izj5y22",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-v6dle8g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331082747-v6dle8g",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "AbstractAutowireCapableBeanFactory#createBean(String, RootBeanDefinition, Object[])"
								},
								{
									"Type": "NodeText",
									"Data": " 这里的调用实际上就是上面讲的 IBP.postProcessBeforeInstantiation 的调用后续，所以这里不再重复"
								}
							]
						}
					]
				},
				{
					"ID": "20230331082747-hwd9cl7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331082747-hwd9cl7",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-vetcncf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331082747-vetcncf",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "AbstractAutowireCapableBeanFactory#getSingletonFactoryBeanForTypeCheck"
								}
							]
						}
					]
				},
				{
					"ID": "20230331082747-hqdummy",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331082747-hqdummy",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-6c7b52g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331082747-6c7b52g",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "AbstractAutowireCapableBeanFactory#getNonSingletonFactoryBeanForTypeCheck"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331082747-jobqrzn",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331082747-jobqrzn",
				"updated": "20230331082747"
			}
		},
		{
			"ID": "20230331082747-6hzzxd4",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230331082747-6hzzxd4",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.2.2 initializeBean"
				}
			]
		},
		{
			"ID": "20230331082747-3risnt7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-3risnt7",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面介绍 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BP.postProcessBeforeInitialization"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的时候已经说了，所以这里不再赘述"
				}
			]
		},
		{
			"ID": "20230331082747-80qmaup",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331082747-80qmaup",
				"updated": "20230331082747"
			}
		},
		{
			"ID": "20230331082747-n3s0aa2",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230331082747-n3s0aa2",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.2.3 postProcessObjectFromFactoryBean"
				}
			]
		},
		{
			"ID": "20230331082747-1gmiw4c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-1gmiw4c",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "FactoryBeanRegistrySupport#getObjectFromFactoryBean"
				},
				{
					"Type": "NodeText",
					"Data": "​ 中调用，在从 FactoryBean 中获取 bean时调用，在此调用可以替换掉 FactoryBean 中的返回的bean。"
				}
			]
		},
		{
			"ID": "20230331082747-bbp8kdf",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331082747-bbp8kdf",
				"updated": "20230331082747"
			}
		},
		{
			"ID": "20230331082747-zvb2vwn",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230331082747-zvb2vwn",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3. SmartInstantiationAwareBeanPostProcessor"
				}
			]
		},
		{
			"ID": "20230331082747-n0kyotp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-n0kyotp",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SmartInstantiationAwareBeanPostProcessor"
				},
				{
					"Type": "NodeText",
					"Data": "​ 在 IBP 之上又扩展了三个方法，不过我们一般不会使用，所以这里简单叙述一下"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SmartInstantiationAwareBeanPostProcessor"
				},
				{
					"Type": "NodeText",
					"Data": "​ 三个方法的作用"
				}
			]
		},
		{
			"ID": "20230331082747-jyfbfg6",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230331082747-jyfbfg6",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"ID": "20230331082747-z1po8nj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331082747-z1po8nj",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-095fc3r",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331082747-095fc3r",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Class\u0026lt;?\u0026gt; predictBeanType(Class\u0026lt;?\u0026gt; beanClass, String beanName)"
								},
								{
									"Type": "NodeText",
									"Data": " ： 在进行bean类型匹配时调用，返回值和期望值进行匹配。"
								}
							]
						}
					]
				},
				{
					"ID": "20230331082747-dffyfjl",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331082747-dffyfjl",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-0q2rzvy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331082747-0q2rzvy",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Constructor\u0026lt;?\u0026gt;[] determineCandidateConstructors(Class\u0026lt;?\u0026gt; beanClass, String beanName)"
								},
								{
									"Type": "NodeText",
									"Data": " ： 在 Spring 加载bean 的时候，判断是否需要通过构造注入时，如果返回的值不为空，则进行有参构造注入。"
								}
							]
						},
						{
							"ID": "20230331082747-y6vla43",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230331082747-y6vla43",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "\t// determineConstructorsFromBeanPostProcessors 中调用了  determineCandidateConstructors 方法，如果ctors != null, 则进行有参构造autowireConstructor\n\t\tConstructor\u003c?\u003e[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);\n\t\tif (ctors != null || mbd.getResolvedAutowireMode() == AUTOWIRE_CONSTRUCTOR ||\n\t\t\t\tmbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args)) { \n\t\t\treturn autowireConstructor(beanName, mbd, ctors, args);\n\t\t}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20230331082747-ao9q67m",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230331082747-ao9q67m",
						"updated": "20230331082747"
					},
					"Children": [
						{
							"ID": "20230331082747-li1498w",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230331082747-li1498w",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Object getEarlyBeanReference(Object bean, String beanName)"
								},
								{
									"Type": "NodeText",
									"Data": " ： 在 Spring 解决循环依赖时候使用，返回的值将作为ObjectFactory 的 保存的Object，用于循环依赖的提前暴露。"
								}
							]
						},
						{
							"ID": "20230331082747-iqel2zs",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230331082747-iqel2zs",
								"updated": "20230331082747"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "\t\tif (earlySingletonExposure) { \n\t\t\tif (logger.isTraceEnabled()) { \n\t\t\t\tlogger.trace(\"Eagerly caching bean '\" + beanName +\n\t\t\t\t\t\t\"' to allow for resolving potential circular references\");\n\t\t\t}\n\t\t\t// getEarlyBeanReference 的返回值作为 ObjectFactory 的返回值保存到singletonFactories缓存中\n\t\t\taddSingletonFactory(beanName, () -\u003e getEarlyBeanReference(beanName, mbd, bean));\n\t\t}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230331082747-11nntnh",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331082747-11nntnh",
				"updated": "20230331082747"
			}
		},
		{
			"ID": "20230331082747-s0kid33",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-s0kid33",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "最后，附一张自己画的调用流程图，由于完全有本人自己阅读绘制，可能会出现些许纰漏，如果发现，麻烦指正，谢谢。"
				},
				{
					"Type": "NodeText",
					"Data": "\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "在这里插入图片描述"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/20200520211304257-20230331082746-5vqb3yl.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230331082747-ble8wvi",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230331082747-ble8wvi",
				"updated": "20230331082747"
			}
		},
		{
			"ID": "20230331082747-mdyo8mm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230331082747-mdyo8mm",
				"updated": "20230331082747"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "以上：内容部分参考《Spring源码深度解析》如有侵扰，联系删除。 内容仅用于自我记录学习使用。如有错误，欢迎指正"
				}
			]
		}
	]
}