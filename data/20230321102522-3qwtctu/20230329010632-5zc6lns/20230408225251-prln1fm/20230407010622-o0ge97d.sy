{
	"ID": "20230407010622-o0ge97d",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230407010622-o0ge97d",
		"title": "Spring AOP超详细解析_spring_YimBa-DevPress官方社区",
		"updated": "20230407010622"
	},
	"Children": [
		{
			"ID": "20230407010622-3uasgn3",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230407010622-3uasgn3",
				"updated": "20230407010622"
			}
		},
		{
			"ID": "20230407010622-kvxhy7y",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230407010622-kvxhy7y",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"ID": "20230407010622-qoo559n",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-qoo559n",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-14qoq7a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-14qoq7a",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://authing.csdn.net/637dc7ec9ebab8287a4f443c.html?spm=1001.2101.3001.6650.14\u0026utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-14-125092436-blog-124148760.235^v28^pc_relevant_recovery_v2\u0026depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-14-125092436-blog-124148760.235^v28^pc_relevant_recovery_v2\u0026utm_relevant_index=21",
									"TextMarkTextContent": "https://authing.csdn.net/637dc7ec9ebab8287a4f443c.html?spm=1001.2101.3001.6650.14\u0026amp;utm_medium=distribute.pc_relevant.none-task-blog-2"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a sub",
									"TextMarkAHref": "https://authing.csdn.net/637dc7ec9ebab8287a4f443c.html?spm=1001.2101.3001.6650.14\u0026utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-14-125092436-blog-124148760.235^v28^pc_relevant_recovery_v2\u0026depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-14-125092436-blog-124148760.235^v28^pc_relevant_recovery_v2\u0026utm_relevant_index=21",
									"TextMarkTextContent": "default"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://authing.csdn.net/637dc7ec9ebab8287a4f443c.html?spm=1001.2101.3001.6650.14\u0026utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-14-125092436-blog-124148760.235^v28^pc_relevant_recovery_v2\u0026depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-14-125092436-blog-124148760.235^v28^pc_relevant_recovery_v2\u0026utm_relevant_index=21",
									"TextMarkTextContent": "BlogCommendFromBaidu"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a sub",
									"TextMarkAHref": "https://authing.csdn.net/637dc7ec9ebab8287a4f443c.html?spm=1001.2101.3001.6650.14\u0026utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-14-125092436-blog-124148760.235^v28^pc_relevant_recovery_v2\u0026depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-14-125092436-blog-124148760.235^v28^pc_relevant_recovery_v2\u0026utm_relevant_index=21",
									"TextMarkTextContent": "activity-14-125092436-blog-124148760.235"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a sub sup",
									"TextMarkAHref": "https://authing.csdn.net/637dc7ec9ebab8287a4f443c.html?spm=1001.2101.3001.6650.14\u0026utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-14-125092436-blog-124148760.235^v28^pc_relevant_recovery_v2\u0026depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-14-125092436-blog-124148760.235^v28^pc_relevant_recovery_v2\u0026utm_relevant_index=21",
									"TextMarkTextContent": "v28"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a sub",
									"TextMarkAHref": "https://authing.csdn.net/637dc7ec9ebab8287a4f443c.html?spm=1001.2101.3001.6650.14\u0026utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-14-125092436-blog-124148760.235^v28^pc_relevant_recovery_v2\u0026depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-14-125092436-blog-124148760.235^v28^pc_relevant_recovery_v2\u0026utm_relevant_index=21",
									"TextMarkTextContent": "pc_relevant_recovery_v2\u0026amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://authing.csdn.net/637dc7ec9ebab8287a4f443c.html?spm=1001.2101.3001.6650.14\u0026utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-14-125092436-blog-124148760.235^v28^pc_relevant_recovery_v2\u0026depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-14-125092436-blog-124148760.235^v28^pc_relevant_recovery_v2\u0026utm_relevant_index=21",
									"TextMarkTextContent": "default"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a sub",
									"TextMarkAHref": "https://authing.csdn.net/637dc7ec9ebab8287a4f443c.html?spm=1001.2101.3001.6650.14\u0026utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-14-125092436-blog-124148760.235^v28^pc_relevant_recovery_v2\u0026depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-14-125092436-blog-124148760.235^v28^pc_relevant_recovery_v2\u0026utm_relevant_index=21",
									"TextMarkTextContent": "BlogCommendFromBaidu"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://authing.csdn.net/637dc7ec9ebab8287a4f443c.html?spm=1001.2101.3001.6650.14\u0026utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-14-125092436-blog-124148760.235^v28^pc_relevant_recovery_v2\u0026depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-14-125092436-blog-124148760.235^v28^pc_relevant_recovery_v2\u0026utm_relevant_index=21",
									"TextMarkTextContent": "activity-14-125092436-blog-124148760.235"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a sup",
									"TextMarkAHref": "https://authing.csdn.net/637dc7ec9ebab8287a4f443c.html?spm=1001.2101.3001.6650.14\u0026utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-14-125092436-blog-124148760.235^v28^pc_relevant_recovery_v2\u0026depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-14-125092436-blog-124148760.235^v28^pc_relevant_recovery_v2\u0026utm_relevant_index=21",
									"TextMarkTextContent": "v28"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://authing.csdn.net/637dc7ec9ebab8287a4f443c.html?spm=1001.2101.3001.6650.14\u0026utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-14-125092436-blog-124148760.235^v28^pc_relevant_recovery_v2\u0026depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-14-125092436-blog-124148760.235^v28^pc_relevant_recovery_v2\u0026utm_relevant_index=21",
									"TextMarkTextContent": "pc_relevant_recovery_v2\u0026amp;utm_relevant_index=21"
								}
							]
						}
					]
				},
				{
					"ID": "20230407010622-6nyv6mq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-6nyv6mq",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-mc8nluw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-mc8nluw",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "AOP、IOC、面向切面编程、控制反转、循环依赖、字节码增强、从对象A直接引用和操作对象B，变成对象A里只需要依赖一个接口IB，系统启动和装配阶段，把IB接口的实例对象注入到对象A，这样A就不需要依赖一个IB接口的具体实现，也就是类B。从而可以实现在不修改代码的情况，修改配置文件，即可以运行时替换成注入IB接口另一实现类C的一个对象实例。AOP：假如说在里面做了AOP，这时候拿到的是一个代理类，或 YimBa DevPress官方社区"
								}
							]
						}
					]
				},
				{
					"ID": "20230407010622-2wvs9rl",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-2wvs9rl",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-bowh0ir",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-bowh0ir",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2023-04-07 01:06:22"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230407010622-z9z0oee",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230407010622-z9z0oee",
				"updated": "20230407010622"
			}
		},
		{
			"ID": "20230407010622-giabdt5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-giabdt5",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://authing.csdn.net/",
					"TextMarkTextContent": "Authing身份云"
				},
				{
					"Type": "NodeText",
					"Data": " "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Spring AOP超详细解析"
				}
			]
		},
		{
			"ID": "20230407010622-jwvghlx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-jwvghlx",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "cover"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/cdda77cb148c4412b55ee4bfc1b1f976-20230407010621-0dt8xvc.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230407010622-sale9pq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-sale9pq",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "AOP、IOC、面向切面编程、控制反转、循环依赖、字节码增强、从对象A直接引用和操作对象B，变成对象A里只需要依赖一个接口IB，系统启动和装配阶段，把IB接口的实例对象注入到对象A，这样A就不需要依赖一个IB接口的具体实现，也就是类B。从而可以实现在不修改代码的情况，修改配置文件，即可以运行时替换成注入IB接口另一实现类C的一个对象实例。AOP：假如说在里面做了AOP，这时候拿到的是一个代理类，或"
				}
			]
		},
		{
			"ID": "20230407010622-4h485dv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-4h485dv",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/1_yimba-20230407010621-8u35pvq.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "YimBa"
				},
				{
					"Type": "NodeText",
					"Data": " · 2022-06-01 23:29:30"
				}
			]
		},
		{
			"ID": "20230407010622-oe8fwso",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230407010622-oe8fwso",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"ID": "20230407010622-xrk8eqg",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-xrk8eqg",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-xt7xo4a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-xt7xo4a",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "即Bean本身的管理创建，以及它整个生命周期里跟其他对象相互之间引用装配"
								}
							]
						}
					]
				},
				{
					"ID": "20230407010622-ndumnqn",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-ndumnqn",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-an032ar",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-an032ar",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "为了更好的实现Bean的管理装配，特别是需要对他做一些增强。所以在可以不改变原来这些Bean本身的定义功能的前提下，进一步把需要增强的的部分、需要额外处理的部分。通过这个中间层来解决。做增强的这个中间层这个面就是所谓的切面。"
								}
							]
						}
					]
				},
				{
					"ID": "20230407010622-pb1x7s4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-pb1x7s4",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-bixizqi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-bixizqi",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "计算机领域有一句至理名言：计算机领域的任何问题都可以通过增加一个中间层来解决。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230407010622-naczzqr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-naczzqr",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从对象A直接引用和操作对象B，变成对象A里只需要依赖一个接口IB，系统启动和装配阶段，把IB接口的实例对象注入到对象A，这样A就不需要依赖一个IB接口的具体实现，也就是类B。"
				}
			]
		},
		{
			"ID": "20230407010622-whm1wyt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-whm1wyt",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从而可以实现在不修改代码的情况，修改配置文件，即可以运行时替换成注入IB接口另一实现类C的一个对象实例。"
				}
			]
		},
		{
			"ID": "20230407010622-0r8u4p4",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230407010622-0r8u4p4",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"ID": "20230407010622-wjrrmmh",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-wjrrmmh",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-0x6tgyi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-0x6tgyi",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "为什么叫DI："
								}
							]
						},
						{
							"ID": "20230407010622-3sqy65d",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230407010622-3sqy65d",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"ID": "20230407010622-c7sewkd",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230407010622-c7sewkd",
										"updated": "20230407010622"
									},
									"Children": [
										{
											"ID": "20230407010622-h4qsmxt",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230407010622-h4qsmxt",
												"updated": "20230407010622"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "正常情况下写一个接口，在一个包或者某一个类里需要用到它具体的一个实现类，写在另外一个包里。"
												}
											]
										}
									]
								},
								{
									"ID": "20230407010622-76vqoj9",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230407010622-76vqoj9",
										"updated": "20230407010622"
									},
									"Children": [
										{
											"ID": "20230407010622-2xek77s",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230407010622-2xek77s",
												"updated": "20230407010622"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "在常规编程中，我们需要在定义这个接口使用的地方，直接new出来这个接口的实现类，这样的话，上层就需要依赖下层的某个东西。"
												}
											]
										}
									]
								},
								{
									"ID": "20230407010622-8peej8h",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230407010622-8peej8h",
										"updated": "20230407010622"
									},
									"Children": [
										{
											"ID": "20230407010622-cn7xfsd",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230407010622-cn7xfsd",
												"updated": "20230407010622"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "实际上我们更期望这个灵活的编程模型能够做到：在上层使用的时候定义一个接口，我们现在不管他实现类是什么，在运行期只要有一个实现类塞进来，就可以装配进去，放在这里使用。"
												}
											]
										}
									]
								},
								{
									"ID": "20230407010622-cz8frfd",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230407010622-cz8frfd",
										"updated": "20230407010622"
									},
									"Children": [
										{
											"ID": "20230407010622-u33l0gy",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230407010622-u33l0gy",
												"updated": "20230407010622"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "相当于装修房子：先在墙上留出来一个位置，准备放一幅画。只要把这个位置大小留好了，那幅画最终入住的时候放进来，是油画、水彩、素描都可以。只要我们留出来这个位置是合适的。那么在前期装修房子的时候，先就不用特别关注于这一小块，到底以后用什么类型的画。"
												}
											]
										}
									]
								},
								{
									"ID": "20230407010622-u1f80wq",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230407010622-u1f80wq",
										"updated": "20230407010622"
									},
									"Children": [
										{
											"ID": "20230407010622-zxsziwk",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230407010622-zxsziwk",
												"updated": "20230407010622"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "这么做还有一个好处：就是当装修完房子以后，发现我现在放的这幅油画我不喜欢了，我就随时可以使用一个水彩画替换掉这个油画。"
												}
											]
										}
									]
								},
								{
									"ID": "20230407010622-c3a0vhw",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230407010622-c3a0vhw",
										"updated": "20230407010622"
									},
									"Children": [
										{
											"ID": "20230407010622-9ngkajp",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230407010622-9ngkajp",
												"updated": "20230407010622"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "也就是说当我们实现依赖注入（控制反转）的方式装配对象，那么在运行期可以不去改我们的代码，改一下装配、配置这块的一些配置（配置文件、注解等），就可以把我们在运行期实际上这一块这个位置上使用的东西直接给替换掉。"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230407010622-etu6qxe",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-etu6qxe",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-8im2opu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-8im2opu",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "场景一：比如说一个对象（A），里面需要用某个接口，这个接口它实际的实现类需要用到（B）的实例，（B）里面某个属性需要用一个接口，那个接口他的具体实现类是（A）。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230407010622-jhm4mzd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-jhm4mzd",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "AOP：假如说在里面做了AOP，这时候拿到的是一个代理类，或者增强的一个运行期生成的子类，中间做一层代理，那么更可以解决所谓的循环依赖的问题。"
				}
			]
		},
		{
			"ID": "20230407010622-wkwhsri",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230407010622-wkwhsri",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"ID": "20230407010622-ian14ep",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-ian14ep",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-wywjwxw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-wywjwxw",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "场景二：A对象在构造函数里需要传进来：一个B对象才能初始化（或者一个接口，接口实例是B，才能初始化），反过来B也需要再new出来它的实例，构造函数里面，参数要传一个A才能初始化。这个时候Spring就没办法解决了。常规的编写Java代码也解决不了。"
								}
							]
						},
						{
							"ID": "20230407010622-vp0metm",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230407010622-vp0metm",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"ID": "20230407010622-u5xvvuw",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230407010622-u5xvvuw",
										"updated": "20230407010622"
									},
									"Children": [
										{
											"ID": "20230407010622-nmvakiv",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230407010622-nmvakiv",
												"updated": "20230407010622"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "这两个东西相当于死锁了，每个对象自己创建一个实例的时候，都需要另外的那个对象，另一个对象也没有，有需要这个对象。这样来回调就会导致堆栈溢出了。"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230407010622-qk6pulm",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-qk6pulm",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-cwb0l9f",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-cwb0l9f",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "所以常规说，属性之间的这种循环依赖，Spring是可以解决的。构造器里产生的循环依赖Spring是解决不了的。"
								}
							]
						}
					]
				},
				{
					"ID": "20230407010622-gnp0mfp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-gnp0mfp",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-sd918aw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-sd918aw",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "循环依赖本质原因是会导致死锁（频繁调用或来来回回的赋值都会导致死锁），所以要尽量避免。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230407010622-uhjpezo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-uhjpezo",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/b193af768f7e47b28ae4528f518fc257-20230407010621-k2f30px.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230407010622-acb4mtj",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230407010622-acb4mtj",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"ID": "20230407010622-nogda9n",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-nogda9n",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-dhhjolk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-dhhjolk",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "JdkProxy：假如说这个对象所在的类上面有接口（基于接口来做的），Spring会默认使用JdkProxy（JDK的动态代理），来生成一个代理，在代理里进一步的把所有对这个类做的增强操作，放到代理执行的代码里面。然后先做了增强的操作，再去调用原本的类的他的方法。"
								}
							]
						}
					]
				},
				{
					"ID": "20230407010622-n50q7u7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-n50q7u7",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-qlj8879",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-qlj8879",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "proxyTargetClass：如果要代理的类有接口但想强制不用默认JDK的动态代理，也是用字节码增强的技术，就可以开启proxyTargetClass选项。同CGlib。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230407010622-9z1oe7w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-9z1oe7w",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/062691092f864e76b55649315795c934-20230407010621-zcq996g.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230407010622-2y10xh7",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230407010622-2y10xh7",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"ID": "20230407010622-sh13hu7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-sh13hu7",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-87dlpus",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-87dlpus",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "CGlib：假如说要增强或代理的这个类没有接口，只有一个类的定义，Spring会默认使用CGlib，对他做字节码增强。相当于硬生生的给他生成一个子类。在这个子类里，当我们调用原先这个类的某个方法时，先做增强操作，再去调原本类的方法，最后再把结果返回回来。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230407010622-3qobvmy",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230407010622-3qobvmy",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"ID": "20230407010622-32uukvg",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230407010622-32uukvg",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-avl9ho4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-avl9ho4",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@Autowired(required = true)：默认是按类型注入。required=true表示启动的时候就找该对象（就是把他先配置好）还是当我们去调用该对象（调用某个属性或者某个方法）时，再看他要不要装配（懒加载）。"
								}
							]
						}
					]
				},
				{
					"ID": "20230407010622-bdpw3u2",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230407010622-bdpw3u2",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-g74nerq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-g74nerq",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@Resource(name = \"student\")：默认按名字注入"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230407010622-f98txre",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230407010622-f98txre",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"ID": "20230407010622-67xghw4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-67xghw4",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-08fxfhc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-08fxfhc",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "代码+XML：around、before、after"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230407010622-7werz7o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-7werz7o",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/fb97a50647784dc3a93ae1d0716aadec-20230407010621-a52lj4v.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230407010622-k98xbge",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-k98xbge",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/808a110be7d240eb85436b647a933c95-20230407010621-mdctks0.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230407010622-kxixjr4",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230407010622-kxixjr4",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"ID": "20230407010622-cp2rk0v",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-cp2rk0v",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-n16z9a7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-n16z9a7",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "全注解："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230407010622-9b2pv73",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-9b2pv73",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/1d9cd8664dc74bf6a7ae075279c1a553-20230407010621-e8vt3kx.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230407010622-2ywwcn0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-2ywwcn0",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "同时配置文件开启自动代理："
				}
			]
		},
		{
			"ID": "20230407010622-88ho5aj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-88ho5aj",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/347929992e304406a8b6479551d1d24f-20230407010621-fntj1sn.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230407010622-hwn4fss",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230407010622-hwn4fss",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"ID": "20230407010622-btfrp07",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-btfrp07",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-ogemmtg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-ogemmtg",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在调用service具体一些业务方法的时候，想在前面打一些日志。"
								}
							]
						}
					]
				},
				{
					"ID": "20230407010622-hatk5l0",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-hatk5l0",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-uezuj2d",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-uezuj2d",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "通过前后两次取时间戳来减一下，来统计所有业务方法执行的时间。"
								}
							]
						}
					]
				},
				{
					"ID": "20230407010622-r9yrcej",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-r9yrcej",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-l44x8qg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-l44x8qg",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在调用某一类业务方法时，判断用户有没有权限。"
								}
							]
						}
					]
				},
				{
					"ID": "20230407010622-ismwdwm",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-ismwdwm",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-4iru26i",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-4iru26i",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在一系列业务方法前后加上事务的控制。"
								}
							]
						},
						{
							"ID": "20230407010622-hj0j22o",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230407010622-hj0j22o",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"ID": "20230407010622-73fxrqs",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230407010622-73fxrqs",
										"updated": "20230407010622"
									},
									"Children": [
										{
											"ID": "20230407010622-u0qjf4m",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230407010622-u0qjf4m",
												"updated": "20230407010622"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "比如startTransaction、commitTransaction（模拟事务控制）。"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230407010622-x3rq3ln",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-x3rq3ln",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/11794f5a0e894e6788ed0a8f277405c0-20230407010621-fyh4dvy.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230407010622-yrnxs5p",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230407010622-yrnxs5p",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"ID": "20230407010622-ml6jdi4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-ml6jdi4",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-0kgmefm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-0kgmefm",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在面向对象里，先定义一个对象，然后显式调用对象的方法，或者基于接口调用具体某个对象的方法，这时所有操作都是显式的。写代码的时候就必须知道这个方法有，而且能够调用这个方法，调的到他。"
								}
							]
						}
					]
				},
				{
					"ID": "20230407010622-be3bl4u",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-be3bl4u",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-6qz0w5t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-6qz0w5t",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "反射：很多时候我们要操作一批对象，这批对象给过来的时候，我们都不知道他具体的类型（比如传参都是Object），但是我们约定好了，不管是什么类型，他都有一个ding()方法，这个方法参数是空的，这个时候就可以通过反射的方式，用这些对象.getClass()，.getMethod(\"ding\")获取到具体的ding方法。然后再通过反射：method.invoke()来执行ding方法，这样一来反射相当于在某种程度上破坏了单纯的面向对象这个良好的封装。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230407010622-9775gls",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-9775gls",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "// 创建对象"
				}
			]
		},
		{
			"ID": "20230407010622-o4wmx17",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-o4wmx17",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Object"
				},
				{
					"Type": "NodeText",
					"Data": " instance=clazz.getDeclaredConstructor().newInstance();"
				}
			]
		},
		{
			"ID": "20230407010622-m397gi8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-m397gi8",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "// 执行方法"
				}
			]
		},
		{
			"ID": "20230407010622-5in7e4c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-5in7e4c",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Method"
				},
				{
					"Type": "NodeText",
					"Data": " method=clazz.getMethod(methodName);"
				}
			]
		},
		{
			"ID": "20230407010622-2lu0fyv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-2lu0fyv",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "method.invoke(instance);"
				}
			]
		},
		{
			"ID": "20230407010622-h6gcsgn",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230407010622-h6gcsgn",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"ID": "20230407010622-5py3vr8",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-5py3vr8",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-mcrmq0b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-mcrmq0b",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "面向对象在我们看来，就想医生给病人做检查的时候，通过外部来看一下（起色，体温等）。反射相当于拍CT、拍X光片，胃镜等深入到内部去吧内部的一些信息通过反射的东西窥探出来。"
								}
							]
						}
					]
				},
				{
					"ID": "20230407010622-coyolxw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-coyolxw",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-gud4uyy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-gud4uyy",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不管是面向对象本身的显式调用还是反射这种隐式调用的方式，都是在对象现有的结构上做的，但是字节码操作不同。他是在运行期，通过在内存里拼一个新的类型，这种类型需要的字节码就相当于动态的创建出来了一个新的类。"
								}
							]
						}
					]
				},
				{
					"ID": "20230407010622-yg5p0cy",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-yg5p0cy",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-lzso0nn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-lzso0nn",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "还是拿看病举例：字节码技术相当于创造了新的基因，创造了新的物种。凭空创造出了一个新的个体出来了。"
								}
							]
						}
					]
				},
				{
					"ID": "20230407010622-qvq4kk7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-qvq4kk7",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-7qmyoh8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-7qmyoh8",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "既然字节码技术能够创建出来一些新的类型，继承原有老的类型。即在运行期动态创建一些子类型。那有没有一种技术可以直接修改jar包里的一些字节码？---\u003e"
								}
							]
						}
					]
				},
				{
					"ID": "20230407010622-95bwdnk",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-95bwdnk",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-3unfn08",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-3unfn08",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Jdk的新技术：Instrumentation。作用在JVM加载一个jar包，把jar包完整的加载到内存之前的一个预处理的步骤上，通过Java Agent技术，就可以再中间拦一层，跟AOP类似，但他是AOP在整个JVM上。就可以把Jar包在往JVM加载的时候中间在agent层做一次预处理，就可以把原先Jar包里的一些字节码直接给替换掉。"
								}
							]
						}
					]
				},
				{
					"ID": "20230407010622-nlal6jv",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-nlal6jv",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-yu22xt5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-yu22xt5",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "这个技术就相当于在字节码技术创建新物种的程度上更深入了一层，可以直接替换现有的一些生物个体他们内部的基因片段。"
								}
							]
						}
					]
				},
				{
					"ID": "20230407010622-3mf3cq6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-3mf3cq6",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-vvwto2p",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407010622-vvwto2p",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "常见的应用场景："
								}
							]
						},
						{
							"ID": "20230407010622-e8nltaa",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230407010622-e8nltaa",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"ID": "20230407010622-gyu6fsi",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230407010622-gyu6fsi",
										"updated": "20230407010622"
									},
									"Children": [
										{
											"ID": "20230407010622-rtc3zmu",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230407010622-rtc3zmu",
												"updated": "20230407010622"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "APM"
												}
											]
										}
									]
								},
								{
									"ID": "20230407010622-hez3ne9",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230407010622-hez3ne9",
										"updated": "20230407010622"
									},
									"Children": [
										{
											"ID": "20230407010622-kmj4tqu",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230407010622-kmj4tqu",
												"updated": "20230407010622"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "应用性能监控、全链路监控"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230407010622-z0ym9m9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-z0ym9m9",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://devpress.csdn.net/tags/629eeece512a562a4284974f",
					"TextMarkTextContent": "# spring"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://devpress.csdn.net/tags/6285d1c2c1ec42381adc3bd6",
					"TextMarkTextContent": "# java"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://devpress.csdn.net/tags/627657859c0c6c733bf40b54",
					"TextMarkTextContent": "# 后端"
				}
			]
		},
		{
			"ID": "20230407010622-cion7hw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-cion7hw",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Logo"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-c817d6c15ace4050a9bb4f7ed763be5b-20230407010622-cuzjo3o.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://authing.csdn.net/",
					"TextMarkTextContent": "https://authing.csdn.net/"
				}
			]
		},
		{
			"ID": "20230407010622-wzhc00j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-wzhc00j",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://authing.csdn.net/",
					"TextMarkTextContent": "Authing身份云"
				}
			]
		},
		{
			"ID": "20230407010622-1iaat7m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-1iaat7m",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Authing 是一款以开发者为中心的全场景身份云产品，集成了所有主流身份认证协议，为企业和开发者提供完善安全的用户认证和访问管理服务"
				}
			]
		},
		{
			"ID": "20230407010622-uy1l6xt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-uy1l6xt",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "更多推荐"
				}
			]
		},
		{
			"ID": "20230407010622-95eunrw",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230407010622-95eunrw",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"ID": "20230407010622-pi3zwx0",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-pi3zwx0",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-u5ls6bg",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230407010622-u5ls6bg",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "       ·           [Authing 全球视野助力快用云科扬帆起航 ｜ 客户案例](https://authing.csdn.net/6423e6962bcaa918ade99a32.html)\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20230407010622-aqc29xy",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-aqc29xy",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-1t2pb1p",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230407010622-1t2pb1p",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "       ·           [最佳实践｜ 探索 Authing 企业级云原生权限治理平台](https://authing.csdn.net/641aea912bcaa918ade99993.html)\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				},
				{
					"ID": "20230407010622-d2k6645",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407010622-d2k6645",
						"updated": "20230407010622"
					},
					"Children": [
						{
							"ID": "20230407010622-3kddi1s",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230407010622-3kddi1s",
								"updated": "20230407010622"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "       ·           [Authing 入选金融信创生态实验室《金融信创优秀解决方案》](https://authing.csdn.net/6423db497de2bc0e53e30329.html)\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230407010622-wi62kye",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-wi62kye",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "cover"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/8ee222ccd9cc4879985c53c45e5a653d-20230407010621-vbe324b.jpeg"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://authing.csdn.net/6423e6962bcaa918ade99a32.html",
					"TextMarkTextContent": "Authing 全球视野助力快用云科扬帆起航 ｜ 客户案例  "
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "avatar"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-ab2289ad6a904336b333d15440b6afbb-20230407010622-6veiwix.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://authing.csdn.net/",
					"TextMarkTextContent": "https://authing.csdn.net/Authing身份云"
				}
			]
		},
		{
			"ID": "20230407010622-ytdtcfj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-ytdtcfj",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "cover"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/81169b39a4974ae4809c040dea22d1ea-20230407010621-vr8nbb1.jpeg"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://authing.csdn.net/641aea912bcaa918ade99993.html",
					"TextMarkTextContent": "最佳实践｜ 探索 Authing 企业级云原生权限治理平台  "
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "avatar"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-ab2289ad6a904336b333d15440b6afbb-20230407010622-pbn4pda.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://authing.csdn.net/",
					"TextMarkTextContent": "https://authing.csdn.net/Authing身份云"
				}
			]
		},
		{
			"ID": "20230407010622-718p8rd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-718p8rd",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "cover"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/ae89abeabc004a7684963c28c67194f1-20230407010621-rjmf2jw.jpeg"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://authing.csdn.net/6423db497de2bc0e53e30329.html",
					"TextMarkTextContent": "Authing 入选金融信创生态实验室《金融信创优秀解决方案》  "
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "avatar"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-ab2289ad6a904336b333d15440b6afbb-20230407010622-iw6in11.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://authing.csdn.net/",
					"TextMarkTextContent": "https://authing.csdn.net/Authing身份云"
				}
			]
		},
		{
			"ID": "20230407010622-j4utcxr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-j4utcxr",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/1_yimba-20230407010621-8u35pvq.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230407010622-u7t67zp",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230407010622-u7t67zp",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "YimBa"
				}
			]
		},
		{
			"ID": "20230407010622-vfitfs0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-vfitfs0",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/devote.fe704c8a-20230407010621-6euh9tq.svg"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "           已为社区贡献1条内容"
				}
			]
		},
		{
			"ID": "20230407010622-mbspb9g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-mbspb9g",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "产品推荐"
				}
			]
		},
		{
			"ID": "20230407010622-f36az1p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-f36az1p",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://authing.co/learn/sso?login=from_csdn",
					"TextMarkTextContent": "单点登录 SSO"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://authing.co/mfa?login=from_csdn",
					"TextMarkTextContent": "多因素认证 MFA"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://authing.co/gateway-integration?login=from_csdn",
					"TextMarkTextContent": "应用集成网关"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://www.authing.cn/authorization-management?login=from_csdn",
					"TextMarkTextContent": "权限管理"
				}
			]
		},
		{
			"ID": "20230407010622-rywm3w9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-rywm3w9",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "运营活动"
				}
			]
		},
		{
			"ID": "20230407010622-85d2as5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407010622-85d2as5",
				"updated": "20230407010622"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "目录"
				}
			]
		}
	]
}