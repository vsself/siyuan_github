{
	"ID": "20230407011441-1dvvh3y",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230407011441-1dvvh3y",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230407011441-ouko8rv\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230407011441-dlia9kz\u0026quot;,\u0026quot;scrollTop\u0026quot;:800}",
		"title": "[Spring]AOP简介及简单案例应用实现_springaop应用实例_不知迷踪的博客-CSDN博客",
		"updated": "20230407011441"
	},
	"Children": [
		{
			"ID": "20230407011441-ouko8rv",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230407011441-ouko8rv",
				"updated": "20230407011441"
			}
		},
		{
			"ID": "20230407011441-b4buiag",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230407011441-b4buiag",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"ID": "20230407011441-d8b13jb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407011441-d8b13jb",
						"updated": "20230407011441"
					},
					"Children": [
						{
							"ID": "20230407011441-hmh5wj6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407011441-hmh5wj6",
								"updated": "20230407011441"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/weixin_59798969/article/details/126708368",
									"TextMarkTextContent": "https://blog.csdn.net/weixin_59798969/article/details/126708368"
								}
							]
						}
					]
				},
				{
					"ID": "20230407011441-7q3zj23",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407011441-7q3zj23",
						"updated": "20230407011441"
					},
					"Children": [
						{
							"ID": "20230407011441-fp594zc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407011441-fp594zc",
								"updated": "20230407011441"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "AOP（Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现在不修改源代码的情况下给程序动态统一添加额外功能的一种技术。"
								}
							]
						}
					]
				},
				{
					"ID": "20230407011441-lnquu4w",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407011441-lnquu4w",
						"updated": "20230407011441"
					},
					"Children": [
						{
							"ID": "20230407011441-zljde6z",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407011441-zljde6z",
								"updated": "20230407011441"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2023-04-07 01:14:41"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230407011441-uaq8xuo",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230407011441-uaq8xuo",
				"updated": "20230407011441"
			}
		},
		{
			"ID": "20230407011441-rezxdgo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-rezxdgo",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "目录"
				}
			]
		},
		{
			"ID": "20230407011441-ei0tfx4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-ei0tfx4",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/weixin_59798969/article/details/126708368#t0",
					"TextMarkTextContent": "1.AOP简述"
				}
			]
		},
		{
			"ID": "20230407011441-92e7iov",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-92e7iov",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/weixin_59798969/article/details/126708368#t1",
					"TextMarkTextContent": " 2.相关术语"
				}
			]
		},
		{
			"ID": "20230407011441-iv9kl3a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-iv9kl3a",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/weixin_59798969/article/details/126708368#t2",
					"TextMarkTextContent": "2.1横切关注点 "
				}
			]
		},
		{
			"ID": "20230407011441-eulvi5t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-eulvi5t",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/weixin_59798969/article/details/126708368#t3",
					"TextMarkTextContent": " 2.2通知"
				}
			]
		},
		{
			"ID": "20230407011441-aoozjt5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-aoozjt5",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/weixin_59798969/article/details/126708368#t4",
					"TextMarkTextContent": "2.3切面 "
				}
			]
		},
		{
			"ID": "20230407011441-i2lt7mt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-i2lt7mt",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/weixin_59798969/article/details/126708368#t5",
					"TextMarkTextContent": "2.4目标 "
				}
			]
		},
		{
			"ID": "20230407011441-bsjr72i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-bsjr72i",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/weixin_59798969/article/details/126708368#t6",
					"TextMarkTextContent": "2.5代理"
				}
			]
		},
		{
			"ID": "20230407011441-z732peu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-z732peu",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/weixin_59798969/article/details/126708368#t7",
					"TextMarkTextContent": "2.6连接点"
				}
			]
		},
		{
			"ID": "20230407011441-mdfj25g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-mdfj25g",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/weixin_59798969/article/details/126708368#t8",
					"TextMarkTextContent": "2.7切入点 "
				}
			]
		},
		{
			"ID": "20230407011441-breyuho",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-breyuho",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/weixin_59798969/article/details/126708368#t9",
					"TextMarkTextContent": "2.8作用"
				}
			]
		},
		{
			"ID": "20230407011441-9cy6wd5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-9cy6wd5",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/weixin_59798969/article/details/126708368#t10",
					"TextMarkTextContent": "2.9切入点表达式语法"
				}
			]
		},
		{
			"ID": "20230407011441-qq1c8qg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-qq1c8qg",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/weixin_59798969/article/details/126708368#t11",
					"TextMarkTextContent": "3.基于注解的AOP"
				}
			]
		},
		{
			"ID": "20230407011441-sfa5u3t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-sfa5u3t",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/weixin_59798969/article/details/126708368#t12",
					"TextMarkTextContent": "3.1技术说明"
				}
			]
		},
		{
			"ID": "20230407011441-pkmzwzp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-pkmzwzp",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/weixin_59798969/article/details/126708368#t13",
					"TextMarkTextContent": "3.2添加依赖"
				}
			]
		},
		{
			"ID": "20230407011441-8dpsxjc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-8dpsxjc",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/weixin_59798969/article/details/126708368#t14",
					"TextMarkTextContent": "3.3准备被代理的目标资源"
				}
			]
		},
		{
			"ID": "20230407011441-o0cvdx0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-o0cvdx0",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/weixin_59798969/article/details/126708368#t15",
					"TextMarkTextContent": "3.31接口"
				}
			]
		},
		{
			"ID": "20230407011441-0s2va15",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-0s2va15",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/weixin_59798969/article/details/126708368#t16",
					"TextMarkTextContent": "3.32实现类"
				}
			]
		},
		{
			"ID": "20230407011441-ebbipoe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-ebbipoe",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/weixin_59798969/article/details/126708368#t17",
					"TextMarkTextContent": "3.4创建切面类并配置"
				}
			]
		},
		{
			"ID": "20230407011441-mjs3nzo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-mjs3nzo",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/weixin_59798969/article/details/126708368#t18",
					"TextMarkTextContent": "3.5IOC容器管理"
				}
			]
		},
		{
			"ID": "20230407011441-6db4go5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-6db4go5",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/weixin_59798969/article/details/126708368#t19",
					"TextMarkTextContent": "3.6测试类"
				}
			]
		},
		{
			"ID": "20230407011441-adnyml1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-adnyml1",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/weixin_59798969/article/details/126708368#t20",
					"TextMarkTextContent": " 4.基于XML的AOP（了解）"
				}
			]
		},
		{
			"ID": "20230407011441-p3j6oct",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-p3j6oct",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/weixin_59798969/article/details/126708368#t21",
					"TextMarkTextContent": "4.1切面类"
				}
			]
		},
		{
			"ID": "20230407011441-cgck376",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-cgck376",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/weixin_59798969/article/details/126708368#t22",
					"TextMarkTextContent": "4.2IOC容器管理"
				}
			]
		},
		{
			"ID": "20230407011441-ylotwcp",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230407011441-ylotwcp",
				"updated": "20230407011441"
			}
		},
		{
			"ID": "20230407011441-376611b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-376611b",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/icon-default-20230407011441-rpz3h85.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/weixin_59798969/article/details/126606492?spm=1001.2014.3001.5502",
					"TextMarkATitle": "代理模式的简介及动态代理应用——AOP的前置_不知迷踪的博客-CSDN博客",
					"TextMarkTextContent": "代理模式的简介及动态代理应用——AOP的前置_不知迷踪的博客-CSDN博客https://blog.csdn.net/weixin_59798969/article/details/126606492?spm=1001.2014.3001.5502"
				}
			]
		},
		{
			"ID": "20230407011441-u70yaum",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230407011441-u70yaum",
				"updated": "20230407011441"
			}
		},
		{
			"ID": "20230407011441-31n9yhr",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230407011441-31n9yhr",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230407011441-tey2f3u",
					"Type": "NodeHeading",
					"HeadingLevel": 2,
					"Properties": {
						"id": "20230407011441-tey2f3u",
						"updated": "20230407011441"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "1.AOP简述"
						}
					]
				}
			]
		},
		{
			"ID": "20230407011441-6m98h9s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-6m98h9s",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "AOP（Aspect Oriented Programming）是一种​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "设计思想"
				},
				{
					"Type": "NodeText",
					"Data": "​，是软件设计领域中的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "面向切面"
				},
				{
					"Type": "NodeText",
					"Data": "编程，它是面向对象编程的一种补充和完善，它以通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "预编译方式"
				},
				{
					"Type": "NodeText",
					"Data": "和运行期"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "动态代理方式"
				},
				{
					"Type": "NodeText",
					"Data": "实现在不修改源代码的情况下给程序动态统一添加额外功能的一种技术。"
				}
			]
		},
		{
			"ID": "20230407011441-iypvqor",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230407011441-iypvqor",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230407011441-x87s176",
					"Type": "NodeHeading",
					"HeadingLevel": 2,
					"Properties": {
						"id": "20230407011441-x87s176",
						"updated": "20230407011441"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "2.相关术语"
						}
					]
				}
			]
		},
		{
			"ID": "20230407011441-nd1adtb",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230407011441-nd1adtb",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "2.1横切关注点"
				}
			]
		},
		{
			"ID": "20230407011441-uelb3in",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230407011441-uelb3in",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"ID": "20230407011441-9okagj3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407011441-9okagj3",
						"updated": "20230407011441"
					},
					"Children": [
						{
							"ID": "20230407011441-x33dkap",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407011441-x33dkap",
								"updated": "20230407011441"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "从每个方法中抽取出来的同一类非核心业务。在同一个项目中，我们可以使用多个横切关注点对相关方法进行多个不同方面的增强。"
								}
							]
						}
					]
				},
				{
					"ID": "20230407011441-3w63mot",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407011441-3w63mot",
						"updated": "20230407011441"
					},
					"Children": [
						{
							"ID": "20230407011441-d5pn0mc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407011441-d5pn0mc",
								"updated": "20230407011441"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "这个概念不是语法层面天然存在的，而是根据附加功能的逻辑上的需要：有十个附加功能，就有十个横切关注点。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230407011441-bqq3qsi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-bqq3qsi",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/84342db8e5ac4d1684281901c0cf1861-20230407011441-0s5qgi3.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230407011441-25wl3n7",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230407011441-25wl3n7",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.2通知"
				}
			]
		},
		{
			"ID": "20230407011441-02weo14",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-02weo14",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "每一个横切关注点上要做的事情都需要写一个方法来实现，这样的方法就叫通知方法。"
				}
			]
		},
		{
			"ID": "20230407011441-1po56q8",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230407011441-1po56q8",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"ID": "20230407011441-bg0ry3y",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407011441-bg0ry3y",
						"updated": "20230407011441"
					},
					"Children": [
						{
							"ID": "20230407011441-ok3g8yw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407011441-ok3g8yw",
								"updated": "20230407011441"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "前置通知：在被代理的目标方法前执行"
								}
							]
						}
					]
				},
				{
					"ID": "20230407011441-gx3dyvp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407011441-gx3dyvp",
						"updated": "20230407011441"
					},
					"Children": [
						{
							"ID": "20230407011441-4x9uu5k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407011441-4x9uu5k",
								"updated": "20230407011441"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "返回通知：在被代理的目标方法成功结束后执行（寿终正寝）"
								}
							]
						}
					]
				},
				{
					"ID": "20230407011441-eeklrx3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407011441-eeklrx3",
						"updated": "20230407011441"
					},
					"Children": [
						{
							"ID": "20230407011441-aqxitjt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407011441-aqxitjt",
								"updated": "20230407011441"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "异常通知：在被代理的目标方法异常结束后执行（死于非命）"
								}
							]
						}
					]
				},
				{
					"ID": "20230407011441-tgahhq8",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407011441-tgahhq8",
						"updated": "20230407011441"
					},
					"Children": [
						{
							"ID": "20230407011441-wxp5gx1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407011441-wxp5gx1",
								"updated": "20230407011441"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "后置通知：在被代理的目标方法最终结束后执行（盖棺定论）"
								}
							]
						}
					]
				},
				{
					"ID": "20230407011441-fek5zpj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407011441-fek5zpj",
						"updated": "20230407011441"
					},
					"Children": [
						{
							"ID": "20230407011441-bf64gjo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407011441-bf64gjo",
								"updated": "20230407011441"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "环绕通知：使用try...catch...finally结构围绕整个被代理的目标方法，包括上面四种通知对应的所有位置"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230407011441-5ccquen",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-5ccquen",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/c36999dff4474cb79be11b62d62e44e2-20230407011441-w2sp6er.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230407011441-gbt2vdc",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230407011441-gbt2vdc",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.3"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://so.csdn.net/so/search?q=%E5%88%87%E9%9D%A2\u0026spm=1001.2101.3001.7020",
					"TextMarkTextContent": "切面"
				}
			]
		},
		{
			"ID": "20230407011441-bayn8ys",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-bayn8ys",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "封装通知方法的类。"
				}
			]
		},
		{
			"ID": "20230407011441-57i0w2e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-57i0w2e",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/0870dfa74ec44b3e8db13bab7f2c84c4-20230407011441-f9clt30.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230407011441-50q15p1",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230407011441-50q15p1",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.4目标"
				}
			]
		},
		{
			"ID": "20230407011441-anuk5v4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-anuk5v4",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "被代理的目标对象。"
				}
			]
		},
		{
			"ID": "20230407011441-p3wtj6z",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230407011441-p3wtj6z",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.5代理"
				}
			]
		},
		{
			"ID": "20230407011441-wby24jk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-wby24jk",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "向目标对象应用通知之后创建的代理对象。"
				}
			]
		},
		{
			"ID": "20230407011441-dx8o87d",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230407011441-dx8o87d",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.6连接点"
				}
			]
		},
		{
			"ID": "20230407011441-egg35ms",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-egg35ms",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这也是一个纯逻辑概念，不是语法定义的。\n把方法排成一排，每一个横切位置看成x轴方向，把方法从上到下执行的顺序看成y轴，x轴和y轴的交叉点就是连接点。"
				}
			]
		},
		{
			"ID": "20230407011441-m9yq6m3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-m9yq6m3",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/819e4b1abaf54bfdbe079480e247df83-20230407011441-y9icltn.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230407011441-vk9aala",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230407011441-vk9aala",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.7切入点"
				}
			]
		},
		{
			"ID": "20230407011441-nxorv2q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-nxorv2q",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "定位连接点的方式。\n每个类的方法中都包含多个连接点，所以连接点是类中客观存在的事物（从逻辑上来说）。\n如果把连接点看作数据库中的记录，那么切入点就是查询记录的 SQL 语句。\nSpring 的 AOP 技术可以​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "通过切入点定位到特定的连接点"
				},
				{
					"Type": "NodeText",
					"Data": "​。\n切点通过 org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条\n件。"
				}
			]
		},
		{
			"ID": "20230407011441-feanvec",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230407011441-feanvec",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.8作用"
				}
			]
		},
		{
			"ID": "20230407011441-235so8j",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230407011441-235so8j",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"ID": "20230407011441-rubbdm0",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407011441-rubbdm0",
						"updated": "20230407011441"
					},
					"Children": [
						{
							"ID": "20230407011441-6jktm1d",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407011441-6jktm1d",
								"updated": "20230407011441"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "简化代码：把方法中固定位置的重复的代码​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "抽取出来"
								},
								{
									"Type": "NodeText",
									"Data": "​，让被抽取的方法更专注于自己的核心功能，提高内聚性。"
								}
							]
						}
					]
				},
				{
					"ID": "20230407011441-cfsvl2e",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407011441-cfsvl2e",
						"updated": "20230407011441"
					},
					"Children": [
						{
							"ID": "20230407011441-emk4bfm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407011441-emk4bfm",
								"updated": "20230407011441"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "代码增强：把特定的功能封装到"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "切面类"
								},
								{
									"Type": "NodeText",
									"Data": "中，看哪里有需要，就往上套，被套用了切面逻辑的方法就被切面给增强了。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230407011441-9n96moe",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230407011441-9n96moe",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "2.9切入点表达式语法"
				}
			]
		},
		{
			"ID": "20230407011441-v9ougl2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-v9ougl2",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Example：@Pointcut(\u0026quot;execution(* com.spring.aop.annotation.CalculatorImpl.*(..))\u0026quot;)"
				}
			]
		},
		{
			"ID": "20230407011441-bfhi4kq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-bfhi4kq",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/d9f24e4f52864f37a61ea01369753e5b-20230407011441-rr2w11t.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230407011441-vfunbs3",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230407011441-vfunbs3",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230407011441-w7xhss5",
					"Type": "NodeHeading",
					"HeadingLevel": 2,
					"Properties": {
						"id": "20230407011441-w7xhss5",
						"updated": "20230407011441"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "3.基于注解的AOP"
						}
					]
				}
			]
		},
		{
			"ID": "20230407011441-peyxhi9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230407011441-peyxhi9",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.1技术说明"
				}
			]
		},
		{
			"ID": "20230407011441-g3giaif",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-g3giaif",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/f97be0504d52417ab6e2e94407a4dc94-20230407011441-te16d1a.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230407011441-fsipp5x",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230407011441-fsipp5x",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"ID": "20230407011441-lw8mpkw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407011441-lw8mpkw",
						"updated": "20230407011441"
					},
					"Children": [
						{
							"ID": "20230407011441-4qvl5ea",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407011441-4qvl5ea",
								"updated": "20230407011441"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因为这个技术要求​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "代理对象和目标对象实现同样的接口"
								},
								{
									"Type": "NodeText",
									"Data": "​（兄弟两个拜把子模式）。"
								}
							]
						}
					]
				},
				{
					"ID": "20230407011441-8ckwqek",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407011441-8ckwqek",
						"updated": "20230407011441"
					},
					"Children": [
						{
							"ID": "20230407011441-xg6b8yv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407011441-xg6b8yv",
								"updated": "20230407011441"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "cglib：通过​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "继承被代理的目标类"
								},
								{
									"Type": "NodeText",
									"Data": "​（认干爹模式）实现代理，所以不需要目标类实现接口。"
								}
							]
						}
					]
				},
				{
					"ID": "20230407011441-1mb8lpl",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230407011441-1mb8lpl",
						"updated": "20230407011441"
					},
					"Children": [
						{
							"ID": "20230407011441-462edi9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230407011441-462edi9",
								"updated": "20230407011441"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "AspectJ：本质上是静态代理，​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "将代理逻辑“织入”被代理的目标类编译得到的字节码文件"
								},
								{
									"Type": "NodeText",
									"Data": "​，所以最终效果是动态的。weaver就是织入器。Spring只是借用了AspectJ中的注解。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230407011441-xqqtjva",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230407011441-xqqtjva",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.2添加依赖"
				}
			]
		},
		{
			"ID": "20230407011441-ngvja4w",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230407011441-ngvja4w",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "WE1M"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e\n\u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n\n\u003cgroupId\u003eorg.example\u003c/groupId\u003e\n\u003cartifactId\u003espring-aop\u003c/artifactId\u003e\n\u003cversion\u003e1.0-SNAPSHOT\u003c/version\u003e\n\n\u003cpackaging\u003ejar\u003c/packaging\u003e\n\n\u003cdependencies\u003e\n\u003c!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --\u003e\n\u003cdependency\u003e\n\u003cgroupId\u003eorg.springframework\u003c/groupId\u003e\n\u003cartifactId\u003espring-context\u003c/artifactId\u003e\n\u003cversion\u003e5.3.1\u003c/version\u003e\n\u003c/dependency\u003e\n\u003c!-- junit测试 --\u003e\n\u003cdependency\u003e\n\u003cgroupId\u003ejunit\u003c/groupId\u003e\n\u003cartifactId\u003ejunit\u003c/artifactId\u003e\n\u003cversion\u003e4.12\u003c/version\u003e\n\u003cscope\u003etest\u003c/scope\u003e\n\u003c/dependency\u003e\n\n\u003c!-- spring-aspects会帮我们传递过来aspectjweaver --\u003e\n\u003cdependency\u003e\n\u003cgroupId\u003eorg.springframework\u003c/groupId\u003e\n\u003cartifactId\u003espring-aspects\u003c/artifactId\u003e\n\u003cversion\u003e5.3.1\u003c/version\u003e\n\u003c/dependency\u003e\n\u003c/dependencies\u003e\n\n\u003c/project\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230407011441-tr9whb4",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230407011441-tr9whb4",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.3准备被代理的目标资源"
				}
			]
		},
		{
			"ID": "20230407011441-kqnenfa",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230407011441-kqnenfa",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.31接口"
				}
			]
		},
		{
			"ID": "20230407011441-zer5rf7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230407011441-zer5rf7",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package com.spring.aop.annotation;\n\npublic interface Calculator {\nint add(int i, int j);\nint sub(int i, int j);\nint mul(int i, int j);\nint div(int i, int j);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230407011441-crlqhhk",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230407011441-crlqhhk",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.32实现类"
				}
			]
		},
		{
			"ID": "20230407011441-pjfvkzl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230407011441-pjfvkzl",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package com.spring.aop.annotation;\n\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class CalculatorImpl implements Calculator {\npublic int add(int i, int j) {\nint result=i+j;\n        System.out.println(\"方法内部：result=\"+result);\nreturn result;\n    }\n\npublic int sub(int i, int j) {\nint result=i-j;\n        System.out.println(\"方法内部：result=\"+result);\nreturn result;\n    }\n\npublic int mul(int i, int j) {\nint result=i*j;\n        System.out.println(\"方法内部：result=\"+result);\nreturn result;\n    }\n\npublic int div(int i, int j) {\nint result=i/j;\n        System.out.println(\"方法内部：result=\"+result);\nreturn result;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230407011441-sx6ba05",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230407011441-sx6ba05",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.4创建切面类并配置"
				}
			]
		},
		{
			"ID": "20230407011441-kkcgflo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230407011441-kkcgflo",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package com.spring.aop.annotation;\n\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.Signature;\nimport org.aspectj.lang.annotation.*;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Arrays;\n\n/**\n * 1、在切面中，需要通过指定的注解将方法标识为通知方法\n * @Before：前置通知，在目标对象方法执行之前执行\n * @After：后置通知，在目标对象方法的finally字句中执行\n * @AfterReturning：返回通知，在目标对象方法返回值之后执行\n * @AfterThrowing：异常通知，在目标对象方法的catch字句中执行\n *\n * 2、切入点表达式：设置在标识通知的注解的value属性中\n * execution(public int com.spring.aop.annotation.CalculatorImpl.add(int, int)\n * execution(* com.spring.aop.annotation.CalculatorImpl.*(..)\n * 第一个*表示任意的访问修饰符和返回值类型\n * 第二个*表示类中任意的方法\n * ..表示任意的参数列表\n * 类的地方也可以使用*，表示包下所有的类\n *\n * 3、重用切入点表达式\n * //@Pointcut声明一个公共的切入点表达式\n * @Pointcut(\"execution(* com.spring.aop.annotation.CalculatorImpl.*(..))\")\n * public void pointCut(){}\n * 使用方式：@Before(\"pointCut()\")\n *\n * 4、获取连接点的信息\n * 在通知方法的参数位置，设置JoinPoint类型的参数，就可以获取连接点所对应方法的信息\n * //获取连接点所对应方法的签名信息\n * Signature signature = joinPoint.getSignature();\n * //获取连接点所对应方法的参数\n * Object[] args = joinPoint.getArgs();\n *\n * 5、切面的优先级\n * 可以通过@Order注解的value属性设置优先级，默认值Integer的最大值\n * @Order注解的value属性值越小，优先级越高\n *\n */\n@Component\n@Aspect //将当前组件标识为切面\npublic class LoggerAspect {\n\n@Pointcut(\"execution(* com.spring.aop.annotation.CalculatorImpl.*(..))\")\npublic void pointCut(){}\n\n//@Before(\"execution(public int com.atguigu.spring.aop.annotation.CalculatorImpl.add(int, int))\")\n//@Before(\"execution(* com.atguigu.spring.aop.annotation.CalculatorImpl.*(..))\")\n@Before(\"pointCut()\")\npublic void beforeAdviceMethod(JoinPoint joinPoint) {\n//获取连接点所对应方法的签名信息\nSignature signature = joinPoint.getSignature();\n//获取连接点所对应方法的参数\n        Object[] args = joinPoint.getArgs();\n        System.out.println(\"LoggerAspect，方法：\"+signature.getName()+\"，参数：\"+ Arrays.toString(args));\n    }\n\n@After(\"pointCut()\")\npublic void afterAdviceMethod(JoinPoint joinPoint){\n//获取连接点所对应方法的签名信息\nSignature signature = joinPoint.getSignature();\n        System.out.println(\"LoggerAspect，方法：\"+signature.getName()+\"，执行完毕\");\n    }\n\n/**\n     * 在返回通知中若要获取目标对象方法的返回值\n     * 只需要通过@AfterReturning注解的returning属性\n     * 就可以将通知方法的某个参数指定为接收目标对象方法的返回值的参数\n     */\n@AfterReturning(value = \"pointCut()\", returning = \"result\")\npublic void afterReturningAdviceMethod(JoinPoint joinPoint, Object result){\n//获取连接点所对应方法的签名信息\nSignature signature = joinPoint.getSignature();\n        System.out.println(\"LoggerAspect，方法：\"+signature.getName()+\"，结果：\"+result);\n    }\n\n/**\n     * 在异常通知中若要获取目标对象方法的异常\n     * 只需要通过AfterThrowing注解的throwing属性\n     * 就可以将通知方法的某个参数指定为接收目标对象方法出现的异常的参数\n     */\n@AfterThrowing(value = \"pointCut()\", throwing = \"ex\")\n//写入异常类型，用Throwable和Exception均可\npublic void afterThrowingAdviceMethod(JoinPoint joinPoint, Throwable ex){\n//获取连接点所对应方法的签名信息\nSignature signature = joinPoint.getSignature();\n        System.out.println(\"LoggerAspect，方法：\"+signature.getName()+\"，异常：\"+ex);\n    }\n\n@Around(\"pointCut()\")\n//环绕通知的方法的返回值(object)，一定要和目标对象方法的返回值一致(object)\n//类似动态代理，手动将上面的所有通知整合在一起\npublic Object aroundAdviceMethod(ProceedingJoinPoint joinPoint){\nObject result = null;\ntry {\n            System.out.println(\"环绕通知--\u003e前置通知\");\n//表示目标对象方法的执行\n            result = joinPoint.proceed();\n            System.out.println(\"环绕通知--\u003e返回通知\");\n        } catch (Throwable throwable) {\n            throwable.printStackTrace();\n            System.out.println(\"环绕通知--\u003e异常通知\");\n        } finally {\n            System.out.println(\"环绕通知--\u003e后置通知\");\n        }\nreturn result;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230407011441-diylnku",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-diylnku",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "以下为优先级顺序测试类："
				}
			]
		},
		{
			"ID": "20230407011441-jr8ds4j",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230407011441-jr8ds4j",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package com.spring.aop.annotation;\n\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Component;\n\n@Component\n@Aspect\n@Order(1)\n//@Order(较小的数)：优先级高，默认为integer最大值\npublic class ValidateAspect {\n\n//@Before(\"execution(* com.spring.aop.annotation.CalculatorImpl.*(..))\")\n@Before(\"com.spring.aop.annotation.LoggerAspect.pointCut()\")\npublic void beforeMethod(){\n        System.out.println(\"ValidateAspect-\u003e前置通知\");\n    }\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230407011441-1bngw4e",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230407011441-1bngw4e",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.5"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://so.csdn.net/so/search?q=IOC%E5%AE%B9%E5%99%A8\u0026spm=1001.2101.3001.7020",
					"TextMarkTextContent": "IOC容器"
				},
				{
					"Type": "NodeText",
					"Data": "管理"
				}
			]
		},
		{
			"ID": "20230407011441-6vxyket",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-6vxyket",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "aop-annotation.xml"
				}
			]
		},
		{
			"ID": "20230407011441-s9183wc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230407011441-s9183wc",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "WE1M"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\u003cbeans xmlns=\"http://www.springframework.org/schema/beans\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxmlns:context=\"http://www.springframework.org/schema/context\"\nxmlns:aop=\"http://www.springframework.org/schema/aop\"\nxsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd\"\u003e\n\n\u003c!--\n        基于注解的AOP的实现：\n        1、将目标对象和切面交给IOC容器管理（注解+扫描）\n        2、开启AspectJ的自动代理，为目标对象自动生成代理\n        3、将切面类通过注解@Aspect标识\n    --\u003e\n\n\u003ccontext:component-scan base-package=\"com.spring.aop.annotation\"\u003e\u003c/context:component-scan\u003e\n\n\u003c!--    开启基于注解的AOP--\u003e\n\u003caop:aspectj-autoproxy/\u003e\n\n\u003c/beans\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230407011441-uv27r73",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230407011441-uv27r73",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.6测试类"
				}
			]
		},
		{
			"ID": "20230407011441-czbpzo9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230407011441-czbpzo9",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package com.spring.test;\n\nimport com.spring.aop.annotation.Calculator;\nimport com.spring.aop.annotation.CalculatorImpl;\nimport org.junit.Test;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class AOPTest {\n\n@Test\npublic void testAOPByAnnotation(){\n        ApplicationContext ioc=new ClassPathXmlApplicationContext(\"aop-annotation.xml\");\nCalculator calculator = ioc.getBean(Calculator.class);\n//calculator.add(1,1);\n//calculator.sub(2,1);\n        calculator.div(1,1);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230407011441-u1ifq45",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-u1ifq45",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/a9752098553b465e878a5c1fe2799f88-20230407011441-lv0aes0.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230407011441-5dn3kaj",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230407011441-5dn3kaj",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230407011441-7wnxo0e",
					"Type": "NodeHeading",
					"HeadingLevel": 2,
					"Properties": {
						"id": "20230407011441-7wnxo0e",
						"updated": "20230407011441"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "4.基于XML的AOP（了解）"
						}
					]
				}
			]
		},
		{
			"ID": "20230407011441-73i7kgl",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230407011441-73i7kgl",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4.1切面类"
				}
			]
		},
		{
			"ID": "20230407011441-pftvp4a",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230407011441-pftvp4a",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package com.spring.aop.xml;\n\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.Signature;\nimport org.aspectj.lang.annotation.*;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Arrays;\n\n@Component\npublic class LoggerAspect {\n\npublic void beforeAdviceMethod(JoinPoint joinPoint) {\n//获取连接点所对应方法的签名信息\nSignature signature = joinPoint.getSignature();\n//获取连接点所对应方法的参数\n        Object[] args = joinPoint.getArgs();\n        System.out.println(\"LoggerAspect，方法：\"+signature.getName()+\"，参数：\"+ Arrays.toString(args));\n    }\n\npublic void afterAdviceMethod(JoinPoint joinPoint){\n//获取连接点所对应方法的签名信息\nSignature signature = joinPoint.getSignature();\n        System.out.println(\"LoggerAspect，方法：\"+signature.getName()+\"，执行完毕\");\n    }\n\n/**\n     * 在返回通知中若要获取目标对象方法的返回值\n     * 只需要通过@AfterReturning注解的returning属性\n     * 就可以将通知方法的某个参数指定为接收目标对象方法的返回值的参数\n     */\npublic void afterReturningAdviceMethod(JoinPoint joinPoint, Object result){\n//获取连接点所对应方法的签名信息\nSignature signature = joinPoint.getSignature();\n        System.out.println(\"LoggerAspect，方法：\"+signature.getName()+\"，结果：\"+result);\n    }\n\n/**\n     * 在异常通知中若要获取目标对象方法的异常\n     * 只需要通过AfterThrowing注解的throwing属性\n     * 就可以将通知方法的某个参数指定为接收目标对象方法出现的异常的参数\n     */\n//写入异常类型，用Throwable和Exception均可\npublic void afterThrowingAdviceMethod(JoinPoint joinPoint, Throwable ex){\n//获取连接点所对应方法的签名信息\nSignature signature = joinPoint.getSignature();\n        System.out.println(\"LoggerAspect，方法：\"+signature.getName()+\"，异常：\"+ex);\n    }\n\n//环绕通知的方法的返回值(object)，一定要和目标对象方法的返回值一致(object)\n//类似动态代理，手动将上面的所有通知整合在一起\npublic Object aroundAdviceMethod(ProceedingJoinPoint joinPoint){\nObject result = null;\ntry {\n            System.out.println(\"环绕通知--\u003e前置通知\");\n//表示目标对象方法的执行\n            result = joinPoint.proceed();\n            System.out.println(\"环绕通知--\u003e返回通知\");\n        } catch (Throwable throwable) {\n            throwable.printStackTrace();\n            System.out.println(\"环绕通知--\u003e异常通知\");\n        } finally {\n            System.out.println(\"环绕通知--\u003e后置通知\");\n        }\nreturn result;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230407011441-wqvifs0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230407011441-wqvifs0",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package com.spring.aop.xml;\n\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ValidateAspect {\n\npublic void beforeMethod(){\n        System.out.println(\"ValidateAspect-\u003e前置通知\");\n    }\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230407011441-pcpfade",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230407011441-pcpfade",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4.2IOC容器管理"
				}
			]
		},
		{
			"ID": "20230407011441-97gmh4o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-97gmh4o",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "aop-xml.xml"
				}
			]
		},
		{
			"ID": "20230407011441-kjab9te",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230407011441-kjab9te",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "WE1M"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\u003cbeans xmlns=\"http://www.springframework.org/schema/beans\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxmlns:context=\"http://www.springframework.org/schema/context\"\nxmlns:aop=\"http://www.springframework.org/schema/aop\"\nxsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd\"\u003e\n\n\u003c!--扫描组件--\u003e\n\u003ccontext:component-scan base-package=\"com.spring.aop.xml\"\u003e\u003c/context:component-scan\u003e\n\n\u003caop:config\u003e\n\u003c!--设置一个公共的切入点表达式--\u003e\n\u003caop:pointcut id=\"poincut\" expression=\"execution(* com.spring.aop.xml.Calculator.*(..))\"/\u003e\n\u003c!--将IOC容器中的某个bean设置为切面--\u003e\n\u003caop:aspect ref=\"loggerAspect\"\u003e\n\u003caop:before method=\"beforeAdviceMethod\" pointcut-ref=\"poincut\"\u003e\u003c/aop:before\u003e\n\u003caop:after method=\"afterAdviceMethod\" pointcut-ref=\"poincut\"\u003e\u003c/aop:after\u003e\n\u003caop:after-returning method=\"afterReturningAdviceMethod\" returning=\"result\" pointcut-ref=\"poincut\"\u003e\u003c/aop:after-returning\u003e\n\u003caop:after-throwing method=\"afterThrowingAdviceMethod\" throwing=\"ex\" pointcut-ref=\"poincut\"\u003e\u003c/aop:after-throwing\u003e\n\u003caop:around method=\"aroundAdviceMethod\" pointcut-ref=\"poincut\"\u003e\u003c/aop:around\u003e\n\u003c/aop:aspect\u003e\n\n\u003caop:aspect ref=\"validateAspect\" order=\"1\"\u003e\n\u003caop:before method=\"beforeMethod\" pointcut-ref=\"poincut\"\u003e\u003c/aop:before\u003e\n\u003c/aop:aspect\u003e\n\u003c/aop:config\u003e\n\u003c/beans\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230407011441-q0rvk40",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230407011441-q0rvk40",
				"updated": "20230407011441"
			}
		},
		{
			"ID": "20230407011441-dlia9kz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230407011441-dlia9kz",
				"updated": "20230407011441"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "可以点个免费的赞吗！！！ "
				}
			]
		}
	]
}