{
	"ID": "20230404010538-49s3ldh",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230404010538-49s3ldh",
		"title": "吃透Spring源码（十五）：invokeBeanFactoryPostProcessors 执行流程_吃透Java的博客-CSDN博客",
		"updated": "20230404010538"
	},
	"Children": [
		{
			"ID": "20230404010538-zcl68uv",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230404010538-zcl68uv",
				"updated": "20230404010538"
			}
		},
		{
			"ID": "20230404010538-fgb59y0",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230404010538-fgb59y0",
				"updated": "20230404010538"
			},
			"Children": [
				{
					"ID": "20230404010538-no8d2ja",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404010538-no8d2ja",
						"updated": "20230404010538"
					},
					"Children": [
						{
							"ID": "20230404010538-5f1o9f8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404010538-5f1o9f8",
								"updated": "20230404010538"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u013277209/article/details/114594589",
									"TextMarkTextContent": "https://blog.csdn.net/u013277209/article/details/114594589"
								}
							]
						}
					]
				},
				{
					"ID": "20230404010538-oqoyiz6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404010538-oqoyiz6",
						"updated": "20230404010538"
					},
					"Children": [
						{
							"ID": "20230404010538-8jue0p4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404010538-8jue0p4",
								"updated": "20230404010538"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "进入源码之前先来了解一下BeanFactoryPostProcessor和BeanDefinitionRegistryPostProcessorBeanFactoryPostProcessor：主要针对的操作对象是BeanFactory，主要是对BeanFactory的修改。BeanDefinitionRegistryPostProcessor：是BeanFactoryPostProcessor的子接口，主要针对的操作对象是BeanDefinitionpublic interface BeanFa"
								}
							]
						}
					]
				},
				{
					"ID": "20230404010538-emy0js0",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404010538-emy0js0",
						"updated": "20230404010538"
					},
					"Children": [
						{
							"ID": "20230404010538-4iu7ekq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404010538-4iu7ekq",
								"updated": "20230404010538"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2023-04-04 01:05:38"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230404010538-on9rep7",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230404010538-on9rep7",
				"updated": "20230404010538"
			}
		},
		{
			"ID": "20230404010538-jvk0ma1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230404010538-jvk0ma1",
				"updated": "20230404010538"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "进入"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://so.csdn.net/so/search?q=%E6%BA%90%E7%A0%81\u0026spm=1001.2101.3001.7020",
					"TextMarkTextContent": "源码"
				},
				{
					"Type": "NodeText",
					"Data": "之前先来了解一下"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BeanFactoryPostProcessor"
				},
				{
					"Type": "NodeText",
					"Data": "​和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BeanDefinitionRegistryPostProcessor"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230404010538-5av5dli",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230404010538-5av5dli",
				"updated": "20230404010538"
			},
			"Children": [
				{
					"ID": "20230404010538-kca0gtz",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404010538-kca0gtz",
						"updated": "20230404010538"
					},
					"Children": [
						{
							"ID": "20230404010538-1t6ummm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404010538-1t6ummm",
								"updated": "20230404010538"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "BeanFactoryPostProcessor"
								},
								{
									"Type": "NodeText",
									"Data": "​：主要针对的操作对象是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "BeanFactory"
								},
								{
									"Type": "NodeText",
									"Data": "​，主要是对"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "BeanFactory"
								},
								{
									"Type": "NodeText",
									"Data": "​的修改。"
								}
							]
						}
					]
				},
				{
					"ID": "20230404010538-2bdvbww",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404010538-2bdvbww",
						"updated": "20230404010538"
					},
					"Children": [
						{
							"ID": "20230404010538-e7wt1um",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404010538-e7wt1um",
								"updated": "20230404010538"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "BeanDefinitionRegistryPostProcessor"
								},
								{
									"Type": "NodeText",
									"Data": "​：是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "BeanFactoryPostProcessor"
								},
								{
									"Type": "NodeText",
									"Data": "​的子接口，主要针对的操作对象是BeanDefinition"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230404010538-xn3o8br",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230404010538-xn3o8br",
				"updated": "20230404010538"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public interface BeanFactoryPostProcessor { \n\n\tvoid postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230404010538-rjrxtpi",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230404010538-rjrxtpi",
				"updated": "20230404010538"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public interface BeanDefinitionRegistryPostProcessor extends BeanFactoryPostProcessor { \n\n\tvoid postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException;\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230404010538-m3f31iz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230404010538-m3f31iz",
				"updated": "20230404010538"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "refresh()方法"
				}
			]
		},
		{
			"ID": "20230404010538-hqgxpza",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230404010538-hqgxpza",
				"updated": "20230404010538"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public abstract class AbstractApplicationContext extends DefaultResourceLoader\n\t\timplements ConfigurableApplicationContext { \n    @Override\n\tpublic void refresh() throws BeansException, IllegalStateException { \n\t\tsynchronized (this.startupShutdownMonitor) { \n\t\t\t// Prepare this context for refreshing.\n\t\t\t/**\n\t\t\t * 前戏，做容器刷新前的准备工作\n\t\t\t * 1、设置容器的启动时间\n\t\t\t * 2、设置活跃状态为true\n\t\t\t * 3、设置关闭状态为false\n\t\t\t * 4、获取Environment对象，并加载当前系统的属性值到Environment对象中\n\t\t\t * 5、准备监听器和事件的集合对象，默认为空的集合\n\t\t\t */\n\n\t\t\tprepareRefresh();\n\n\t\t\t// Tell the subclass to refresh the internal bean factory.\n\t\t\t// 创建容器对象：DefaultListableBeanFactory\n\t\t\t// 加载xml配置文件的属性值到当前工厂中，最重要的就是BeanDefinition\n\t\t\tConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n\n\t\t\t// Prepare the bean factory for use in this context.\n\t\t\t// beanFactory的准备工作，对各种属性进行填充\n\t\t\tprepareBeanFactory(beanFactory);\n\n\t\t\ttry { \n\t\t\t\t// Allows post-processing of the bean factory in context subclasses.\n\t\t\t\t// 子类覆盖方法做额外的处理，此处我们自己一般不做任何扩展工作，但是可以查看web中的代码，是有具体实现的\n\t\t\t\tpostProcessBeanFactory(beanFactory);\n\n\t\t\t\t// Invoke factory processors registered as beans in the context.\n\t\t\t\t// 调用各种beanFactory处理器\n\t\t\t\tinvokeBeanFactoryPostProcessors(beanFactory);\n\n\t\t\t\t// Register bean processors that intercept bean creation.\n\t\t\t\t// 注册bean处理器，这里只是注册功能，真正调用的是getBean方法\n\t\t\t\tregisterBeanPostProcessors(beanFactory);\n\n\t\t\t\t// Initialize message source for this context.\n\t\t\t\t// 为上下文初始化message源，即不同语言的消息体，国际化处理,在springmvc的时候通过国际化的代码重点讲\n\t\t\t\tinitMessageSource();\n\n\t\t\t\t// Initialize event multicaster for this context.\n\t\t\t\t// 初始化事件监听多路广播器\n\t\t\t\tinitApplicationEventMulticaster();\n\n\t\t\t\t// Initialize other special beans in specific context subclasses.\n\t\t\t\t// 留给子类来初始化其他的bean\n\t\t\t\tonRefresh();\n\n\t\t\t\t// Check for listener beans and register them.\n\t\t\t\t// 在所有注册的bean中查找listener bean,注册到消息广播器中\n\t\t\t\tregisterListeners();\n\n\t\t\t\t// Instantiate all remaining (non-lazy-init) singletons.\n\t\t\t\t// 初始化剩下的单实例（非懒加载的）\n\t\t\t\tfinishBeanFactoryInitialization(beanFactory);\n\n\t\t\t\t// Last step: publish corresponding event.\n\t\t\t\t// 完成刷新过程，通知生命周期处理器lifecycleProcessor刷新过程，同时发出ContextRefreshEvent通知别人\n\t\t\t\tfinishRefresh();\n\t\t\t}\n\n\t\t\tcatch (BeansException ex) { \n\t\t\t\tif (logger.isWarnEnabled()) { \n\t\t\t\t\tlogger.warn(\"Exception encountered during context initialization - \" +\n\t\t\t\t\t\t\t\"cancelling refresh attempt: \" + ex);\n\t\t\t\t}\n\n\t\t\t\t// Destroy already created singletons to avoid dangling resources.\n\t\t\t\t// 为防止bean资源占用，在异常处理中，销毁已经在前面过程中生成的单件bean\n\t\t\t\tdestroyBeans();\n\n\t\t\t\t// Reset 'active' flag.\n\t\t\t\t// 重置active标志\n\t\t\t\tcancelRefresh(ex);\n\n\t\t\t\t// Propagate exception to caller.\n\t\t\t\tthrow ex;\n\t\t\t}\n\n\t\t\tfinally { \n\t\t\t\t// Reset common introspection caches in Spring's core, since we\n\t\t\t\t// might not ever need metadata for singleton beans anymore...\n\t\t\t\tresetCommonCaches();\n\t\t\t}\n\t\t}\n\t}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230404010538-b588mdd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230404010538-b588mdd",
				"updated": "20230404010538"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "invokeBeanFactoryPostProcessors()方法"
				}
			]
		},
		{
			"ID": "20230404010538-x4564b6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230404010538-x4564b6",
				"updated": "20230404010538"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public abstract class AbstractApplicationContext extends DefaultResourceLoader\n\t\timplements ConfigurableApplicationContext { \n  \n    /**\n\t * 用来存放beanFactory的后置处理器集合\n\t */\n\tprivate final List\u003cBeanFactoryPostProcessor\u003e beanFactoryPostProcessors = new ArrayList\u003c\u003e();\n  \n    public List\u003cBeanFactoryPostProcessor\u003e getBeanFactoryPostProcessors() { \n\t\treturn this.beanFactoryPostProcessors;\n\t}\n  \n\tprotected void invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory) { \n\t\t// 获取到当前应用程序上下文的beanFactoryPostProcessors变量的值，并且实例化调用执行所有已经注册的beanFactoryPostProcessor\n\t\t// 默认情况下，通过getBeanFactoryPostProcessors()来获取已经注册的BFPP，但是默认是空的，那么问题来了，如果你想扩展，怎么进行扩展工作？\n\t\tPostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());\n\n\t\t// Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime\n\t\t// (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)\n\t\tif (beanFactory.getTempClassLoader() == null \u0026\u0026 beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) { \n\t\t\tbeanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));\n\t\t\tbeanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));\n\t\t}\n\t}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230404010538-hm8782v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230404010538-hm8782v",
				"updated": "20230404010538"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "具体处理方法"
				}
			]
		},
		{
			"ID": "20230404010538-jvzan03",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230404010538-jvzan03",
				"updated": "20230404010538"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\tpublic static void invokeBeanFactoryPostProcessors(\n            ConfigurableListableBeanFactory beanFactory, List\u003cBeanFactoryPostProcessor\u003e beanFactoryPostProcessors) { \n\n        // 无论是什么情况，优先执行BeanDefinitionRegistryPostProcessors\n        // 将已经执行过的BFPP存储在processedBeans中，防止重复执行\n        Set\u003cString\u003e processedBeans = new HashSet\u003c\u003e();\n\n        // 判断beanfactory是否是BeanDefinitionRegistry类型，此处是DefaultListableBeanFactory,实现了BeanDefinitionRegistry接口，所以为true\n        if (beanFactory instanceof BeanDefinitionRegistry) { \n            // 类型转换\n            BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;\n            // 此处希望大家做一个区分，两个接口是不同的，BeanDefinitionRegistryPostProcessor是BeanFactoryPostProcessor的子集\n            // BeanFactoryPostProcessor主要针对的操作对象是BeanFactory，而BeanDefinitionRegistryPostProcessor主要针对的操作对象是BeanDefinition\n            // 存放BeanFactoryPostProcessor的集合\n            List\u003cBeanFactoryPostProcessor\u003e regularPostProcessors = new ArrayList\u003c\u003e();\n            // 存放BeanDefinitionRegistryPostProcessor的集合\n            List\u003cBeanDefinitionRegistryPostProcessor\u003e registryProcessors = new ArrayList\u003c\u003e();\n\n            // 首先处理入参中的beanFactoryPostProcessors,遍历所有的beanFactoryPostProcessors，将BeanDefinitionRegistryPostProcessor\n            // 和BeanFactoryPostProcessor区分开\n            for (BeanFactoryPostProcessor postProcessor : beanFactoryPostProcessors) { \n                // 如果是BeanDefinitionRegistryPostProcessor\n                if (postProcessor instanceof BeanDefinitionRegistryPostProcessor) { \n                    BeanDefinitionRegistryPostProcessor registryProcessor =\n                            (BeanDefinitionRegistryPostProcessor) postProcessor;\n                    // 直接执行BeanDefinitionRegistryPostProcessor接口中的postProcessBeanDefinitionRegistry方法\n                    registryProcessor.postProcessBeanDefinitionRegistry(registry);\n                    // 添加到registryProcessors，用于后续执行postProcessBeanFactory方法\n                    registryProcessors.add(registryProcessor);\n                } else { \n                    // 否则，只是普通的BeanFactoryPostProcessor，添加到regularPostProcessors，用于后续执行postProcessBeanFactory方法\n                    regularPostProcessors.add(postProcessor);\n                }\n            }\n\n          \n            // 用于保存本次要执行的BeanDefinitionRegistryPostProcessor\n            List\u003cBeanDefinitionRegistryPostProcessor\u003e currentRegistryProcessors = new ArrayList\u003c\u003e();\n\n            // 调用所有实现PriorityOrdered接口的BeanDefinitionRegistryPostProcessor实现类\n            // 找到所有实现BeanDefinitionRegistryPostProcessor接口bean的beanName\n            String[] postProcessorNames =\n                    beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);\n            // 遍历处理所有符合规则的postProcessorNames\n            for (String ppName : postProcessorNames) { \n                // 检测是否实现了PriorityOrdered接口\n                if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) { \n                    // 获取名字对应的bean实例，添加到currentRegistryProcessors中\n                    currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));\n                    // 将要被执行的BFPP名称添加到processedBeans，避免后续重复执行\n                    processedBeans.add(ppName);\n                }\n            }\n            // 按照优先级进行排序操作\n            sortPostProcessors(currentRegistryProcessors, beanFactory);\n            // 添加到registryProcessors中，用于最后执行postProcessBeanFactory方法\n            registryProcessors.addAll(currentRegistryProcessors);\n            // 遍历currentRegistryProcessors，执行postProcessBeanDefinitionRegistry方法\n            invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);\n            // 执行完毕之后，清空currentRegistryProcessors\n            currentRegistryProcessors.clear();\n\n            // Next, invoke the BeanDefinitionRegistryPostProcessors that implement Ordered.\n            // 调用所有实现Ordered接口的BeanDefinitionRegistryPostProcessor实现类\n            // 找到所有实现BeanDefinitionRegistryPostProcessor接口bean的beanName，\n            // 此处需要重复查找的原因在于上面的执行过程中可能会新增其他的BeanDefinitionRegistryPostProcessor\n            postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);\n            for (String ppName : postProcessorNames) { \n                // 检测是否实现了Ordered接口，并且还未执行过\n                if (!processedBeans.contains(ppName) \u0026\u0026 beanFactory.isTypeMatch(ppName, Ordered.class)) { \n                    // 获取名字对应的bean实例，添加到currentRegistryProcessors中\n                    currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));\n                    // 将要被执行的BFPP名称添加到processedBeans，避免后续重复执行\n                    processedBeans.add(ppName);\n                }\n            }\n            // 按照优先级进行排序操作\n            sortPostProcessors(currentRegistryProcessors, beanFactory);\n            // 添加到registryProcessors中，用于最后执行postProcessBeanFactory方法\n            registryProcessors.addAll(currentRegistryProcessors);\n            // 遍历currentRegistryProcessors，执行postProcessBeanDefinitionRegistry方法\n            invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);\n            // 执行完毕之后，清空currentRegistryProcessors\n            currentRegistryProcessors.clear();\n\n            // Finally, invoke all other BeanDefinitionRegistryPostProcessors until no further ones appear.\n            // 最后，调用所有剩下的BeanDefinitionRegistryPostProcessors\n            boolean reiterate = true;\n            while (reiterate) { \n                reiterate = false;\n                // 找出所有实现BeanDefinitionRegistryPostProcessor接口的类\n                postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);\n                // 遍历执行\n                for (String ppName : postProcessorNames) { \n                    // 跳过已经执行过的BeanDefinitionRegistryPostProcessor\n                    if (!processedBeans.contains(ppName)) { \n                        // 获取名字对应的bean实例，添加到currentRegistryProcessors中\n                        currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));\n                        // 将要被执行的BFPP名称添加到processedBeans，避免后续重复执行\n                        processedBeans.add(ppName);\n                        reiterate = true;\n                    }\n                }\n                // 按照优先级进行排序操作\n                sortPostProcessors(currentRegistryProcessors, beanFactory);\n                // 添加到registryProcessors中，用于最后执行postProcessBeanFactory方法\n                registryProcessors.addAll(currentRegistryProcessors);\n                // 遍历currentRegistryProcessors，执行postProcessBeanDefinitionRegistry方法\n                invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);\n                // 执行完毕之后，清空currentRegistryProcessors\n                currentRegistryProcessors.clear();\n            }\n\n            // Now, invoke the postProcessBeanFactory callback of all processors handled so far.\n            // 调用所有BeanDefinitionRegistryPostProcessor的postProcessBeanFactory方法\n            invokeBeanFactoryPostProcessors(registryProcessors, beanFactory);\n            // 最后，调用入参beanFactoryPostProcessors中的普通BeanFactoryPostProcessor的postProcessBeanFactory方法\n            invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory);\n        } else { \n            // Invoke factory processors registered with the context instance.\n            // 如果beanFactory不归属于BeanDefinitionRegistry类型，那么直接执行postProcessBeanFactory方法\n            invokeBeanFactoryPostProcessors(beanFactoryPostProcessors, beanFactory);\n        }\n\n        // 到这里为止，入参beanFactoryPostProcessors和容器中的所有BeanDefinitionRegistryPostProcessor已经全部处理完毕，下面开始处理容器中\n        // 所有的BeanFactoryPostProcessor\n        // 可能会包含一些实现类，只实现了BeanFactoryPostProcessor，并没有实现BeanDefinitionRegistryPostProcessor接口\n\n        // 找到所有实现BeanFactoryPostProcessor接口的类\n        String[] postProcessorNames =\n                beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class, true, false);\n\n        // 用于存放实现了PriorityOrdered接口的BeanFactoryPostProcessor\n        List\u003cBeanFactoryPostProcessor\u003e priorityOrderedPostProcessors = new ArrayList\u003c\u003e();\n        // 用于存放实现了Ordered接口的BeanFactoryPostProcessor的beanName\n//\t\tList\u003cString\u003e orderedPostProcessorNames = new ArrayList\u003c\u003e();\n        List\u003cBeanFactoryPostProcessor\u003e orderedPostProcessor = new ArrayList\u003c\u003e();\n        // 用于存放普通BeanFactoryPostProcessor的beanName\n//\t\tList\u003cString\u003e nonOrderedPostProcessorNames = new ArrayList\u003c\u003e();\n        List\u003cBeanFactoryPostProcessor\u003e nonOrderedPostProcessorNames = new ArrayList\u003c\u003e();\n        // 遍历postProcessorNames,将BeanFactoryPostProcessor按实现PriorityOrdered、实现Ordered接口、普通三种区分开\n        for (String ppName : postProcessorNames) { \n            // 跳过已经执行过的BeanFactoryPostProcessor\n            if (processedBeans.contains(ppName)) { \n                // skip - already processed in first phase above\n            }\n            // 添加实现了PriorityOrdered接口的BeanFactoryPostProcessor到priorityOrderedPostProcessors\n            else if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) { \n                priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanFactoryPostProcessor.class));\n            }\n            // 添加实现了Ordered接口的BeanFactoryPostProcessor的beanName到orderedPostProcessorNames\n            else if (beanFactory.isTypeMatch(ppName, Ordered.class)) { \n//\t\t\t\torderedPostProcessorNames.add(ppName);\n                orderedPostProcessor.add(beanFactory.getBean(ppName, BeanFactoryPostProcessor.class));\n            } else { \n                // 添加剩下的普通BeanFactoryPostProcessor的beanName到nonOrderedPostProcessorNames\n//\t\t\t\tnonOrderedPostProcessorNames.add(ppName);\n                nonOrderedPostProcessorNames.add(beanFactory.getBean(ppName, BeanFactoryPostProcessor.class));\n            }\n        }\n\n        // First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered.\n        // 对实现了PriorityOrdered接口的BeanFactoryPostProcessor进行排序\n        sortPostProcessors(priorityOrderedPostProcessors, beanFactory);\n        // 遍历实现了PriorityOrdered接口的BeanFactoryPostProcessor，执行postProcessBeanFactory方法\n        invokeBeanFactoryPostProcessors(priorityOrderedPostProcessors, beanFactory);\n\n        // Next, invoke the BeanFactoryPostProcessors that implement Ordered.\n        // 创建存放实现了Ordered接口的BeanFactoryPostProcessor集合\n//\t\tList\u003cBeanFactoryPostProcessor\u003e orderedPostProcessors = new ArrayList\u003c\u003e(orderedPostProcessorNames.size());\n        // 遍历存放实现了Ordered接口的BeanFactoryPostProcessor名字的集合\n//\t\tfor (String postProcessorName : orderedPostProcessorNames) { \n        // 将实现了Ordered接口的BeanFactoryPostProcessor添加到集合中\n//\t\t\torderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));\n//\t\t}\n        // 对实现了Ordered接口的BeanFactoryPostProcessor进行排序操作\n//\t\tsortPostProcessors(orderedPostProcessors, beanFactory);\n        sortPostProcessors(orderedPostProcessor, beanFactory);\n        // 遍历实现了Ordered接口的BeanFactoryPostProcessor，执行postProcessBeanFactory方法\n//\t\tinvokeBeanFactoryPostProcessors(orderedPostProcessors, beanFactory);\n        invokeBeanFactoryPostProcessors(orderedPostProcessor, beanFactory);\n\n        // Finally, invoke all other BeanFactoryPostProcessors.\n        // 最后，创建存放普通的BeanFactoryPostProcessor的集合\n//\t\tList\u003cBeanFactoryPostProcessor\u003e nonOrderedPostProcessors = new ArrayList\u003c\u003e(nonOrderedPostProcessorNames.size());\n        // 遍历存放实现了普通BeanFactoryPostProcessor名字的集合\n//\t\tfor (String postProcessorName : nonOrderedPostProcessorNames) { \n        // 将普通的BeanFactoryPostProcessor添加到集合中\n//\t\t\tnonOrderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));\n//\t\t}\n        // 遍历普通的BeanFactoryPostProcessor，执行postProcessBeanFactory方法\n//\t\tinvokeBeanFactoryPostProcessors(nonOrderedPostProcessors, beanFactory);\n        invokeBeanFactoryPostProcessors(nonOrderedPostProcessorNames, beanFactory);\n\n        // Clear cached merged bean definitions since the post-processors might have\n        // modified the original metadata, e.g. replacing placeholders in values...\n        // 清除元数据缓存（mergeBeanDefinitions、allBeanNamesByType、singletonBeanNameByType）\n        // 因为后置处理器可能已经修改了原始元数据，例如，替换值中的占位符\n        beanFactory.clearMetadataCache();\n    }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230404010538-msyqw3w",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230404010538-msyqw3w",
				"updated": "20230404010538"
			},
			"Children": [
				{
					"ID": "20230404010538-qge14ej",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230404010538-qge14ej",
						"updated": "20230404010538"
					},
					"Children": [
						{
							"ID": "20230404010538-icwggmd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404010538-icwggmd",
								"updated": "20230404010538"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "先处理参数中传过来的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "beanFactoryPostProcessors"
								},
								{
									"Type": "NodeText",
									"Data": "​中的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "BeanDefinitionRegistryPostProcessor#postProcessBeanDefinitionRegistry()"
								},
								{
									"Type": "NodeText",
									"Data": "​方法"
								}
							]
						}
					]
				},
				{
					"ID": "20230404010538-r5jfgmj",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230404010538-r5jfgmj",
						"updated": "20230404010538"
					},
					"Children": [
						{
							"ID": "20230404010538-8ra9sj6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404010538-8ra9sj6",
								"updated": "20230404010538"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "处理容器中的指定"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "BeanDefinitionRegistryPostProcessor#postProcessBeanDefinitionRegistry()"
								},
								{
									"Type": "NodeText",
									"Data": "​方法，按照优先级排序执行"
								}
							]
						}
					]
				},
				{
					"ID": "20230404010538-hjioaqn",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230404010538-hjioaqn",
						"updated": "20230404010538"
					},
					"Children": [
						{
							"ID": "20230404010538-urooarq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404010538-urooarq",
								"updated": "20230404010538"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "重复执行步骤2，有可能在执行2的过程中又加入了新的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "BeanDefinitionRegistryPostProcessor"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20230404010538-tvq9645",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230404010538-tvq9645",
						"updated": "20230404010538"
					},
					"Children": [
						{
							"ID": "20230404010538-d4r3r8l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404010538-d4r3r8l",
								"updated": "20230404010538"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "执行剩余的所有普通的没有实现优先级接口的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "BeanDefinitionRegistryPostProcessor#postProcessBeanDefinitionRegistry()"
								},
								{
									"Type": "NodeText",
									"Data": "​方法"
								}
							]
						}
					]
				},
				{
					"ID": "20230404010538-s2dffdt",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230404010538-s2dffdt",
						"updated": "20230404010538"
					},
					"Children": [
						{
							"ID": "20230404010538-kx7u4c8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404010538-kx7u4c8",
								"updated": "20230404010538"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "执行入参beanFactoryPostProcessors中的普通"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "BeanFactoryPostProcessor#postProcessBeanFactory()"
								},
								{
									"Type": "NodeText",
									"Data": "​方法"
								}
							]
						}
					]
				},
				{
					"ID": "20230404010538-ta1yswm",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20230404010538-ta1yswm",
						"updated": "20230404010538"
					},
					"Children": [
						{
							"ID": "20230404010538-euhriqq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404010538-euhriqq",
								"updated": "20230404010538"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "遍历实现了PriorityOrdered接口的BeanFactoryPostProcessor，执行postProcessBeanFactory方法"
								}
							]
						}
					]
				},
				{
					"ID": "20230404010538-p4h5zd4",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ny4=",
						"Num": 7
					},
					"Properties": {
						"id": "20230404010538-p4h5zd4",
						"updated": "20230404010538"
					},
					"Children": [
						{
							"ID": "20230404010538-nyy2a6e",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404010538-nyy2a6e",
								"updated": "20230404010538"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "遍历实现了Ordered接口的BeanFactoryPostProcessor，执行postProcessBeanFactory方法"
								}
							]
						}
					]
				},
				{
					"ID": "20230404010538-bcluphe",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "OC4=",
						"Num": 8
					},
					"Properties": {
						"id": "20230404010538-bcluphe",
						"updated": "20230404010538"
					},
					"Children": [
						{
							"ID": "20230404010538-9imra2v",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404010538-9imra2v",
								"updated": "20230404010538"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "遍历普通的BeanFactoryPostProcessor，执行postProcessBeanFactory方法"
								}
							]
						}
					]
				}
			]
		}
	]
}