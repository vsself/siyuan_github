{
	"ID": "20230404010046-vaql0x1",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230404010046-vaql0x1",
		"title": "吃透Spring源码（二）：customizeBeanFactory方法扩展点_吃透Java的博客-CSDN博客",
		"updated": "20230404010046"
	},
	"Children": [
		{
			"ID": "20230404010046-3bzivge",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230404010046-3bzivge",
				"updated": "20230404010046"
			}
		},
		{
			"ID": "20230404010046-2221ro3",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230404010046-2221ro3",
				"updated": "20230404010046"
			},
			"Children": [
				{
					"ID": "20230404010046-la4xore",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404010046-la4xore",
						"updated": "20230404010046"
					},
					"Children": [
						{
							"ID": "20230404010046-u6jr640",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404010046-u6jr640",
								"updated": "20230404010046"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/u013277209/article/details/109183125",
									"TextMarkTextContent": "https://blog.csdn.net/u013277209/article/details/109183125"
								}
							]
						}
					]
				},
				{
					"ID": "20230404010046-apb04hv",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404010046-apb04hv",
						"updated": "20230404010046"
					},
					"Children": [
						{
							"ID": "20230404010046-qdlj45b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404010046-qdlj45b",
								"updated": "20230404010046"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Spring的强大之处不仅仅在于它为Java开发者提供了极大便利，更在于它的开放式架构，使得用户可以拥有最大扩展Spring的能力。protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) {\t\t// 如果属性allowBeanDefinitionOverriding不为空，设置给beanFactory对象相应属性，是否允许覆盖同名称的不同定义的对象\t\tif (this.allowBeanDefiniti."
								}
							]
						}
					]
				},
				{
					"ID": "20230404010046-wbrxi7u",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404010046-wbrxi7u",
						"updated": "20230404010046"
					},
					"Children": [
						{
							"ID": "20230404010046-mged7aa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404010046-mged7aa",
								"updated": "20230404010046"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2023-04-04 01:00:46"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230404010046-fc6g4q3",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230404010046-fc6g4q3",
				"updated": "20230404010046"
			}
		},
		{
			"ID": "20230404010046-l5cksaz",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230404010046-l5cksaz",
				"updated": "20230404010046"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230404010046-a4q57m7",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230404010046-a4q57m7",
						"updated": "20230404010046"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "Spring的强大之处不仅仅在于它为Java开发者提供了极大便利，更在于它的开放式架构，使得用户可以拥有最大扩展Spring的能力。"
						}
					]
				}
			]
		},
		{
			"ID": "20230404010046-rpzl85f",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230404010046-rpzl85f",
				"updated": "20230404010046"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) { \n\t\t// 如果属性allowBeanDefinitionOverriding不为空，设置给beanFactory对象相应属性，是否允许覆盖同名称的不同定义的对象\n\t\tif (this.allowBeanDefinitionOverriding != null) { \n\t\t\tbeanFactory.setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding);\n\t\t}\n\t\t// 如果属性allowCircularReferences不为空，设置给beanFactory对象相应属性，是否允许bean之间存在循环依赖\n\t\tif (this.allowCircularReferences != null) { \n\t\t\tbeanFactory.setAllowCircularReferences(this.allowCircularReferences);\n\t\t}\n\t}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230404010046-11nocn8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230404010046-11nocn8",
				"updated": "20230404010046"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在AbstractRefreshableApplicationContext类中有一个customizeBeanFactory方法是留给子类扩展，它是在refresh()的第二个方法obtainFreshBeanFactory()–\u003erefreshBeanFactory()方法中调用。"
				}
			]
		},
		{
			"ID": "20230404010046-t9x5dpi",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230404010046-t9x5dpi",
				"updated": "20230404010046"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "protected final void refreshBeanFactory() throws BeansException { \n\t\t// 如果存在beanFactory，则销毁beanFactory\n\t\tif (hasBeanFactory()) { \n\t\t\tdestroyBeans();\n\t\t\tcloseBeanFactory();\n\t\t}\n\t\ttry { \n\t\t\t// 创建DefaultListableBeanFactory对象\n\t\t\tDefaultListableBeanFactory beanFactory = createBeanFactory();\n\t\t\t// 为了序列化指定id，可以从id反序列化到beanFactory对象\n\t\t\tbeanFactory.setSerializationId(getId());\n\t\t\t// 定制beanFactory，设置相关属性，包括是否允许覆盖同名称的不同定义的对象以及循环依赖\n\t\t\tcustomizeBeanFactory(beanFactory);\n\t\t\t// 初始化documentReader,并进行XML文件读取及解析,默认命名空间的解析，自定义标签的解析\n\t\t\tloadBeanDefinitions(beanFactory);\n\t\t\tthis.beanFactory = beanFactory;\n\t\t}\n\t\tcatch (IOException ex) { \n\t\t\tthrow new ApplicationContextException(\"I/O error parsing bean definition source for \" + getDisplayName(), ex);\n\t\t}\n\t}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230404010046-i0s9wb7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230404010046-i0s9wb7",
				"updated": "20230404010046"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此方法是用来实现BeanFactory的属性设置，主要是设置两个属性："
				}
			]
		},
		{
			"ID": "20230404010046-378hdd3",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230404010046-378hdd3",
				"updated": "20230404010046"
			},
			"Children": [
				{
					"ID": "20230404010046-t3sjak6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404010046-t3sjak6",
						"updated": "20230404010046"
					},
					"Children": [
						{
							"ID": "20230404010046-8smlvho",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404010046-8smlvho",
								"updated": "20230404010046"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "allowBeanDefinitionOverriding：是否允许覆盖同名称的不同定义的对象。"
								}
							]
						}
					]
				},
				{
					"ID": "20230404010046-ljrh4io",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230404010046-ljrh4io",
						"updated": "20230404010046"
					},
					"Children": [
						{
							"ID": "20230404010046-c95vty7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230404010046-c95vty7",
								"updated": "20230404010046"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "allowCircularReferences：是否允许bean之间的循环依赖。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230404010046-8x49yar",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230404010046-8x49yar",
				"updated": "20230404010046"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如下例子："
				}
			]
		},
		{
			"ID": "20230404010046-arhx470",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230404010046-arhx470",
				"updated": "20230404010046"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class MyClassPathXmlApplicationContext extends ClassPathXmlApplicationContext { \n\n\n    public MyClassPathXmlApplicationContext(String... configLocations){ \n        super(configLocations);\n    }\n\n    @Override\n    protected void initPropertySources() { \n        System.out.println(\"扩展initPropertySource\");\n        //这里添加了一个name属性到Environment里面，以方便我们在后面用到\n        getEnvironment().getSystemProperties().put(\"name\",\"bobo\");\n        //这里要求Environment中必须包含username属性，如果不包含，则抛出异常\n        getEnvironment().setRequiredProperties(\"username\");\n    }\n\n    @Override\n    protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) { \n        super.setAllowBeanDefinitionOverriding(false);\n        super.setAllowCircularReferences(false);\n        super.customizeBeanFactory(beanFactory);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230404010046-sg67pll",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230404010046-sg67pll",
				"updated": "20230404010046"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Test { \n\n    public static void main(String[] args) { \n        MyClassPathXmlApplicationContext ac = new MyClassPathXmlApplicationContext(\"applicationContext.xml\");\n\n//        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"spring-${username}.xml\");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}