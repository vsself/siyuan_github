{
	"ID": "20230408235544-oqeu9uf",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230408235544-oqeu9uf",
		"title": "Spring AOP基础组件 Advice_我家有猫已长成的博客-CSDN博客",
		"updated": "20230408235544"
	},
	"Children": [
		{
			"ID": "20230408235544-0fki69o",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230408235544-0fki69o",
				"updated": "20230408235544"
			}
		},
		{
			"ID": "20230408235544-mdgdsjl",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230408235544-mdgdsjl",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"ID": "20230408235544-5z2ob5n",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230408235544-5z2ob5n",
						"updated": "20230408235544"
					},
					"Children": [
						{
							"ID": "20230408235544-0fnondi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230408235544-0fnondi",
								"updated": "20230408235544"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/xing_hung/article/details/122830200",
									"TextMarkTextContent": "https://blog.csdn.net/xing_hung/article/details/122830200"
								}
							]
						}
					]
				},
				{
					"ID": "20230408235544-y9v65bd",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230408235544-y9v65bd",
						"updated": "20230408235544"
					},
					"Children": [
						{
							"ID": "20230408235544-qub4ik9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230408235544-qub4ik9",
								"updated": "20230408235544"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Spring AOP基础组件 Advice 简介。"
								}
							]
						}
					]
				},
				{
					"ID": "20230408235544-983sofd",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230408235544-983sofd",
						"updated": "20230408235544"
					},
					"Children": [
						{
							"ID": "20230408235544-ipugspt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230408235544-ipugspt",
								"updated": "20230408235544"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2023-04-08 23:55:44"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230408235544-ii74x52",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230408235544-ii74x52",
				"updated": "20230408235544"
			}
		},
		{
			"ID": "20230408235544-5be8vkm",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235544-5be8vkm",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "相关阅读"
				}
			]
		},
		{
			"ID": "20230408235544-dokkgxf",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230408235544-dokkgxf",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"ID": "20230408235544-9f4pfx3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230408235544-9f4pfx3",
						"updated": "20230408235544"
					},
					"Children": [
						{
							"ID": "20230408235544-d98cso8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230408235544-d98cso8",
								"updated": "20230408235544"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/xing_hung/article/details/122815139",
									"TextMarkTextContent": "Spring AOP基础组件 Pointcut"
								}
							]
						}
					]
				},
				{
					"ID": "20230408235544-04vlao6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230408235544-04vlao6",
						"updated": "20230408235544"
					},
					"Children": [
						{
							"ID": "20230408235544-ks6cavf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230408235544-ks6cavf",
								"updated": "20230408235544"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/xing_hung/article/details/122830287",
									"TextMarkTextContent": "Spring AOP基础组件 Advisor"
								}
							]
						}
					]
				},
				{
					"ID": "20230408235544-gf3olbv",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230408235544-gf3olbv",
						"updated": "20230408235544"
					},
					"Children": [
						{
							"ID": "20230408235544-re8f8tm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230408235544-re8f8tm",
								"updated": "20230408235544"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://blog.csdn.net/xing_hung/article/details/122830238",
									"TextMarkTextContent": "Spring AOP基础组件 Advised"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230408235544-vf04615",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235544-vf04615",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235544-v0tm8cy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235544-v0tm8cy",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "表示"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "通知"
				},
				{
					"Type": "NodeText",
					"Data": "​的标签接口，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "通知"
				},
				{
					"Type": "NodeText",
					"Data": "​的实现类可以多种，比如"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Interceptor"
				},
				{
					"Type": "NodeText",
					"Data": "​；"
				}
			]
		},
		{
			"ID": "20230408235544-uu0ck4t",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235544-uu0ck4t",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "源码"
				}
			]
		},
		{
			"ID": "20230408235544-i7hnboc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235544-i7hnboc",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public interface Advice { \n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235544-iuvswr7",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235544-iuvswr7",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实现子类"
				}
			]
		},
		{
			"ID": "20230408235544-y03bbkp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235544-y03bbkp",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Advice"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/8c225b8213064098b37728c3abcbe12c-20230408235544-wp7pbrc.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230408235544-4az9f5y",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235544-4az9f5y",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "BeforeAdvice"
				}
			]
		},
		{
			"ID": "20230408235544-fac898b",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-fac898b",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235544-7ejb8kw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235544-7ejb8kw",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "前置通知的标记接口；实现子类有："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MethodBeforeAdvice"
				},
				{
					"Type": "NodeText",
					"Data": "​；\nSpring目前只支持方法前置通知；"
				}
			]
		},
		{
			"ID": "20230408235544-zceprfa",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235544-zceprfa",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "AfterAdvice"
				}
			]
		},
		{
			"ID": "20230408235544-gdypjxj",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-gdypjxj",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235544-2sb2mi0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235544-2sb2mi0",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "后置通知的标记接口，实现子类有："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AfterReturningAdvice"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ThrowsAdvice"
				},
				{
					"Type": "NodeText",
					"Data": "​；"
				}
			]
		},
		{
			"ID": "20230408235544-kjkgjxa",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235544-kjkgjxa",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "AbstractAspectJAdvice"
				}
			]
		},
		{
			"ID": "20230408235544-h1g5fri",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-h1g5fri",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235544-0f6aszh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235544-0f6aszh",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "包装"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AspectJ"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://so.csdn.net/so/search?q=%E5%88%87%E9%9D%A2\u0026spm=1001.2101.3001.7020",
					"TextMarkTextContent": "切面"
				},
				{
					"Type": "NodeText",
					"Data": "或者"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AspectJ"
				},
				{
					"Type": "NodeText",
					"Data": "​注解标注的通知方法的AOP "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advice"
				},
				{
					"Type": "NodeText",
					"Data": "​的基础类；"
				}
			]
		},
		{
			"ID": "20230408235544-w0bgocf",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-w0bgocf",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235544-028edwb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235544-028edwb",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public abstract class AbstractAspectJAdvice implements Advice, AspectJPrecedenceInformation, Serializable { \n\n    // 调用增强方法\n    protected Object invokeAdviceMethod(\n            @Nullable JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex)\n            throws Throwable { \n\n        return invokeAdviceMethodWithGivenArgs(argBinding(getJoinPoint(), jpMatch, returnValue, ex));\n    }\n\n    // 调用增强方法\n    protected Object invokeAdviceMethod(JoinPoint jp, @Nullable JoinPointMatch jpMatch,\n            @Nullable Object returnValue, @Nullable Throwable t) throws Throwable { \n\n        return invokeAdviceMethodWithGivenArgs(argBinding(jp, jpMatch, returnValue, t));\n    }\n\n    // 根据给定参数调用增强方法\n    protected Object invokeAdviceMethodWithGivenArgs(Object[] args) throws Throwable { \n        Object[] actualArgs = args;\n        if (this.aspectJAdviceMethod.getParameterCount() == 0) { \n            actualArgs = null;\n        }\n        try { \n            // 反射调用增强方法\n            ReflectionUtils.makeAccessible(this.aspectJAdviceMethod);\n            return this.aspectJAdviceMethod.invoke(this.aspectInstanceFactory.getAspectInstance(), actualArgs);\n        }\n        catch (IllegalArgumentException ex) { \n            throw new AopInvocationException(\"Mismatch on arguments to advice method [\" +\n                    this.aspectJAdviceMethod + \"]; pointcut expression [\" +\n                    this.pointcut.getPointcutExpression() + \"]\", ex);\n        }\n        catch (InvocationTargetException ex) { \n            throw ex.getTargetException();\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235544-n65p0mb",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235544-n65p0mb",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "AspectJMethodBeforeAdvice"
				}
			]
		},
		{
			"ID": "20230408235544-p0wa6h3",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-p0wa6h3",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235544-mnoufn6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235544-mnoufn6",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "包装"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AspectJ"
				},
				{
					"Type": "NodeText",
					"Data": "​前置通知方法的Spring AOP "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advice"
				},
				{
					"Type": "NodeText",
					"Data": "​；"
				}
			]
		},
		{
			"ID": "20230408235544-g020mjb",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-g020mjb",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235544-zy7n1m3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235544-zy7n1m3",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class AspectJMethodBeforeAdvice extends AbstractAspectJAdvice implements MethodBeforeAdvice, Serializable { \n\n    @Override\n    public void before(Method method, Object[] args, @Nullable Object target) throws Throwable { \n        invokeAdviceMethod(getJoinPointMatch(), null, null);\n    }\n\n    @Override\n    public boolean isBeforeAdvice() { \n        return true;\n    }\n\n    @Override\n    public boolean isAfterAdvice() { \n        return false;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235544-q3ax3rs",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235544-q3ax3rs",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "AspectJAfterAdvice"
				}
			]
		},
		{
			"ID": "20230408235544-pf3b7py",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-pf3b7py",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235544-lr2jr9r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235544-lr2jr9r",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "包装"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AspectJ"
				},
				{
					"Type": "NodeText",
					"Data": "​最终通知方法的Spring AOP "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advice"
				},
				{
					"Type": "NodeText",
					"Data": "​；"
				}
			]
		},
		{
			"ID": "20230408235544-nlnrqdn",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-nlnrqdn",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235544-lavzswz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235544-lavzswz",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class AspectJAfterAdvice extends AbstractAspectJAdvice\n        implements MethodInterceptor, AfterAdvice, Serializable { \n\n    @Override\n    @Nullable\n    public Object invoke(MethodInvocation mi) throws Throwable { \n        try { \n            return mi.proceed();\n        }\n        finally { \n            // 不管是否正常返回都会执行通知\n            invokeAdviceMethod(getJoinPointMatch(), null, null);\n        }\n    }\n\n    @Override\n    public boolean isBeforeAdvice() { \n        return false;\n    }\n\n    @Override\n    public boolean isAfterAdvice() { \n        return true;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235544-39qroap",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235544-39qroap",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "AspectJAfterReturningAdvice"
				}
			]
		},
		{
			"ID": "20230408235544-7rttt1t",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-7rttt1t",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235544-o02zfvj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235544-o02zfvj",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "包装"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AspectJ"
				},
				{
					"Type": "NodeText",
					"Data": "​后置通知方法的Spring AOP "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advice"
				},
				{
					"Type": "NodeText",
					"Data": "​；"
				}
			]
		},
		{
			"ID": "20230408235544-f3osvqd",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-f3osvqd",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235544-nz5kbit",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235544-nz5kbit",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class AspectJAfterReturningAdvice extends AbstractAspectJAdvice\n        implements AfterReturningAdvice, AfterAdvice, Serializable { \n\n    @Override\n    public boolean isBeforeAdvice() { \n        return false;\n    }\n\n    @Override\n    public boolean isAfterAdvice() { \n        return true;\n    }\n\n    @Override\n    public void afterReturning(@Nullable Object returnValue, Method method, Object[] args, @Nullable Object target) throws Throwable { \n        // 根据返回值判断是否调用\n        if (shouldInvokeOnReturnValueOf(method, returnValue)) { \n            invokeAdviceMethod(getJoinPointMatch(), returnValue, null);\n        }\n    }\n\n    private boolean shouldInvokeOnReturnValueOf(Method method, @Nullable Object returnValue) { \n        Class\u003c?\u003e type = getDiscoveredReturningType();\n        Type genericType = getDiscoveredReturningGenericType();\n        // If we aren't dealing with a raw type, check if generic parameters are assignable.\n        // 判断返回值类型是否匹配，如果返回值类型是泛型类型，则泛型参数也要匹配\n        return (matchesReturnValue(type, method, returnValue) \u0026\u0026\n                (genericType == null || genericType == type ||\n                        TypeUtils.isAssignable(genericType, method.getGenericReturnType())));\n    }\n\n    private boolean matchesReturnValue(Class\u003c?\u003e type, Method method, @Nullable Object returnValue) { \n        if (returnValue != null) { \n            // 返回值是否是指定类型type\n            return ClassUtils.isAssignableValue(type, returnValue);\n        }\n        else if (Object.class == type \u0026\u0026 void.class == method.getReturnType()) { \n            // 方法无返回值也会匹配Object类型\n            return true;\n        }\n        else { \n            // 方法返回值类型是否匹配指定类型type\n            return ClassUtils.isAssignable(type, method.getReturnType());\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235544-vl83g4v",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235544-vl83g4v",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "AspectJAfterThrowingAdvice"
				}
			]
		},
		{
			"ID": "20230408235544-5sycw8w",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-5sycw8w",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235544-fpsee7a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235544-fpsee7a",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "包装"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AspectJ"
				},
				{
					"Type": "NodeText",
					"Data": "​抛出异常通知方法的Spring AOP "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advice"
				},
				{
					"Type": "NodeText",
					"Data": "​；"
				}
			]
		},
		{
			"ID": "20230408235544-1txbq70",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-1txbq70",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235544-62ngodn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235544-62ngodn",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class AspectJAfterThrowingAdvice extends AbstractAspectJAdvice\n        implements MethodInterceptor, AfterAdvice, Serializable { \n\n    @Override\n    public boolean isBeforeAdvice() { \n        return false;\n    }\n\n    @Override\n    public boolean isAfterAdvice() { \n        return true;\n    }\n\n    @Override\n    public void setThrowingName(String name) { \n        setThrowingNameNoCheck(name);\n    }\n\n    @Override\n    @Nullable\n    public Object invoke(MethodInvocation mi) throws Throwable { \n        try { \n            return mi.proceed();\n        }\n        catch (Throwable ex) { \n            // 根据异常类型判断是否调用\n            if (shouldInvokeOnThrowing(ex)) { \n                invokeAdviceMethod(getJoinPointMatch(), null, ex);\n            }\n            throw ex;\n        }\n    }\n\n    private boolean shouldInvokeOnThrowing(Throwable ex) { \n        // 当前发生的异常是否匹配指定异常类型\n        return getDiscoveredThrowingType().isAssignableFrom(ex.getClass());\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235544-p6290vw",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235544-p6290vw",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "AspectJAroundAdvice"
				}
			]
		},
		{
			"ID": "20230408235544-on7j94l",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-on7j94l",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235544-1f0p10o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235544-1f0p10o",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "包装"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AspectJ"
				},
				{
					"Type": "NodeText",
					"Data": "​环绕通知方法的Spring AOP "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Advice"
				},
				{
					"Type": "NodeText",
					"Data": "​；"
				}
			]
		},
		{
			"ID": "20230408235544-98vvhvj",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-98vvhvj",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235544-v0msi5n",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235544-v0msi5n",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class AspectJAroundAdvice extends AbstractAspectJAdvice implements MethodInterceptor, Serializable { \n\n    @Override\n    public boolean isBeforeAdvice() { \n        return false;\n    }\n\n    @Override\n    public boolean isAfterAdvice() { \n        return false;\n    }\n\n    @Override\n    protected boolean supportsProceedingJoinPoint() { \n        return true;\n    }\n\n    @Override\n    @Nullable\n    public Object invoke(MethodInvocation mi) throws Throwable { \n        if (!(mi instanceof ProxyMethodInvocation)) { \n            throw new IllegalStateException(\"MethodInvocation is not a Spring ProxyMethodInvocation: \" + mi);\n        }\n        ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi;\n        ProceedingJoinPoint pjp = lazyGetProceedingJoinPoint(pmi);\n        JoinPointMatch jpm = getJoinPointMatch(pmi);\n        return invokeAdviceMethod(pjp, jpm, null, null);\n    }\n\n    protected ProceedingJoinPoint lazyGetProceedingJoinPoint(ProxyMethodInvocation rmi) { \n        return new MethodInvocationProceedingJoinPoint(rmi);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235544-ckqaihq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235544-ckqaihq",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "MethodInterceptor"
				}
			]
		},
		{
			"ID": "20230408235544-3qr95u1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-3qr95u1",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235544-82np8q4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235544-82np8q4",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在到达目标的途中拦截接口的调用，子类实现在接口调用之前和之后执行额外处理逻辑；"
				}
			]
		},
		{
			"ID": "20230408235544-wtnd9rg",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-wtnd9rg",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235544-5fbbyn4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235544-5fbbyn4",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@FunctionalInterface\npublic interface MethodInterceptor extends Interceptor { \n\n    // 调用方法调用，可以在方法调用之前和之后执行额外逻辑\n    @Nullable\n    Object invoke(@Nonnull MethodInvocation invocation) throws Throwable;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235544-n65ppv2",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235544-n65ppv2",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ConstructorInterceptor"
				}
			]
		},
		{
			"ID": "20230408235544-54rbhlu",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-54rbhlu",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235544-3ozmimo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235544-3ozmimo",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "拦截构造方法，子类实现在构造方法调用之前和之后执行额外处理逻辑；"
				}
			]
		},
		{
			"ID": "20230408235544-h0t16qw",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-h0t16qw",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心方法"
				}
			]
		},
		{
			"ID": "20230408235544-p0zi4pi",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235544-p0zi4pi",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public interface ConstructorInterceptor extends Interceptor  { \n\n    // 调用构造方法调用，可以在构造方法调用之前和之后执行额外逻辑\n    @Nonnull\n    Object construct(ConstructorInvocation invocation) throws Throwable;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235544-wnxe0s7",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235544-wnxe0s7",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "MethodBeforeAdviceInterceptor"
				}
			]
		},
		{
			"ID": "20230408235544-xo6ihfa",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-xo6ihfa",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235544-5ep0wyo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235544-5ep0wyo",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "包装"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MethodBeforeAdvice"
				},
				{
					"Type": "NodeText",
					"Data": "​的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Interceptor"
				},
				{
					"Type": "NodeText",
					"Data": "​；"
				}
			]
		},
		{
			"ID": "20230408235544-pmrk2ye",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-pmrk2ye",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235544-7x5psg0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235544-7x5psg0",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class MethodBeforeAdviceInterceptor implements MethodInterceptor, BeforeAdvice, Serializable { \n\n    // 前置通知\n    private final MethodBeforeAdvice advice;\n\n\n    public MethodBeforeAdviceInterceptor(MethodBeforeAdvice advice) { \n        // 校验前置通知\n        Assert.notNull(advice, \"Advice must not be null\");\n        this.advice = advice;\n    }\n\n    @Override\n    @Nullable\n    public Object invoke(MethodInvocation mi) throws Throwable { \n        // 先执行前置通知逻辑\n        this.advice.before(mi.getMethod(), mi.getArguments(), mi.getThis());\n        // 再执行方法调用\n        return mi.proceed();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235544-5gbiylk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235544-5gbiylk",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "AfterReturningAdviceInterceptor"
				}
			]
		},
		{
			"ID": "20230408235544-huldfa3",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-huldfa3",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235544-tf7h17u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235544-tf7h17u",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "包装"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AfterReturningAdvice"
				},
				{
					"Type": "NodeText",
					"Data": "​的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Interceptor"
				},
				{
					"Type": "NodeText",
					"Data": "​；"
				}
			]
		},
		{
			"ID": "20230408235544-e4prt78",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-e4prt78",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235544-8awfzy3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235544-8awfzy3",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class AfterReturningAdviceInterceptor implements MethodInterceptor, AfterAdvice, Serializable { \n\n    // 后置通知\n    private final AfterReturningAdvice advice;\n\n\n    public AfterReturningAdviceInterceptor(AfterReturningAdvice advice) { \n        // 校验后置通知\n        Assert.notNull(advice, \"Advice must not be null\");\n        this.advice = advice;\n    }\n\n    @Override\n    @Nullable\n    public Object invoke(MethodInvocation mi) throws Throwable { \n        // 先执行方法调用\n        Object retVal = mi.proceed();\n        // 再执行后置通知逻辑\n        this.advice.afterReturning(retVal, mi.getMethod(), mi.getArguments(), mi.getThis());\n        return retVal;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235544-xxg16fl",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235544-xxg16fl",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ThrowsAdviceInterceptor"
				}
			]
		},
		{
			"ID": "20230408235544-kwmb6ao",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-kwmb6ao",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235544-3wd33mt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235544-3wd33mt",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "包装"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ThrowsAdvice"
				},
				{
					"Type": "NodeText",
					"Data": "​的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Interceptor"
				},
				{
					"Type": "NodeText",
					"Data": "​；\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ThrowsAdvice"
				},
				{
					"Type": "NodeText",
					"Data": "​实现子类中的异常处理方法的签名必须是以下格式：\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "void afterThrowing([Method, args, target], ThrowableSubclass);"
				},
				{
					"Type": "NodeText",
					"Data": "​\n比如："
				}
			]
		},
		{
			"ID": "20230408235544-uhucvgq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235544-uhucvgq",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public void afterThrowing(Exception ex)\npublic void afterThrowing(RemoteException)\npublic void afterThrowing(Method method, Object[] args, Object target, Exception ex)\npublic void afterThrowing(Method method, Object[] args, Object target, ServletException ex)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235544-5kliya8",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-5kliya8",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235544-e6rtl6r",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235544-e6rtl6r",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class ThrowsAdviceInterceptor implements MethodInterceptor, AfterAdvice { \n\n    private static final String AFTER_THROWING = \"afterThrowing\";\n\n    // 抛出异常增强\n    private final Object throwsAdvice;\n\n    // 缓存异常处理方法，以异常类型为KEY\n    private final Map\u003cClass\u003c?\u003e, Method\u003e exceptionHandlerMap = new HashMap\u003c\u003e();\n\n\n    public ThrowsAdviceInterceptor(Object throwsAdvice) { \n        // 校验抛出异常增强\n        Assert.notNull(throwsAdvice, \"Advice must not be null\");\n        this.throwsAdvice = throwsAdvice;\n\n        Method[] methods = throwsAdvice.getClass().getMethods();\n        // 遍历抛出异常增强的所有方法，寻找异常处理方法\n        for (Method method : methods) { \n            if (method.getName().equals(AFTER_THROWING) \u0026\u0026\n                    (method.getParameterCount() == 1 || method.getParameterCount() == 4)) { \n                Class\u003c?\u003e throwableParam = method.getParameterTypes()[method.getParameterCount() - 1];\n                if (Throwable.class.isAssignableFrom(throwableParam)) { \n                    // 缓存异常处理方法，方便直接根据异常类型直接获取异常处理方法\n                    this.exceptionHandlerMap.put(throwableParam, method);\n                    if (logger.isDebugEnabled()) { \n                        logger.debug(\"Found exception handler method on throws advice: \" + method);\n                    }\n                }\n            }\n        }\n\n        // 校验异常处理方法有效性\n        if (this.exceptionHandlerMap.isEmpty()) { \n            throw new IllegalArgumentException(\n                    \"At least one handler method must be found in class [\" + throwsAdvice.getClass() + \"]\");\n        }\n    }\n\n    @Override\n    @Nullable\n    public Object invoke(MethodInvocation mi) throws Throwable { \n        try { \n            // 执行方法调用\n            return mi.proceed();\n        }\n        catch (Throwable ex) { \n            // 发生异常，则根据异常类型获取对应的异常处理方法进行处理\n            Method handlerMethod = getExceptionHandler(ex);\n            if (handlerMethod != null) { \n                invokeHandlerMethod(mi, ex, handlerMethod);\n            }\n            throw ex;\n        }\n    }\n\n    @Nullable\n    private Method getExceptionHandler(Throwable exception) { \n        Class\u003c?\u003e exceptionClass = exception.getClass();\n        if (logger.isTraceEnabled()) { \n            logger.trace(\"Trying to find handler for exception of type [\" + exceptionClass.getName() + \"]\");\n        }\n        Method handler = this.exceptionHandlerMap.get(exceptionClass);\n        while (handler == null \u0026\u0026 exceptionClass != Throwable.class) { \n            // 当前异常类型未找到对应的异常处理方法，则继续根据其父类进行查找\n            exceptionClass = exceptionClass.getSuperclass();\n            handler = this.exceptionHandlerMap.get(exceptionClass);\n        }\n        if (handler != null \u0026\u0026 logger.isTraceEnabled()) { \n            logger.trace(\"Found handler for exception of type [\" + exceptionClass.getName() + \"]: \" + handler);\n        }\n        return handler;\n    }\n\n    private void invokeHandlerMethod(MethodInvocation mi, Throwable ex, Method method) throws Throwable { \n        Object[] handlerArgs;\n        // 准备方法参数\n        if (method.getParameterCount() == 1) { \n            handlerArgs = new Object[] { ex};\n        }\n        else { \n            handlerArgs = new Object[] { mi.getMethod(), mi.getArguments(), mi.getThis(), ex};\n        }\n        try { \n            // 调用异常处理方法\n            method.invoke(this.throwsAdvice, handlerArgs);\n        }\n        catch (InvocationTargetException targetEx) { \n            throw targetEx.getTargetException();\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235544-0rwe9r8",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235544-0rwe9r8",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "AsyncExecutionInterceptor"
				}
			]
		},
		{
			"ID": "20230408235544-nxqo8ut",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-nxqo8ut",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235544-pv1lvys",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235544-pv1lvys",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AsyncTaskExecutor"
				},
				{
					"Type": "NodeText",
					"Data": "​异步执行方法调用的AOP "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MethodInterceptor"
				},
				{
					"Type": "NodeText",
					"Data": "​；"
				}
			]
		},
		{
			"ID": "20230408235544-ok39k4h",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-ok39k4h",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235544-fo406f7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235544-fo406f7",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class AsyncExecutionInterceptor extends AsyncExecutionAspectSupport implements MethodInterceptor, Ordered { \n\n    @Override\n    @Nullable\n    public Object invoke(final MethodInvocation invocation) throws Throwable { \n        Class\u003c?\u003e targetClass = (invocation.getThis() != null ? AopUtils.getTargetClass(invocation.getThis()) : null);\n        Method specificMethod = ClassUtils.getMostSpecificMethod(invocation.getMethod(), targetClass);\n        final Method userDeclaredMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);\n\n        // 获取方法调用对应的执行器\n        AsyncTaskExecutor executor = determineAsyncExecutor(userDeclaredMethod);\n        if (executor == null) { \n            // 执行器必须存在，否则直接抛出异常\n            throw new IllegalStateException(\n                    \"No executor specified and no default executor set on AsyncExecutionInterceptor either\");\n        }\n\n        // 封装方法调用为异步任务\n        Callable\u003cObject\u003e task = () -\u003e { \n            try { \n                // 调用方法调用\n                Object result = invocation.proceed();\n                if (result instanceof Future) { \n                    // 等待返回值\n                    return ((Future\u003c?\u003e) result).get();\n                }\n            }\n            catch (ExecutionException ex) { \n                // 异常处理\n                handleError(ex.getCause(), userDeclaredMethod, invocation.getArguments());\n            }\n            catch (Throwable ex) { \n                // 异常处理\n                handleError(ex, userDeclaredMethod, invocation.getArguments());\n            }\n            return null;\n        };\n\n        // 提交异步任务\n        return doSubmit(task, executor, invocation.getMethod().getReturnType());\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235544-00ssbef",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235544-00ssbef",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "CacheInterceptor"
				}
			]
		},
		{
			"ID": "20230408235544-v79tr44",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-v79tr44",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235544-b9ah449",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235544-b9ah449",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "支持Spring声明式缓存管理的AOP "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MethodInterceptor"
				},
				{
					"Type": "NodeText",
					"Data": "​；"
				}
			]
		},
		{
			"ID": "20230408235544-gvy9v70",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-gvy9v70",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235544-v6q91aq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235544-v6q91aq",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class CacheInterceptor extends CacheAspectSupport implements MethodInterceptor, Serializable { \n\n    @Override\n    @Nullable\n    public Object invoke(final MethodInvocation invocation) throws Throwable { \n        Method method = invocation.getMethod();\n\n        // 封装方法调用为缓存操作调用\n        CacheOperationInvoker aopAllianceInvoker = () -\u003e { \n            try { \n                // 调用方法调用\n                return invocation.proceed();\n            }\n            catch (Throwable ex) { \n                throw new CacheOperationInvoker.ThrowableWrapper(ex);\n            }\n        };\n\n        // 获取目标对象\n        Object target = invocation.getThis();\n        Assert.state(target != null, \"Target must not be null\");\n        try { \n            // 执行缓存操作调用\n            return execute(aopAllianceInvoker, target, method, invocation.getArguments());\n        }\n        catch (CacheOperationInvoker.ThrowableWrapper th) { \n            throw th.getOriginal();\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235544-uad8agp",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235544-uad8agp",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "TransactionInterceptor"
				}
			]
		},
		{
			"ID": "20230408235544-qijmgky",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-qijmgky",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235544-w7kohec",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235544-w7kohec",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "支持Spring声明式事务管理的AOP "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MethodInterceptor"
				},
				{
					"Type": "NodeText",
					"Data": "​；"
				}
			]
		},
		{
			"ID": "20230408235544-pedlrtr",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-pedlrtr",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235544-ops0yxv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235544-ops0yxv",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class TransactionInterceptor extends TransactionAspectSupport implements MethodInterceptor, Serializable { \n\n    @Override\n    @Nullable\n    public Object invoke(MethodInvocation invocation) throws Throwable { \n        // Work out the target class: may be {@code null}.\n        // The TransactionAttributeSource should be passed the target class\n        // as well as the method, which may be from an interface.\n        Class\u003c?\u003e targetClass = (invocation.getThis() != null ? AopUtils.getTargetClass(invocation.getThis()) : null);\n\n        // Adapt to TransactionAspectSupport's invokeWithinTransaction...\n        return invokeWithinTransaction(invocation.getMethod(), targetClass, new CoroutinesInvocationCallback() { \n            @Override\n            @Nullable\n            public Object proceedWithInvocation() throws Throwable { \n                // 调用方法调用\n                return invocation.proceed();\n            }\n            @Override\n            public Object getTarget() { \n                return invocation.getThis();\n            }\n            @Override\n            public Object[] getArguments() { \n                return invocation.getArguments();\n            }\n        });\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235544-zsacdtk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235544-zsacdtk",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "AbstractTraceInterceptor"
				}
			]
		},
		{
			"ID": "20230408235544-vv5r7ie",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-vv5r7ie",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235544-2hsc44o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235544-2hsc44o",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "日志跟踪的基础"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MethodInterceptor"
				},
				{
					"Type": "NodeText",
					"Data": "​实现；"
				}
			]
		},
		{
			"ID": "20230408235544-lr39iw8",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-lr39iw8",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235544-cz43dn1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235544-cz43dn1",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public abstract class AbstractTraceInterceptor implements MethodInterceptor, Serializable { \n\n    @Override\n    @Nullable\n    public Object invoke(MethodInvocation invocation) throws Throwable { \n        // 获取Log\n        Log logger = getLoggerForInvocation(invocation);\n        if (isInterceptorEnabled(invocation, logger)) { \n            // 日志跟踪调用\n            return invokeUnderTrace(invocation, logger);\n        }\n        else { \n            // 调用方法调用\n            return invocation.proceed();\n        }\n    }\n\n    // 实现子类确保方法调用一定被调用，可以在方法调用前后执行日志跟踪\n    @Nullable\n    protected abstract Object invokeUnderTrace(MethodInvocation invocation, Log logger) throws Throwable;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235544-m1xonnp",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235544-m1xonnp",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ExposeInvocationInterceptor"
				}
			]
		},
		{
			"ID": "20230408235544-o33wpfu",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-o33wpfu",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235544-dthcnxj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235544-dthcnxj",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "将当前"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MethodInvocation"
				},
				{
					"Type": "NodeText",
					"Data": "​放到当前线程对应的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ThreadLocalMap"
				},
				{
					"Type": "NodeText",
					"Data": "​里，当作一个线程本地变量；\n如果使用的话，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ExposeInvocationInterceptor"
				},
				{
					"Type": "NodeText",
					"Data": "​正常都是在拦截器链首位；"
				}
			]
		},
		{
			"ID": "20230408235544-ymjvdxy",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-ymjvdxy",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235544-7p88cpb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235544-7p88cpb",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public final class ExposeInvocationInterceptor implements MethodInterceptor, PriorityOrdered, Serializable { \n\n    // 单例\n    public static final ExposeInvocationInterceptor INSTANCE = new ExposeInvocationInterceptor();\n\n    private static final ThreadLocal\u003cMethodInvocation\u003e invocation =\n            new NamedThreadLocal\u003c\u003e(\"Current AOP method invocation\");\n\n\n    // 获取当前MethodInvocation\n    public static MethodInvocation currentInvocation() throws IllegalStateException { \n        MethodInvocation mi = invocation.get();\n        if (mi == null) { \n            throw new IllegalStateException(\n                    \"No MethodInvocation found: Check that an AOP invocation is in progress and that the \" +\n                    \"ExposeInvocationInterceptor is upfront in the interceptor chain. Specifically, note that \" +\n                    \"advices with order HIGHEST_PRECEDENCE will execute before ExposeInvocationInterceptor! \" +\n                    \"In addition, ExposeInvocationInterceptor and ExposeInvocationInterceptor.currentInvocation() \" +\n                    \"must be invoked from the same thread.\");\n        }\n        return mi;\n    }\n\n\n    // 确保单例\n    private ExposeInvocationInterceptor() { \n    }\n\n    @Override\n    @Nullable\n    public Object invoke(MethodInvocation mi) throws Throwable { \n        // 缓存当前MethodInvocation\n        MethodInvocation oldInvocation = invocation.get();\n        // 更新当前MethodInvocation\n        invocation.set(mi);\n        try { \n            // 调用方法调用\n            return mi.proceed();\n        }\n        finally { \n            // 还原当前MethodInvocation\n            invocation.set(oldInvocation);\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408235544-ataw0k5",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408235544-ataw0k5",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "DelegatingIntroductionInterceptor"
				}
			]
		},
		{
			"ID": "20230408235544-s0qz4cz",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-s0qz4cz",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20230408235544-wfjzv63",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408235544-wfjzv63",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "支持"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "引介"
				},
				{
					"Type": "NodeText",
					"Data": "​功能的AOP "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MethodInterceptor"
				},
				{
					"Type": "NodeText",
					"Data": "​；"
				}
			]
		},
		{
			"ID": "20230408235544-qw9ofso",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408235544-qw9ofso",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心代码"
				}
			]
		},
		{
			"ID": "20230408235544-5qv14i2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408235544-5qv14i2",
				"updated": "20230408235544"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class DelegatingIntroductionInterceptor extends IntroductionInfoSupport\n        implements IntroductionInterceptor { \n\n    @Override\n    @Nullable\n    public Object invoke(MethodInvocation mi) throws Throwable { \n        if (isMethodOnIntroducedInterface(mi)) { \n            Object retVal = AopUtils.invokeJoinpointUsingReflection(this.delegate, mi.getMethod(), mi.getArguments());\n\n            // 如果返回值就是delegate本身，那么真实想返回的应该是proxy\n            if (retVal == this.delegate \u0026\u0026 mi instanceof ProxyMethodInvocation) { \n                Object proxy = ((ProxyMethodInvocation) mi).getProxy();\n                if (mi.getMethod().getReturnType().isInstance(proxy)) { \n                    retVal = proxy;\n                }\n            }\n            return retVal;\n        }\n\n        return doProceed(mi);\n    }\n\n    @Nullable\n    protected Object doProceed(MethodInvocation mi) throws Throwable { \n        // 调用方法调用\n        return mi.proceed();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}