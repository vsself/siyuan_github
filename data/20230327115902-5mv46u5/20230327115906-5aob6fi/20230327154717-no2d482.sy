{
	"ID": "20230327154717-no2d482",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230327154717-no2d482",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230327154728-wzlvho6\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230327154728-5yrkhjx\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230327154728-5yrkhjx\u0026quot;,\u0026quot;focusStart\u0026quot;:102,\u0026quot;focusEnd\u0026quot;:102}",
		"title": "竞态条件与临界区",
		"updated": "20230327154728"
	},
	"Children": [
		{
			"ID": "20230327154728-wzlvho6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154728-wzlvho6",
				"updated": "20230327154728"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在同一程序中运行多个线程本身不会导致问题，问题在于多个线程访问了相同的资源。如，同一内存区（变量，数组，或对象）、系统（数据库，web services等）或文件。实际上，这些问题只有在一或多个线程向这些资源做了写操作时才有可能发生，只要资源没有发生变化,多个线程读取相同的资源就是安全的。"
				}
			]
		},
		{
			"ID": "20230327154728-waotpm8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154728-waotpm8",
				"updated": "20230327154728"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "多线程同时执行下面的代码可能会出错："
				}
			]
		},
		{
			"ID": "20230327154728-nwzx2xn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154728-nwzx2xn",
				"updated": "20230327154728"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "[code lang=”java”]\npublic class Counter {\nprotected long count = 0;\npublic void add(long value){\nthis.count = this.count + value;\n}\n}\n[/code]"
				}
			]
		},
		{
			"ID": "20230327154728-19zydvr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154728-19zydvr",
				"updated": "20230327154728"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "想象下线程A和B同时执行同一个Counter对象的add()方法，我们无法知道操作系统何时会在两个线程之间切换。JVM并不是将这段代码视为单条指令来执行的，而是按照下面的顺序："
				}
			]
		},
		{
			"ID": "20230327154728-rx2rh5l",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230327154728-rx2rh5l",
				"updated": "20230327154728"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "从内存获取 this.count 的值放到寄存器\n将寄存器中的值增加value\n将寄存器中的值写回内存\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230327154728-ehtme7l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154728-ehtme7l",
				"updated": "20230327154728"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "观察线程A和B交错执行会发生什么："
				}
			]
		},
		{
			"ID": "20230327154728-q3n5y83",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230327154728-q3n5y83",
				"updated": "20230327154728"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\tthis.count = 0;\n   A:\t读取 this.count 到一个寄存器 (0)\n   B:\t读取 this.count 到一个寄存器 (0)\n   B: \t将寄存器的值加2\n   B:\t回写寄存器值(2)到内存. this.count 现在等于 2\n   A:\t将寄存器的值加3\n   A:\t回写寄存器值(3)到内存. this.count 现在等于 3\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230327154728-9vktn4q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154728-9vktn4q",
				"updated": "20230327154728"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "两个线程分别加了2和3到count变量上，两个线程执行结束后count变量的值应该等于5。然而由于两个线程是交叉执行的，两个线程从内存中读出的初始值都是0。然后各自加了2和3，并分别写回内存。最终的值并不是期望的5，而是最后写回内存的那个线程的值，上面例子中最后写回内存的是线程A，但实际中也可能是线程B。如果没有采用合适的同步机制，线程间的交叉执行情况就无法预料。"
				}
			]
		},
		{
			"ID": "20230327154728-tzid4wr",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230327154728-tzid4wr",
				"updated": "20230327154728"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "竞态条件 \u0026 临界区"
				}
			]
		},
		{
			"ID": "20230327154728-5yrkhjx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154728-5yrkhjx",
				"updated": "20230327154728"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当两个线程竞争同一资源时，如果对资源的访问顺序敏感，就称存在竞态条件。导致竞态条件发生的代码区称作临界区。上例中add()方法就是一个临界区,它会产生竞态条件。在临界区中使用适当的同步就可以避免竞态条件。"
				}
			]
		}
	]
}