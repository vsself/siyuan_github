{
	"ID": "20230327154748-r1fboq1",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230327154748-r1fboq1",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230327154759-bqr35ts\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230327154759-fqtju0m\u0026quot;,\u0026quot;scrollTop\u0026quot;:2424,\u0026quot;focusId\u0026quot;:\u0026quot;20230327154759-fqtju0m\u0026quot;,\u0026quot;focusStart\u0026quot;:57,\u0026quot;focusEnd\u0026quot;:57}",
		"title": "线程安全与共享资源",
		"updated": "20230327154759"
	},
	"Children": [
		{
			"ID": "20230327154759-bqr35ts",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-bqr35ts",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "允许被多个线程同时执行的代码称作线程安全的代码。线程安全的代码不包含竞态条件。当多个线程同时更新共享资源时会引发竞态条件。因此，了解Java线程执行时共享了什么资源很重要。"
				}
			]
		},
		{
			"ID": "20230327154759-ose0wzf",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230327154759-ose0wzf",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "局部变量"
				}
			]
		},
		{
			"ID": "20230327154759-p5xdtyk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-p5xdtyk",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "局部变量存储在线程自己的栈中。也就是说，局部变量永远也不会被多个线程共享。所以，基础类型的局部变量是线程安全的。下面是基础类型的局部变量的一个例子："
				}
			]
		},
		{
			"ID": "20230327154759-oce4l1c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-oce4l1c",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "[code lang=”java”]\npublic void someMethod(){"
				}
			]
		},
		{
			"ID": "20230327154759-2luxb25",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-2luxb25",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "long threadSafeInt = 0;"
				}
			]
		},
		{
			"ID": "20230327154759-7shnsnf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-7shnsnf",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "threadSafeInt++;\n}\n[/code]"
				}
			]
		},
		{
			"ID": "20230327154759-festyqu",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230327154759-festyqu",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "局部的对象引用"
				}
			]
		},
		{
			"ID": "20230327154759-jvnce2f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-jvnce2f",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对象的局部引用和基础类型的局部变量不太一样。尽管引用本身没有被共享，但引用所指的对象并没有存储在线程的栈内。所有的对象都存在共享堆中。如果在某个方法中创建的对象不会逃逸出（"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em",
					"TextMarkTextContent": "译者注：即该对象不会被其它方法获得，也不会被非局部变量引用到"
				},
				{
					"Type": "NodeText",
					"Data": "）该方法，那么它就是线程安全的。实际上，哪怕将这个对象作为参数传给其它方法，只要别的线程获取不到这个对象，那它仍是线程安全的。下面是一个线程安全的局部引用样例："
				}
			]
		},
		{
			"ID": "20230327154759-97pxef4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-97pxef4",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "[code lang=”java”]\npublic void someMethod(){"
				}
			]
		},
		{
			"ID": "20230327154759-5t7ztxz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-5t7ztxz",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "LocalObject localObject = new LocalObject();"
				}
			]
		},
		{
			"ID": "20230327154759-et4jv1m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-et4jv1m",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "localObject.callMethod();\nmethod2(localObject);\n}"
				}
			]
		},
		{
			"ID": "20230327154759-79axmqs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-79axmqs",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public void method2(LocalObject localObject){\nlocalObject.setValue(\"value\");\n}\n[/code]"
				}
			]
		},
		{
			"ID": "20230327154759-6zv09kj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-6zv09kj",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "样例中LocalObject对象没有被方法返回，也没有被传递给someMethod()方法外的对象。每个执行someMethod()的线程都会创建自己的LocalObject对象，并赋值给localObject引用。因此，这里的LocalObject是线程安全的。事实上，整个someMethod()都是线程安全的。即使将LocalObject作为参数传给同一个类的其它方法或其它类的方法时，它仍然是线程安全的。当然，如果LocalObject通过某些方法被传给了别的线程，那它就不再是线程安全的了。"
				}
			]
		},
		{
			"ID": "20230327154759-rg5aouv",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230327154759-rg5aouv",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对象成员"
				}
			]
		},
		{
			"ID": "20230327154759-kc96p4h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-kc96p4h",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对象成员存储在堆上。如果两个线程同时更新同一个对象的同一个成员，那这个代码就不是线程安全的。下面是一个样例："
				}
			]
		},
		{
			"ID": "20230327154759-x165ucv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-x165ucv",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "[code lang=”java”]\npublic class NotThreadSafe{\nStringBuilder builder = new StringBuilder();"
				}
			]
		},
		{
			"ID": "20230327154759-jl06bov",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-jl06bov",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public add(String text){\nthis.builder.append(text);\n}\n}\n[/code]"
				}
			]
		},
		{
			"ID": "20230327154759-pgl9wdg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-pgl9wdg",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果两个线程同时调用同一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "NotThreadSafe"
				},
				{
					"Type": "NodeText",
					"Data": "​实例上的add()方法，就会有竞态条件问题。例如："
				}
			]
		},
		{
			"ID": "20230327154759-z8l7tmx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-z8l7tmx",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "[code lang=”java”]\nNotThreadSafe sharedInstance = new NotThreadSafe();"
				}
			]
		},
		{
			"ID": "20230327154759-v7auu8k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-v7auu8k",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "new Thread(new MyRunnable(sharedInstance)).start();\nnew Thread(new MyRunnable(sharedInstance)).start();"
				}
			]
		},
		{
			"ID": "20230327154759-2t5lkth",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-2t5lkth",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public class MyRunnable implements Runnable{\nNotThreadSafe instance = null;"
				}
			]
		},
		{
			"ID": "20230327154759-q1ocvcg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-q1ocvcg",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public MyRunnable(NotThreadSafe instance){\nthis.instance = instance;\n}"
				}
			]
		},
		{
			"ID": "20230327154759-ulk2o7k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-ulk2o7k",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public void run(){\nthis.instance.add(\"some text\");\n}\n}\n[/code]"
				}
			]
		},
		{
			"ID": "20230327154759-z2tz8g1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-z2tz8g1",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意两个MyRunnable共享了同一个NotThreadSafe对象。因此，当它们调用add()方法时会造成竞态条件。"
				}
			]
		},
		{
			"ID": "20230327154759-d62tn22",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-d62tn22",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当然，如果这两个线程在不同的NotThreadSafe实例上调用call()方法，就不会导致竞态条件。下面是稍微修改后的例子："
				}
			]
		},
		{
			"ID": "20230327154759-49o17qf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-49o17qf",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "[code lang=”java”]\nnew Thread(new MyRunnable(new NotThreadSafe())).start();\nnew Thread(new MyRunnable(new NotThreadSafe())).start();\n[/code]"
				}
			]
		},
		{
			"ID": "20230327154759-hxt12ck",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-hxt12ck",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现在两个线程都有自己单独的NotThreadSafe对象，调用add()方法时就会互不干扰，再也不会有竞态条件问题了。所以非线程安全的对象仍可以通过某种方式来消除竞态条件。"
				}
			]
		},
		{
			"ID": "20230327154759-4ewogp3",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230327154759-4ewogp3",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "线程控制逃逸规则"
				}
			]
		},
		{
			"ID": "20230327154759-bypnthl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-bypnthl",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "线程控制逃逸规则可以帮助你判断代码中对某些资源的访问是否是线程安全的。"
				}
			]
		},
		{
			"ID": "20230327154759-u68gc45",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230327154759-u68gc45",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "如果一个资源的创建，使用，销毁都在同一个线程内完成，\n且永远不会脱离该线程的控制，则该资源的使用就是线程安全的。\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230327154759-9p3y60a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-9p3y60a",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "资源可以是对象，数组，文件，数据库连接，套接字等等。Java中你无需主动销毁对象，所以“销毁”指不再有引用指向对象。"
				}
			]
		},
		{
			"ID": "20230327154759-uamwlap",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-uamwlap",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "即使对象本身线程安全，但如果该对象中包含其他资源（文件，数据库连接），整个应用也许就不再是线程安全的了。比如2个线程都创建了各自的数据库连接，每个连接自身是线程安全的，但它们所连接到的同一个数据库也许不是线程安全的。比如，2个线程执行如下代码："
				}
			]
		},
		{
			"ID": "20230327154759-wnkyifp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230327154759-wnkyifp",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "检查记录X是否存在，如果不存在，插入X\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230327154759-cn0w1jp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-cn0w1jp",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果两个线程同时执行，而且碰巧检查的是同一个记录，那么两个线程最终可能都插入了记录："
				}
			]
		},
		{
			"ID": "20230327154759-n4kk9v5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230327154759-n4kk9v5",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "线程1检查记录X是否存在。检查结果：不存在\n线程2检查记录X是否存在。检查结果：不存在\n线程1插入记录X\n线程2插入记录X\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230327154759-fqtju0m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154759-fqtju0m",
				"updated": "20230327154759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "同样的问题也会发生在文件或其他共享资源上。因此，区分某个线程控制的对象是资源本身，还是仅仅到某个资源的引用很重要。"
				}
			]
		}
	]
}