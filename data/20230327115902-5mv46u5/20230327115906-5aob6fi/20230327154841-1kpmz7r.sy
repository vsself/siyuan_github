{
	"ID": "20230327154841-1kpmz7r",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230327154841-1kpmz7r",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230327154856-g9ggx8m\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230327154856-lw3x7ac\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230327154856-lw3x7ac\u0026quot;,\u0026quot;focusStart\u0026quot;:130,\u0026quot;focusEnd\u0026quot;:130}",
		"title": "Java内存模型",
		"updated": "20230327184248"
	},
	"Children": [
		{
			"ID": "20230327154856-g9ggx8m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-g9ggx8m",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java内存模型规范了Java虚拟机与计算机内存是如何协同工作的。Java虚拟机是一个完整的计算机的一个模型，因此这个模型自然也包含一个内存模型——又称为Java内存模型。"
				}
			]
		},
		{
			"ID": "20230327154856-9rimk5b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-9rimk5b",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果你想设计表现良好的并发程序，理解Java内存模型是非常重要的。Java内存模型规定了如何和何时可以看到由其他线程修改过后的共享变量的值，以及在必须时如何同步的访问共享变量。"
				}
			]
		},
		{
			"ID": "20230327154856-58rtavc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-58rtavc",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "原始的Java内存模型存在一些不足，因此Java内存模型在Java1.5时被重新修订。这个版本的Java内存模型在Java8中人在使用。"
				}
			]
		},
		{
			"ID": "20230327154856-clibhlk",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230327154856-clibhlk",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java内存模型内部原理"
				}
			]
		},
		{
			"ID": "20230327154856-kpczl05",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-kpczl05",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java内存模型把Java虚拟机内部划分为线程栈和堆。这张图演示了Java内存模型的逻辑视图。"
				}
			]
		},
		{
			"ID": "20230327154856-1l36pm4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-1l36pm4",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Java Memory Model"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-java-memory-model-1-20230327154904-iiazo62.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230327154856-59zrpqh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-59zrpqh",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "每一个运行在Java虚拟机里的线程都拥有自己的线程栈。这个线程栈包含了这个线程调用的方法当前执行点相关的信息。一个线程仅能访问自己的线程栈。一个线程创建的本地变量对其它线程不可见，仅自己可见。即使两个线程执行同样的代码，这两个线程任然在在自己的线程栈中的代码来创建本地变量。因此，每个线程拥有每个本地变量的独有版本。"
				}
			]
		},
		{
			"ID": "20230327154856-1cof7xl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-1cof7xl",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "所有原始类型的本地变量都存放在线程栈上，因此对其它线程不可见。一个线程可能向另一个线程传递一个原始类型变量的拷贝，但是它不能共享这个原始类型变量自身。"
				}
			]
		},
		{
			"ID": "20230327154856-7u32e2t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-7u32e2t",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "堆上包含在Java程序中创建的所有对象，无论是哪一个对象创建的。这包括原始类型的对象版本。如果一个对象被创建然后赋值给一个局部变量，或者用来作为另一个对象的成员变量，这个对象任然是存放在堆上。"
				}
			]
		},
		{
			"ID": "20230327154856-8b4r378",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-8b4r378",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下面这张图演示了调用栈和本地变量存放在线程栈上，对象存放在堆上。"
				}
			]
		},
		{
			"ID": "20230327154856-i2s1ctj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-i2s1ctj",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "enter image description here"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-java-memory-model-2-20230327154906-km1uk9k.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230327154856-nn1v21j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-nn1v21j",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一个本地变量可能是原始类型，在这种情况下，它总是“呆在”线程栈上。"
				}
			]
		},
		{
			"ID": "20230327154856-go3f2p1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-go3f2p1",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一个本地变量也可能是指向一个对象的一个引用。在这种情况下，引用（这个本地变量）存放在线程栈上，但是对象本身存放在堆上。"
				}
			]
		},
		{
			"ID": "20230327154856-1gnf3ui",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-1gnf3ui",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一个对象可能包含方法，这些方法可能包含本地变量。这些本地变量任然存放在线程栈上，即使这些方法所属的对象存放在堆上。"
				}
			]
		},
		{
			"ID": "20230327154856-nzvq7dc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-nzvq7dc",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一个对象的成员变量可能随着这个对象自身存放在堆上。不管这个成员变量是原始类型还是引用类型。"
				}
			]
		},
		{
			"ID": "20230327154856-8f4que2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-8f4que2",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "静态成员变量跟随着类定义一起也存放在堆上。"
				}
			]
		},
		{
			"ID": "20230327154856-tgo2nmo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-tgo2nmo",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "存放在堆上的对象可以被所有持有对这个对象引用的线程访问。当一个线程可以访问一个对象时，它也可以访问这个对象的成员变量。如果两个线程同时调用同一个对象上的同一个方法，它们将会都访问这个对象的成员变量，但是每一个线程都拥有这个本地变量的私有拷贝。"
				}
			]
		},
		{
			"ID": "20230327154856-8hi373z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-8hi373z",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下图演示了上面提到的点："
				}
			]
		},
		{
			"ID": "20230327154856-0nz9sse",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-0nz9sse",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "enter image description here"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-java-memory-model-3-20230327154908-zcnm7fk.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230327154856-zwo8grn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-zwo8grn",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "两个线程拥有一些列的本地变量。其中一个本地变量（Local Variable 2）执行堆上的一个共享对象（Object 3）。这两个线程分别拥有同一个对象的不同引用。这些引用都是本地变量，因此存放在各自线程的线程栈上。这两个不同的引用指向堆上同一个对象。"
				}
			]
		},
		{
			"ID": "20230327154856-08poo56",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-08poo56",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意，这个共享对象（Object 3）持有Object2和Object4一个引用作为其成员变量（如图中Object3指向Object2和Object4的箭头）。通过在Object3中这些成员变量引用，这两个线程就可以访问Object2和Object4。"
				}
			]
		},
		{
			"ID": "20230327154856-y1dck07",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-y1dck07",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这张图也展示了指向堆上两个不同对象的一个本地变量。在这种情况下，指向两个不同对象的引用不是同一个对象。理论上，两个线程都可以访问Object1和Object5，如果两个线程都拥有两个对象的引用。但是在上图中，每一个线程仅有一个引用指向两个对象其中之一。"
				}
			]
		},
		{
			"ID": "20230327154856-wh2d3xo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-wh2d3xo",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因此，什么类型的Java代码会导致上面的内存图呢？如下所示："
				}
			]
		},
		{
			"ID": "20230327154856-5dvvjxg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-5dvvjxg",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "[code lang=”java”][/code]"
				}
			]
		},
		{
			"ID": "20230327154856-fc4mfke",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230327154856-fc4mfke",
				"updated": "20230327182430"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class MyRunnable implements Runnable() {\n\n    public void run() {\n        methodOne();\n    }\n\n    public void methodOne() {\n        int localVariable1 = 45;\n\n        MySharedObject localVariable2 =\n            MySharedObject.sharedInstance;\n\n        //... do more with local variables.\n\n        methodTwo();\n    }\n\n    public void methodTwo() {\n        Integer localVariable1 = new Integer(99);\n\n        //... do more with local variable.\n    }\n}\n\n\npublic class MySharedObject {\n\n    //static variable pointing to instance of MySharedObject\n\n    public static final MySharedObject sharedInstance =\n        new MySharedObject();\n\n\n    //member variables pointing to two objects on the heap\n\n    public Integer object2 = new Integer(22);\n    public Integer object4 = new Integer(44);\n\n    public long member1 = 12345;\n    public long member1 = 67890;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230327154856-40ouak6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-40ouak6",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "[code][/code]"
				}
			]
		},
		{
			"ID": "20230327154856-8vt0var",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-8vt0var",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果两个线程同时执行"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "run()"
				},
				{
					"Type": "NodeText",
					"Data": "​方法，就会出现上图所示的情景。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "run()"
				},
				{
					"Type": "NodeText",
					"Data": "​方法调用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "methodOne()"
				},
				{
					"Type": "NodeText",
					"Data": "​方法，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "methodOne()"
				},
				{
					"Type": "NodeText",
					"Data": "​调用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "methodTwo()"
				},
				{
					"Type": "NodeText",
					"Data": "​方法。"
				}
			]
		},
		{
			"ID": "20230327154856-d1mde04",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-d1mde04",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "methodOne()"
				},
				{
					"Type": "NodeText",
					"Data": "​声明了一个原始类型的本地变量和一个引用类型的本地变量。"
				}
			]
		},
		{
			"ID": "20230327154856-megx4sr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-megx4sr",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "每个线程执行"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "methodOne()"
				},
				{
					"Type": "NodeText",
					"Data": "​都会在它们对应的线程栈上创建"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "localVariable1"
				},
				{
					"Type": "NodeText",
					"Data": "​和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "localVariable2"
				},
				{
					"Type": "NodeText",
					"Data": "​的私有拷贝。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "localVariable1"
				},
				{
					"Type": "NodeText",
					"Data": "​变量彼此完全独立，仅“生活”在每个线程的线程栈上。一个线程看不到另一个线程对它的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "localVariable1"
				},
				{
					"Type": "NodeText",
					"Data": "​私有拷贝做出的修改。"
				}
			]
		},
		{
			"ID": "20230327154856-qnkzszd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-qnkzszd",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "每个线程执行"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "methodOne()"
				},
				{
					"Type": "NodeText",
					"Data": "​时也将会创建它们各自的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "localVariable2"
				},
				{
					"Type": "NodeText",
					"Data": "​拷贝。然而，两个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "localVariable2"
				},
				{
					"Type": "NodeText",
					"Data": "​的不同拷贝都指向堆上的同一个对象。代码中通过一个静态变量设置"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "localVariable2"
				},
				{
					"Type": "NodeText",
					"Data": "​指向一个对象引用。仅存在一个静态变量的一份拷贝，这份拷贝存放在堆上。因此，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "localVariable2"
				},
				{
					"Type": "NodeText",
					"Data": "​的两份拷贝都指向由"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySharedObject"
				},
				{
					"Type": "NodeText",
					"Data": "​指向的静态变量的同一个实例。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySharedObject"
				},
				{
					"Type": "NodeText",
					"Data": "​实例也存放在堆上。它对应于上图中的Object3。"
				}
			]
		},
		{
			"ID": "20230327154856-1ate0az",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-1ate0az",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySharedObject"
				},
				{
					"Type": "NodeText",
					"Data": "​类也包含两个成员变量。这些成员变量随着这个对象存放在堆上。这两个成员变量指向另外两个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Integer"
				},
				{
					"Type": "NodeText",
					"Data": "​对象。这些"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Integer"
				},
				{
					"Type": "NodeText",
					"Data": "​对象对应于上图中的Object2和Object4."
				}
			]
		},
		{
			"ID": "20230327154856-77cs67a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-77cs67a",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "methodTwo()"
				},
				{
					"Type": "NodeText",
					"Data": "​创建一个名为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "localVariable"
				},
				{
					"Type": "NodeText",
					"Data": "​的本地变量。这个成员变量是一个指向一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Integer"
				},
				{
					"Type": "NodeText",
					"Data": "​对象的对象引用。这个方法设置"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "localVariable1"
				},
				{
					"Type": "NodeText",
					"Data": "​引用指向一个新的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Integer"
				},
				{
					"Type": "NodeText",
					"Data": "​实例。在执行"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "methodTwo"
				},
				{
					"Type": "NodeText",
					"Data": "​方法时，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "localVariable1"
				},
				{
					"Type": "NodeText",
					"Data": "​引用将会在每个线程中存放一份拷贝。这两个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Integer"
				},
				{
					"Type": "NodeText",
					"Data": "​对象实例化将会被存储堆上，但是每次执行这个方法时，这个方法都会创建一个新的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Integer"
				},
				{
					"Type": "NodeText",
					"Data": "​对象，两个线程执行这个方法将会创建两个不同的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Integer"
				},
				{
					"Type": "NodeText",
					"Data": "​实例。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "methodTwo"
				},
				{
					"Type": "NodeText",
					"Data": "​方法创建的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Integer"
				},
				{
					"Type": "NodeText",
					"Data": "​对象对应于上图中的Object1和Object5。"
				}
			]
		},
		{
			"ID": "20230327154856-m6wau45",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-m6wau45",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "还有一点，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySharedObject"
				},
				{
					"Type": "NodeText",
					"Data": "​类中的两个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "long"
				},
				{
					"Type": "NodeText",
					"Data": "​类型的成员变量是原始类型的。因为，这些变量是成员变量，所以它们任然随着该对象存放在堆上，仅有本地变量存放在线程栈上。"
				}
			]
		},
		{
			"ID": "20230327154856-iufvqxy",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230327154856-iufvqxy",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "硬件内存架构"
				}
			]
		},
		{
			"ID": "20230327154856-3zsng8j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-3zsng8j",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现代硬件内存模型与Java内存模型有一些不同。理解内存模型架构以及Java内存模型如何与它协同工作也是非常重要的。这部分描述了通用的硬件内存架构，下面的部分将会描述Java内存是如何与它“联手”工作的。"
				}
			]
		},
		{
			"ID": "20230327154856-pxe5ebz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-pxe5ebz",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下面是现代计算机硬件架构的简单图示："
				}
			]
		},
		{
			"ID": "20230327154856-pxwrks4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-pxwrks4",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "enter image description here"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-java-memory-model-4-20230327154912-b9ohygs.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230327154856-x8p7nyv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-x8p7nyv",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一个现代计算机通常由两个或者多个CPU。其中一些CPU还有多核。从这一点可以看出，在一个有两个或者多个CPU的现代计算机上同时运行多个线程是可能的。每个CPU在某一时刻运行一个线程是没有问题的。这意味着，如果你的Java程序是多线程的，在你的Java程序中每个CPU上一个线程可能同时（并发）执行。"
				}
			]
		},
		{
			"ID": "20230327154856-85fip7r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-85fip7r",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "每个CPU都包含一系列的寄存器，它们是CPU内内存的基础。CPU在寄存器上执行操作的速度远大于在主存上执行的速度。这是因为CPU访问寄存器的速度远大于主存。"
				}
			]
		},
		{
			"ID": "20230327154856-6go292f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-6go292f",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "每个CPU可能还有一个CPU缓存层。实际上，绝大多数的现代CPU都有一定大小的缓存层。CPU访问缓存层的速度快于访问主存的速度，但通常比访问内部寄存器的速度还要慢一点。一些CPU还有多层缓存，但这些对理解Java内存模型如何和内存交互不是那么重要。只要知道CPU中可以有一个缓存层就可以了。"
				}
			]
		},
		{
			"ID": "20230327154856-gce8j7x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-gce8j7x",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一个计算机还包含一个主存。所有的CPU都可以访问主存。主存通常比CPU中的缓存大得多。"
				}
			]
		},
		{
			"ID": "20230327154856-phq9l0g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-phq9l0g",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通常情况下，当一个CPU需要读取主存时，它会将主存的部分读到CPU缓存中。它甚至可能将缓存中的部分内容读到它的内部寄存器中，然后在寄存器中执行操作。当CPU需要将结果写回到主存中去时，它会将内部寄存器的值刷新到缓存中，然后在某个时间点将值刷新回主存。"
				}
			]
		},
		{
			"ID": "20230327154856-xa17ngs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-xa17ngs",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当CPU需要在缓存层存放一些东西的时候，存放在缓存中的内容通常会被刷新回主存。CPU缓存可以在某一时刻将数据局部写到它的内存中，和在某一时刻局部刷新它的内存。它不会再某一时刻读/写整个缓存。通常，在一个被称作“cache lines”的更小的内存块中缓存被更新。一个或者多个缓存行可能被读到缓存，一个或者多个缓存行可能再被刷新回主存。"
				}
			]
		},
		{
			"ID": "20230327154856-yskii8m",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230327154856-yskii8m",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java内存模型和硬件内存架构之间的桥接"
				}
			]
		},
		{
			"ID": "20230327154856-a3mvzq7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-a3mvzq7",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面已经提到，Java内存模型与硬件内存架构之间存在差异。硬件内存架构没有区分线程栈和堆。对于硬件，所有的线程栈和堆都分布在主内中。部分线程栈和堆可能有时候会出现在CPU缓存中和CPU内部的寄存器中。如下图所示："
				}
			]
		},
		{
			"ID": "20230327154856-45b2aek",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-45b2aek",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "enter image description here"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-java-memory-model-5-20230327154913-krj6xz3.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230327154856-7xwftm1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-7xwftm1",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当对象和变量被存放在计算机中各种不同的内存区域中时，就可能会出现一些具体的问题。主要包括如下两个方面："
				}
			]
		},
		{
			"ID": "20230327154856-b3xk4ip",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-b3xk4ip",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "-线程对共享变量修改的可见性\n-当读，写和检查共享变量时出现race conditions"
				}
			]
		},
		{
			"ID": "20230327154856-rm7cdc9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-rm7cdc9",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下面我们专门来解释以下这两个问题。"
				}
			]
		},
		{
			"ID": "20230327154856-pnuc7uh",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230327154856-pnuc7uh",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "共享对象可见性"
				}
			]
		},
		{
			"ID": "20230327154856-pllmm8a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-pllmm8a",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果两个或者更多的线程在没有正确的使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "volatile"
				},
				{
					"Type": "NodeText",
					"Data": "​声明或者同步的情况下共享一个对象，一个线程更新这个共享对象可能对其它线程来说是不接见的。"
				}
			]
		},
		{
			"ID": "20230327154856-nhntclo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-nhntclo",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "想象一下，共享对象被初始化在主存中。跑在CPU上的一个线程将这个共享对象读到CPU缓存中。然后修改了这个对象。只要CPU缓存没有被刷新会主存，对象修改后的版本对跑在其它CPU上的线程都是不可见的。这种方式可能导致每个线程拥有这个共享对象的私有拷贝，每个拷贝停留在不同的CPU缓存中。"
				}
			]
		},
		{
			"ID": "20230327154856-qzv7rf3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-qzv7rf3",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下图示意了这种情形。跑在左边CPU的线程拷贝这个共享对象到它的CPU缓存中，然后将count变量的值修改为2。这个修改对跑在右边CPU上的其它线程是不可见的，因为修改后的count的值还没有被刷新回主存中去。"
				}
			]
		},
		{
			"ID": "20230327154856-ujxnvnx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-ujxnvnx",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "enter image description here"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-java-memory-model-6-20230327154915-770g3nc.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230327154856-5bht39e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-5bht39e",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "解决这个问题你可以使用Java中的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "volatile"
				},
				{
					"Type": "NodeText",
					"Data": "​关键字。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "volatile"
				},
				{
					"Type": "NodeText",
					"Data": "​关键字可以保证直接从主存中读取一个变量，如果这个变量被修改后，总是会被写回到主存中去。"
				}
			]
		},
		{
			"ID": "20230327154856-lqrhmb5",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230327154856-lqrhmb5",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Race Conditions"
				}
			]
		},
		{
			"ID": "20230327154856-8wuf3bl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-8wuf3bl",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果两个或者更多的线程共享一个对象，多个线程在这个共享对象上更新变量，就有可能发生"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://tutorials.jenkov.com/java-concurrency/race-conditions-and-critical-sections.html",
					"TextMarkTextContent": "race conditions"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20230327154856-xw1h1y8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-xw1h1y8",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "想象一下，如果线程A读一个共享对象的变量count到它的CPU缓存中。再想象一下，线程B也做了同样的事情，但是往一个不同的CPU缓存中。现在线程A将"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "count"
				},
				{
					"Type": "NodeText",
					"Data": "​加1，线程B也做了同样的事情。现在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "count"
				},
				{
					"Type": "NodeText",
					"Data": "​已经被增在了两个，每个CPU缓存中一次。"
				}
			]
		},
		{
			"ID": "20230327154856-3siy483",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-3siy483",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果这些增加操作被顺序的执行，变量"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "count"
				},
				{
					"Type": "NodeText",
					"Data": "​应该被增加两次，然后原值+2被写回到主存中去。"
				}
			]
		},
		{
			"ID": "20230327154856-7wifocd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-7wifocd",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "然而，两次增加都是在没有适当的同步下并发执行的。无论是线程A还是线程B将"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "count"
				},
				{
					"Type": "NodeText",
					"Data": "​修改后的版本写回到主存中取，修改后的值仅会被原值大1，尽管增加了两次。"
				}
			]
		},
		{
			"ID": "20230327154856-0wdmwth",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-0wdmwth",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下图演示了上面描述的情况："
				}
			]
		},
		{
			"ID": "20230327154856-r7r7uf3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-r7r7uf3",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "enter image description here"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-java-memory-model-7-20230327154917-zr42amw.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230327154856-lw3x7ac",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154856-lw3x7ac",
				"updated": "20230327154856"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "解决这个问题可以使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://tutorials.jenkov.com/java-concurrency/synchronized.html",
					"TextMarkTextContent": "Java同步块"
				},
				{
					"Type": "NodeText",
					"Data": "。一个同步块可以保证在同一时刻仅有一个线程可以进入代码的临界区。同步块还可以保证代码块中所有被访问的变量将会从主存中读入，当线程退出同步代码块时，所有被更新的变量都会被刷新回主存中去，不管这个变量是否被声明为volatile。"
				}
			]
		}
	]
}