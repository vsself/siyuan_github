{
	"ID": "20230327154816-jxfwfat",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230327154816-jxfwfat",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230327154826-szh6btr\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230327154826-fgz707z\u0026quot;,\u0026quot;scrollTop\u0026quot;:1464,\u0026quot;focusId\u0026quot;:\u0026quot;20230327154826-fgz707z\u0026quot;,\u0026quot;focusStart\u0026quot;:61,\u0026quot;focusEnd\u0026quot;:61}",
		"title": "线程安全及不可变性",
		"updated": "20230327154826"
	},
	"Children": [
		{
			"ID": "20230327154826-szh6btr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154826-szh6btr",
				"updated": "20230327154826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当多个线程同时访问同一个资源，并且其中的一个或者多个线程对这个资源进行了写操作，才会产生"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "竞态条件"
				},
				{
					"Type": "NodeText",
					"Data": "。多个线程同时读同一个资源不会产生竞态条件。"
				}
			]
		},
		{
			"ID": "20230327154826-telbiaa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154826-telbiaa",
				"updated": "20230327154826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们可以通过创建不可变的共享对象来保证对象在线程间共享时不会被修改，从而实现线程安全。如下示例："
				}
			]
		},
		{
			"ID": "20230327154826-vmiocoe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154826-vmiocoe",
				"updated": "20230327154826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "[code lang=”java”]\npublic class ImmutableValue{\nprivate int value = 0;"
				}
			]
		},
		{
			"ID": "20230327154826-64ei2ja",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154826-64ei2ja",
				"updated": "20230327154826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public ImmutableValue(int value){\nthis.value = value;\n}"
				}
			]
		},
		{
			"ID": "20230327154826-gogun0u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154826-gogun0u",
				"updated": "20230327154826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public int getValue(){\nreturn this.value;\n}\n}\n[/code]"
				}
			]
		},
		{
			"ID": "20230327154826-gteot3m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154826-gteot3m",
				"updated": "20230327154826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "请注意ImmutableValue类的成员变量"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "value"
				},
				{
					"Type": "NodeText",
					"Data": "​是通过构造函数赋值的，并且在类中没有set方法。这意味着一旦ImmutableValue实例被创建，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "value"
				},
				{
					"Type": "NodeText",
					"Data": "​变量就不能再被修改，这就是不可变性。但你可以通过getValue()方法读取这个变量的值。"
				}
			]
		},
		{
			"ID": "20230327154826-hnzg3pb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154826-hnzg3pb",
				"updated": "20230327154826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "（"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em",
					"TextMarkTextContent": "译者注：注意，“不变”（Immutable）和“只读”（Read Only）是不同的。当一个变量是“只读”时，变量的值不能直接改变，但是可以在其它变量发生改变的时候发生改变。比如，一个人的出生年月日是“不变”属性，而一个人的年龄便是“只读”属性，但是不是“不变”属性。随着时间的变化，一个人的年龄会随之发生变化，而一个人的出生年月日则不会变化。这就是“不变”和“只读”的区别。（摘自《Java与模式》第34章）"
				},
				{
					"Type": "NodeText",
					"Data": "）"
				}
			]
		},
		{
			"ID": "20230327154826-u179u88",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154826-u179u88",
				"updated": "20230327154826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果你需要对ImmutableValue类的实例进行操作，可以通过得到value变量后创建一个新的实例来实现，下面是一个对value变量进行加法操作的示例："
				}
			]
		},
		{
			"ID": "20230327154826-agogzs8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154826-agogzs8",
				"updated": "20230327154826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "[code lang=”java”]"
				}
			]
		},
		{
			"ID": "20230327154826-e6qh4tb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154826-e6qh4tb",
				"updated": "20230327154826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public class ImmutableValue{\nprivate int value = 0;"
				}
			]
		},
		{
			"ID": "20230327154826-6bmo92t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154826-6bmo92t",
				"updated": "20230327154826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public ImmutableValue(int value){\nthis.value = value;\n}"
				}
			]
		},
		{
			"ID": "20230327154826-dsfyhx2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154826-dsfyhx2",
				"updated": "20230327154826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public int getValue(){\nreturn this.value;\n}"
				}
			]
		},
		{
			"ID": "20230327154826-x3azj3p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154826-x3azj3p",
				"updated": "20230327154826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public ImmutableValue add(int valueToAdd){\nreturn new ImmutableValue(this.value + valueToAdd);\n}\n}"
				}
			]
		},
		{
			"ID": "20230327154826-2nf01sa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154826-2nf01sa",
				"updated": "20230327154826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "[/code]"
				}
			]
		},
		{
			"ID": "20230327154826-g8bfxqp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154826-g8bfxqp",
				"updated": "20230327154826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "请注意add()方法以加法操作的结果作为一个新的ImmutableValue类实例返回，而不是直接对它自己的value变量进行操作。"
				}
			]
		},
		{
			"ID": "20230327154826-9tveti2",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230327154826-9tveti2",
				"updated": "20230327154826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "引用不是线程安全的！"
				}
			]
		},
		{
			"ID": "20230327154826-ushlgyt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154826-ushlgyt",
				"updated": "20230327154826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "重要的是要记住，即使一个对象是线程安全的不可变对象，指向这个对象的引用也可能不是线程安全的。看这个例子："
				}
			]
		},
		{
			"ID": "20230327154826-l5ggstk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154826-l5ggstk",
				"updated": "20230327154826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "[code lang=”java”]"
				}
			]
		},
		{
			"ID": "20230327154826-kyygcfp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154826-kyygcfp",
				"updated": "20230327154826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public void Calculator{\nprivate ImmutableValue currentValue = null;"
				}
			]
		},
		{
			"ID": "20230327154826-mkox3u5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154826-mkox3u5",
				"updated": "20230327154826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public ImmutableValue getValue(){\nreturn currentValue;\n}"
				}
			]
		},
		{
			"ID": "20230327154826-2xbc493",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154826-2xbc493",
				"updated": "20230327154826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public void setValue(ImmutableValue newValue){\nthis.currentValue = newValue;\n}"
				}
			]
		},
		{
			"ID": "20230327154826-8hrrab7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154826-8hrrab7",
				"updated": "20230327154826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public void add(int newValue){\nthis.currentValue = this.currentValue.add(newValue);\n}\n}"
				}
			]
		},
		{
			"ID": "20230327154826-zzt2ldi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154826-zzt2ldi",
				"updated": "20230327154826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "[/code]"
				}
			]
		},
		{
			"ID": "20230327154826-oy4ftna",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154826-oy4ftna",
				"updated": "20230327154826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Calculator类持有一个指向ImmutableValue实例的引用。注意，通过setValue()方法和add()方法可能会改变这个引用。因此，即使Calculator类内部使用了一个不可变对象，但Calculator类本身还是可变的，因此Calculator类不是线程安全的。换句话说：ImmutableValue类是线程安全的，但使用它的类不是。当尝试通过不可变性去获得线程安全时，这点是需要牢记的。"
				}
			]
		},
		{
			"ID": "20230327154826-fgz707z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327154826-fgz707z",
				"updated": "20230327154826"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "要使Calculator类实现线程安全，将getValue()、setValue()和add()方法都声明为同步方法即可。"
				}
			]
		}
	]
}