{
	"ID": "20230327155031-ltdlccx",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230327155031-ltdlccx",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230327155042-ejd7311\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230327155042-ctitrns\u0026quot;,\u0026quot;scrollTop\u0026quot;:163.3333282470703,\u0026quot;focusId\u0026quot;:\u0026quot;20230327155042-ejd7311\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0}",
		"title": "线程通信",
		"updated": "20230327155042"
	},
	"Children": [
		{
			"ID": "20230327155042-ejd7311",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-ejd7311",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "线程通信的目标是使线程间能够互相发送信号。另一方面，线程通信使线程能够等待其他线程的信号。"
				}
			]
		},
		{
			"ID": "20230327155042-dw65ful",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-dw65ful",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "例如，线程B可以等待线程A的一个信号，这个信号会通知线程B数据已经准备好了。本文将讲解以下几个JAVA线程间通信的主题："
				}
			]
		},
		{
			"ID": "20230327155042-ijnm0ng",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-ijnm0ng",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://ifeve.com/thread-signaling/#shared_object",
					"TextMarkTextContent": "通过共享对象通信"
				}
			]
		},
		{
			"ID": "20230327155042-2b9h0na",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-2b9h0na",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://ifeve.com/thread-signaling/#busy_wait",
					"TextMarkTextContent": "忙等待"
				}
			]
		},
		{
			"ID": "20230327155042-102nuqo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-102nuqo",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://ifeve.com/thread-signaling/#wait_notify",
					"TextMarkTextContent": "wait(),notify()和notifyAll()"
				}
			]
		},
		{
			"ID": "20230327155042-qrmbvdb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-qrmbvdb",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://ifeve.com/thread-signaling/#missed_signal",
					"TextMarkTextContent": "丢失的信号"
				}
			]
		},
		{
			"ID": "20230327155042-i5lzewx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-i5lzewx",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://ifeve.com/thread-signaling/#spurious_wakeups",
					"TextMarkTextContent": "假唤醒"
				}
			]
		},
		{
			"ID": "20230327155042-uq04o96",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-uq04o96",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "6、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://ifeve.com/thread-signaling/#same_signals",
					"TextMarkTextContent": "多线程等待相同信号"
				}
			]
		},
		{
			"ID": "20230327155042-nlq31ec",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-nlq31ec",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "7、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://ifeve.com/thread-signaling/#global_wait",
					"TextMarkTextContent": "不要对常量字符串或全局对象调用wait()"
				}
			]
		},
		{
			"ID": "20230327155042-2d1smqq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230327155042-2d1smqq",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1、通过共享对象通信"
				}
			]
		},
		{
			"ID": "20230327155042-bpa28xp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-bpa28xp",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "线程间发送信号的一个简单方式是在共享对象的变量里设置信号值。线程A在一个同步块里设置boolean型成员变量hasDataToProcess为true，线程B也在同步块里读取hasDataToProcess这个成员变量。这个简单的例子使用了一个持有信号的对象，并提供了set和check方法:"
				}
			]
		},
		{
			"ID": "20230327155042-q1b04eg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-q1b04eg",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "[code lang=”java”]\npublic class MySignal{"
				}
			]
		},
		{
			"ID": "20230327155042-i5tyicv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-i5tyicv",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "protected boolean hasDataToProcess = false;"
				}
			]
		},
		{
			"ID": "20230327155042-kb53l7c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-kb53l7c",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public synchronized boolean hasDataToProcess(){\nreturn this.hasDataToProcess;\n}"
				}
			]
		},
		{
			"ID": "20230327155042-ii4i0gq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-ii4i0gq",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public synchronized void setHasDataToProcess(boolean hasData){\nthis.hasDataToProcess = hasData;\n}"
				}
			]
		},
		{
			"ID": "20230327155042-2nqn4ru",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-2nqn4ru",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "}\n[/code]"
				}
			]
		},
		{
			"ID": "20230327155042-ji8yldw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-ji8yldw",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "线程A和B必须获得指向一个MySignal共享实例的引用，以便进行通信。如果它们持有的引用指向不同的MySingal实例，那么彼此将不能检测到对方的信号。需要处理的数据可以存放在一个共享缓存区里，它和MySignal实例是分开存放的。"
				}
			]
		},
		{
			"ID": "20230327155042-gpov0fg",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230327155042-gpov0fg",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2、忙等待(Busy Wait)"
				}
			]
		},
		{
			"ID": "20230327155042-8dhovo3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-8dhovo3",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "准备处理数据的线程B正在等待数据变为可用。换句话说，它在等待线程A的一个信号，这个信号使hasDataToProcess()返回true。线程B运行在一个循环里，以等待这个信号："
				}
			]
		},
		{
			"ID": "20230327155042-yh4wv4i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-yh4wv4i",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "[code lang=”java”]\nprotected MySignal sharedSignal = …"
				}
			]
		},
		{
			"ID": "20230327155042-c7sny8q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-c7sny8q",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "…"
				}
			]
		},
		{
			"ID": "20230327155042-050xhup",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-050xhup",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "while(!sharedSignal.hasDataToProcess()){\n//do nothing… busy waiting\n}\n[/code]"
				}
			]
		},
		{
			"ID": "20230327155042-kehpmt0",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230327155042-kehpmt0",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3、wait(),notify()和notifyAll()"
				}
			]
		},
		{
			"ID": "20230327155042-beyc2ee",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-beyc2ee",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "忙等待没有对运行等待线程的CPU进行有效的利用，除非平均等待时间非常短。否则，让等待线程进入睡眠或者非运行状态更为明智，直到它接收到它等待的信号。"
				}
			]
		},
		{
			"ID": "20230327155042-x31xd57",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-x31xd57",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java有一个内建的等待机制来允许线程在等待信号的时候变为非运行状态。java.lang.Object 类定义了三个方法，wait()、notify()和notifyAll()来实现这个等待机制。"
				}
			]
		},
		{
			"ID": "20230327155042-pyh1ndo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-pyh1ndo",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一个线程一旦调用了任意对象的wait()方法，就会变为非运行状态，直到另一个线程调用了同一个对象的notify()方法。为了调用wait()或者notify()，线程必须先获得那个对象的锁。也就是说，线程必须在同步块里调用wait()或者notify()。以下是MySingal的修改版本——使用了wait()和notify()的MyWaitNotify："
				}
			]
		},
		{
			"ID": "20230327155042-ajr8thi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-ajr8thi",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "[code lang=”java”]\npublic class MonitorObject{\n}"
				}
			]
		},
		{
			"ID": "20230327155042-juk0g6a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-juk0g6a",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public class MyWaitNotify{"
				}
			]
		},
		{
			"ID": "20230327155042-i6s8hhm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-i6s8hhm",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "MonitorObject myMonitorObject = new MonitorObject();"
				}
			]
		},
		{
			"ID": "20230327155042-pdurgp9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-pdurgp9",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public void doWait(){\nsynchronized(myMonitorObject){\ntry{\nmyMonitorObject.wait();\n} catch(InterruptedException e){…}\n}\n}"
				}
			]
		},
		{
			"ID": "20230327155042-uy83cem",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-uy83cem",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public void doNotify(){\nsynchronized(myMonitorObject){\nmyMonitorObject.notify();\n}\n}\n}\n[/code]"
				}
			]
		},
		{
			"ID": "20230327155042-qrvabdc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-qrvabdc",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "等待线程将调用doWait()，而唤醒线程将调用doNotify()。当一个线程调用一个对象的notify()方法，正在等待该对象的所有线程中将有一个线程被唤醒并允许执行（校注：这个将被唤醒的线程是随机的，不可以指定唤醒哪个线程）。同时也提供了一个notifyAll()方法来唤醒正在等待一个给定对象的所有线程。"
				}
			]
		},
		{
			"ID": "20230327155042-4056hin",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-4056hin",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如你所见，不管是等待线程还是唤醒线程都在同步块里调用wait()和notify()。这是强制性的！一个线程如果没有持有对象锁，将不能调用wait()，notify()或者notifyAll()。否则，会抛出IllegalMonitorStateException异常。"
				}
			]
		},
		{
			"ID": "20230327155042-wykaqva",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-wykaqva",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em",
					"TextMarkTextContent": "（校注：JVM是这么实现的，当你调用wait时候它首先要检查下当前线程是否是锁的拥有者，不是则抛出IllegalMonitorStateExcept，参考"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em a",
					"TextMarkAHref": "http://hg.openjdk.java.net/hsx/hotspot-main/hotspot/file/61b82be3b1ff/src/share/vm/runtime/objectMonitor.cpp",
					"TextMarkTextContent": "JVM源码"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em",
					"TextMarkTextContent": "的 1422行。）"
				}
			]
		},
		{
			"ID": "20230327155042-cbgp6l1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-cbgp6l1",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是，这怎么可能？等待线程在同步块里面执行的时候，不是一直持有监视器对象（myMonitor对象）的锁吗？等待线程不能阻塞唤醒线程进入doNotify()的同步块吗？答案是：的确不能。一旦线程调用了wait()方法，它就释放了所持有的监视器对象上的锁。这将允许其他线程也可以调用wait()或者notify()。"
				}
			]
		},
		{
			"ID": "20230327155042-qn15hal",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-qn15hal",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一旦一个线程被唤醒，不能立刻就退出wait()的方法调用，直到调用notify()的线程退出了它自己的同步块。换句话说：被唤醒的线程必须重新获得监视器对象的锁，才可以退出wait()的方法调用，因为wait方法调用运行在同步块里面。如果多个线程被notifyAll()唤醒，那么在同一时刻将只有一个线程可以退出wait()方法，因为每个线程在退出wait()前必须获得监视器对象的锁。"
				}
			]
		},
		{
			"ID": "20230327155042-8h6xo27",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230327155042-8h6xo27",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4、丢失的信号（Missed Signals）"
				}
			]
		},
		{
			"ID": "20230327155042-hg2cpca",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-hg2cpca",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "notify()和notifyAll()方法不会保存调用它们的方法，因为当这两个方法被调用时，有可能没有线程处于等待状态。通知信号过后便丢弃了。因此，如果一个线程先于被通知线程调用wait()前调用了notify()，等待的线程将错过这个信号。这可能是也可能不是个问题。不过，在某些情况下，这可能使等待线程永远在等待，不再醒来，因为线程错过了唤醒信号。\n为了避免丢失信号，必须把它们保存在信号类里。在MyWaitNotify的例子中，通知信号应被存储在MyWaitNotify实例的一个成员变量里。以下是MyWaitNotify的修改版本："
				}
			]
		},
		{
			"ID": "20230327155042-hbxnweg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-hbxnweg",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "[code lang=”java”]\npublic class MyWaitNotify2{"
				}
			]
		},
		{
			"ID": "20230327155042-h1tj624",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-h1tj624",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "MonitorObject myMonitorObject = new MonitorObject();\nboolean wasSignalled = false;"
				}
			]
		},
		{
			"ID": "20230327155042-9kkrtpp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-9kkrtpp",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public void doWait(){\nsynchronized(myMonitorObject){\nif(!wasSignalled){\ntry{\nmyMonitorObject.wait();\n} catch(InterruptedException e){…}\n}\n//clear signal and continue running.\nwasSignalled = false;\n}\n}"
				}
			]
		},
		{
			"ID": "20230327155042-bejta9o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-bejta9o",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public void doNotify(){\nsynchronized(myMonitorObject){\nwasSignalled = true;\nmyMonitorObject.notify();\n}\n}\n}\n[/code]"
				}
			]
		},
		{
			"ID": "20230327155042-zehtmrg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-zehtmrg",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "留意doNotify()方法在调用notify()前把wasSignalled变量设为true。同时，留意doWait()方法在调用wait()前会检查wasSignalled变量。事实上，如果没有信号在前一次doWait()调用和这次doWait()调用之间的时间段里被接收到，它将只调用wait()。"
				}
			]
		},
		{
			"ID": "20230327155042-vu1drgf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-vu1drgf",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em",
					"TextMarkTextContent": "（校注：为了避免信号丢失， 用一个变量来保存是否被通知过。在notify前，设置自己已经被通知过。在wait后，设置自己没有被通知过，需要等待通知。）"
				}
			]
		},
		{
			"ID": "20230327155042-v6osjx8",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230327155042-v6osjx8",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5、假唤醒"
				}
			]
		},
		{
			"ID": "20230327155042-qxehf51",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-qxehf51",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "由于莫名其妙的原因，线程有可能在没有调用过notify()和notifyAll()的情况下醒来。这就是所谓的假唤醒（spurious wakeups）。无端端地醒过来了。"
				}
			]
		},
		{
			"ID": "20230327155042-guuds6n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-guuds6n",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果在MyWaitNotify2的doWait()方法里发生了假唤醒，等待线程即使没有收到正确的信号，也能够执行后续的操作。这可能导致你的应用程序出现严重问题。"
				}
			]
		},
		{
			"ID": "20230327155042-5a949m5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-5a949m5",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为了防止假唤醒，保存信号的成员变量将在一个while循环里接受检查，而不是在if表达式里。这样的一个while循环叫做自旋锁"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em",
					"TextMarkTextContent": "（校注：这种做法要慎重，目前的JVM实现自旋会消耗CPU，如果长时间不调用doNotify方法，doWait方法会一直自旋，CPU会消耗太大）"
				},
				{
					"Type": "NodeText",
					"Data": "。被唤醒的线程会自旋直到自旋锁(while循环)里的条件变为false。以下MyWaitNotify2的修改版本展示了这点："
				}
			]
		},
		{
			"ID": "20230327155042-9k8ap9l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-9k8ap9l",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "[code lang=”java”]\npublic class MyWaitNotify3{"
				}
			]
		},
		{
			"ID": "20230327155042-wriwu55",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-wriwu55",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "MonitorObject myMonitorObject = new MonitorObject();\nboolean wasSignalled = false;"
				}
			]
		},
		{
			"ID": "20230327155042-ys5jmpj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-ys5jmpj",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public void doWait(){\nsynchronized(myMonitorObject){\nwhile(!wasSignalled){\ntry{\nmyMonitorObject.wait();\n} catch(InterruptedException e){…}\n}\n//clear signal and continue running.\nwasSignalled = false;\n}\n}"
				}
			]
		},
		{
			"ID": "20230327155042-564nkr3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-564nkr3",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public void doNotify(){\nsynchronized(myMonitorObject){\nwasSignalled = true;\nmyMonitorObject.notify();\n}\n}\n}\n[/code]"
				}
			]
		},
		{
			"ID": "20230327155042-lo7a0rn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-lo7a0rn",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "留意wait()方法是在while循环里，而不在if表达式里。如果等待线程没有收到信号就唤醒，wasSignalled变量将变为false,while循环会再执行一次，促使醒来的线程回到等待状态。"
				}
			]
		},
		{
			"ID": "20230327155042-wi5zsnc",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230327155042-wi5zsnc",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "6、多个线程等待相同信号"
				}
			]
		},
		{
			"ID": "20230327155042-x14h45n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-x14h45n",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果你有多个线程在等待，被notifyAll()唤醒，但只有一个被允许继续执行，使用while循环也是个好方法。每次只有一个线程可以获得监视器对象锁，意味着只有一个线程可以退出wait()调用并清除wasSignalled标志（设为false）。一旦这个线程退出doWait()的同步块，其他线程退出wait()调用，并在while循环里检查wasSignalled变量值。但是，这个标志已经被第一个唤醒的线程清除了，所以其余醒来的线程将回到等待状态，直到下次信号到来。"
				}
			]
		},
		{
			"ID": "20230327155042-dad8teu",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230327155042-dad8teu",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "7、不要在字符串常量或全局对象中调用wait()"
				}
			]
		},
		{
			"ID": "20230327155042-ymyjb3p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-ymyjb3p",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em",
					"TextMarkTextContent": "（校注：本章说的字符串常量指的是值为常量的变量）"
				}
			]
		},
		{
			"ID": "20230327155042-1i0wi1h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-1i0wi1h",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本文早期的一个版本在MyWaitNotify例子里使用字符串常量（””）作为管程对象。以下是那个例子："
				}
			]
		},
		{
			"ID": "20230327155042-m67vy6q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-m67vy6q",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "[code lang=”java”]\npublic class MyWaitNotify{"
				}
			]
		},
		{
			"ID": "20230327155042-aioivwb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-aioivwb",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "String myMonitorObject = \"\";\nboolean wasSignalled = false;"
				}
			]
		},
		{
			"ID": "20230327155042-qjvannm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-qjvannm",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public void doWait(){\nsynchronized(myMonitorObject){\nwhile(!wasSignalled){\ntry{\nmyMonitorObject.wait();\n} catch(InterruptedException e){…}\n}\n//clear signal and continue running.\nwasSignalled = false;\n}\n}"
				}
			]
		},
		{
			"ID": "20230327155042-5e1jc92",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-5e1jc92",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "public void doNotify(){\nsynchronized(myMonitorObject){\nwasSignalled = true;\nmyMonitorObject.notify();\n}\n}\n}\n[/code]"
				}
			]
		},
		{
			"ID": "20230327155042-eqi14lq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-eqi14lq",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在空字符串作为锁的同步块(或者其他常量字符串)里调用wait()和notify()产生的问题是，JVM/编译器内部会把常量字符串转换成同一个对象。这意味着，即使你有2个不同的MyWaitNotify实例，它们都引用了相同的空字符串实例。同时也意味着存在这样的风险：在第一个MyWaitNotify实例上调用doWait()的线程会被在第二个MyWaitNotify实例上调用doNotify()的线程唤醒。这种情况可以画成以下这张图：\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/net-img-strings-wait-notify-20230327155048-wajgkd2.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://ifeve.com/thread-signaling/strings-wait-notify/",
					"TextMarkTextContent": "http://ifeve.com/thread-signaling/strings-wait-notify/"
				},
				{
					"Type": "NodeText",
					"Data": "\n起初这可能不像个大问题。毕竟，如果doNotify()在第二个MyWaitNotify实例上被调用，真正发生的事不外乎线程A和B被错误的唤醒了 。这个被唤醒的线程（A或者B）将在while循环里检查信号值，然后回到等待状态，因为doNotify()并没有在第一个MyWaitNotify实例上调用，而这个正是它要等待的实例。这种情况相当于引发了一次假唤醒。线程A或者B在信号值没有更新的情况下唤醒。但是代码处理了这种情况，所以线程回到了等待状态。记住，即使4个线程在相同的共享字符串实例上调用wait()和notify()，doWait()和doNotify()里的信号还会被2个MyWaitNotify实例分别保存。在MyWaitNotify1上的一次doNotify()调用可能唤醒MyWaitNotify2的线程，但是信号值只会保存在MyWaitNotify1里。"
				}
			]
		},
		{
			"ID": "20230327155042-8p6z4o0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-8p6z4o0",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "问题在于，由于doNotify()仅调用了notify()而不是notifyAll()，即使有4个线程在相同的字符串（空字符串）实例上等待，只能有一个线程被唤醒。所以，如果线程A或B被发给C或D的信号唤醒，它会检查自己的信号值，看看有没有信号被接收到，然后回到等待状态。而C和D都没被唤醒来检查它们实际上接收到的信号值，这样信号便丢失了。这种情况相当于前面所说的丢失信号的问题。C和D被发送过信号，只是都不能对信号作出回应。"
				}
			]
		},
		{
			"ID": "20230327155042-awr3yj0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-awr3yj0",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果doNotify()方法调用notifyAll()，而非notify()，所有等待线程都会被唤醒并依次检查信号值。线程A和B将回到等待状态，但是C或D只有一个线程注意到信号，并退出doWait()方法调用。C或D中的另一个将回到等待状态，因为获得信号的线程在退出doWait()的过程中清除了信号值(置为false)。"
				}
			]
		},
		{
			"ID": "20230327155042-518sqe2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-518sqe2",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "看过上面这段后，你可能会设法使用notifyAll()来代替notify()，但是这在性能上是个坏主意。在只有一个线程能对信号进行响应的情况下，没有理由每次都去唤醒所有线程。"
				}
			]
		},
		{
			"ID": "20230327155042-iz507ih",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-iz507ih",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "所以："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "在wait()/notify()机制中，不要使用全局对象，字符串常量等。应该使用对应唯一的对象"
				},
				{
					"Type": "NodeText",
					"Data": "。例如，每一个MyWaitNotify3的实例（前一节的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://ifeve.com/thread-signaling/#MyWaitNotify3",
					"TextMarkTextContent": "例子"
				},
				{
					"Type": "NodeText",
					"Data": "）拥有一个属于自己的监视器对象，而不是在空字符串上调用wait()/notify()。"
				}
			]
		},
		{
			"ID": "20230327155042-gscrbd9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-gscrbd9",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "校注："
				}
			]
		},
		{
			"ID": "20230327155042-ctitrns",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327155042-ctitrns",
				"updated": "20230327155042"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "管程 (英语：Monitors，也称为监视器) 是对多个工作线程实现互斥访问共享资源的对象或模块。这些共享资源一般是硬件设备或一群变量。管程实现了在一个时间点，最多只有一个线程在执行它的某个子程序。与那些通过修改数据结构实现互斥访问的并发程序设计相比，管程很大程度上简化了程序设计。"
				}
			]
		}
	]
}