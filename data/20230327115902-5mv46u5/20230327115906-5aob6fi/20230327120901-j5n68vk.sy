{
	"ID": "20230327120901-j5n68vk",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230327120901-j5n68vk",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230327121020-nt9qy4a\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230327121020-4aof6l6\u0026quot;,\u0026quot;scrollTop\u0026quot;:38,\u0026quot;focusId\u0026quot;:\u0026quot;20230327121020-4aof6l6\u0026quot;,\u0026quot;focusStart\u0026quot;:133,\u0026quot;focusEnd\u0026quot;:133}",
		"title": "多线程的代价",
		"updated": "20230327121020"
	},
	"Children": [
		{
			"ID": "20230327121020-nt9qy4a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327121020-nt9qy4a",
				"updated": "20230327121020"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从一个单线程的应用到一个多线程的应用并不仅仅带来好处，它也会有一些代价。不要仅仅为了使用多线程而使用多线程。而应该明确在使用多线程时能多来的好处比所付出的代价大的时候，才使用多线程。如果存在疑问，应该尝试测量一下应用程序的性能和响应能力，而不只是猜测。"
				}
			]
		},
		{
			"ID": "20230327121020-w3nnlod",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230327121020-w3nnlod",
				"updated": "20230327121020"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "设计更复杂"
				}
			]
		},
		{
			"ID": "20230327121020-02jp7x8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327121020-02jp7x8",
				"updated": "20230327121020"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "虽然有一些多线程应用程序比单线程的应用程序要简单，但其他的一般都更复杂。在多线程访问共享数据的时候，这部分代码需要特别的注意。线程之间的交互往往非常复杂。不正确的线程同步产生的错误非常难以被发现，并且重现以修复。"
				}
			]
		},
		{
			"ID": "20230327121020-3juhjae",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230327121020-3juhjae",
				"updated": "20230327121020"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上下文切换的开销"
				}
			]
		},
		{
			"ID": "20230327121020-9us03td",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327121020-9us03td",
				"updated": "20230327121020"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当CPU从执行一个线程切换到执行另外一个线程的时候，它需要先存储当前线程的本地的数据，程序指针等，然后载入另一个线程的本地数据，程序指针等，最后才开始执行。这种切换称为“上下文切换”(“context switch”)。CPU会在一个上下文中执行一个线程，然后切换到另外一个上下文中执行另外一个线程。"
				}
			]
		},
		{
			"ID": "20230327121020-cobkg7l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327121020-cobkg7l",
				"updated": "20230327121020"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上下文切换并不廉价。如果没有必要，应该减少上下文切换的发生。"
				}
			]
		},
		{
			"ID": "20230327121020-y3rg9m2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327121020-y3rg9m2",
				"updated": "20230327121020"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "你可以通过维基百科阅读更多的关于上下文切换相关的内容："
				}
			]
		},
		{
			"ID": "20230327121020-d59uwih",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327121020-d59uwih",
				"updated": "20230327121020"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://en.wikipedia.org/wiki/Context_switch",
					"TextMarkTextContent": "http://en.wikipedia.org/wiki/Context_switch"
				}
			]
		},
		{
			"ID": "20230327121020-f3vydll",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230327121020-f3vydll",
				"updated": "20230327121020"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "增加资源消耗"
				}
			]
		},
		{
			"ID": "20230327121020-4aof6l6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230327121020-4aof6l6",
				"updated": "20230327121020"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "线程在运行的时候需要从计算机里面得到一些资源。除了CPU，线程还需要一些内存来维持它本地的堆栈。它也需要占用操作系统中一些资源来管理线程。我们可以尝试编写一个程序，让它创建100个线程，这些线程什么事情都不做，只是在等待，然后看看这个程序在运行的时候占用了多少内存。"
				}
			]
		}
	]
}