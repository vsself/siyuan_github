{
	"ID": "20230325232336-qu7j6ph",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230325232336-qu7j6ph",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230325232336-yrxyyx6\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230325232614-smdvhnm\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230325232614-smdvhnm\u0026quot;,\u0026quot;focusStart\u0026quot;:57,\u0026quot;focusEnd\u0026quot;:57}",
		"title": "集合的线程安全",
		"updated": "20230325232629"
	},
	"Children": [
		{
			"ID": "20230325232336-yrxyyx6",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230325232336-yrxyyx6",
				"updated": "20230325232349"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "第一代线程安全集合类"
				}
			]
		},
		{
			"ID": "20230325232400-1zma71h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230325232400-1zma71h"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Vector, Hashtable是怎么保证线程安排的：使用synchronized修饰方法"
				}
			]
		},
		{
			"ID": "20230325232409-kai7twg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230325232409-kai7twg"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "缺点：效率低下"
				}
			]
		},
		{
			"ID": "20230325232412-yfrn22q",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230325232412-yfrn22q"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "第二代线程非安全集合类"
				}
			]
		},
		{
			"ID": "20230325232414-3xzie1a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230325232414-3xzie1a"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ArrayList、 HashMap线程不安全，但是性能好，用来替代Vector、Hashtable"
				}
			]
		},
		{
			"ID": "20230325232423-zh9wssl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230325232423-zh9wssl"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用ArrayList、HashMap，需要线程安全怎么办呢？"
				}
			]
		},
		{
			"ID": "20230325232429-1vi3a8z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230325232429-1vi3a8z"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用Collections.synchronizedList(list);Collections.synchronizedMap(m);"
				}
			]
		},
		{
			"ID": "20230325232438-wtp1tdq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230325232438-wtp1tdq"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "底层使用synchronized代码块锁虽然也是锁住了所有的代码，但是锁在方法里边，并所在方法外边性能可以理解为稍有提高吧。毕竟进方法本身就要分配资源的"
				}
			]
		},
		{
			"ID": "20230325232515-6fh5k88",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230325232515-6fh5k88",
				"updated": "20230325232516"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "第三代线程安全集合类"
				}
			]
		},
		{
			"ID": "20230325232522-j3i63iw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230325232522-j3i63iw"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在大量并发情况下如何提高集合的效率和安全呢？"
				}
			]
		},
		{
			"ID": "20230325232540-47exwer",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230325232540-47exwer"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "java.util.concurrent.*"
				}
			]
		},
		{
			"ID": "20230325232542-shk89e7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230325232542-shk89e7"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ConcurrentHashMap:"
				}
			]
		},
		{
			"ID": "20230325232558-34k06c2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230325232558-34k06c2",
				"updated": "20230325232558"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "CopyOnWriteArrayList :"
				}
			]
		},
		{
			"ID": "20230325232600-mi5b9bx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230325232600-mi5b9bx",
				"updated": "20230325232612"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "CopyOnWriteArraySet: 注意不是CopyOnWriteHashSet*"
				}
			]
		},
		{
			"ID": "20230325232614-smdvhnm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230325232614-smdvhnm",
				"updated": "20230325232629"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "底层大都采用Lock锁（1.8的ConcurrentHashMap不使用Lock锁），保证安全的同时，性能也很高。"
				}
			]
		}
	]
}